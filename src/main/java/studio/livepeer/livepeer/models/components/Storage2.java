/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import studio.livepeer.livepeer.utils.Utils;

/**
 * Storage2 - Storage for the output files
 */

public class Storage2 {

    /**
     * Type of service used for output files
     */
    @JsonProperty("type")
    private TranscodePayloadStorageType type;

    /**
     * Delegation proof for Livepeer to be able to upload to
     * web3.storage
     * 
     */
    @JsonProperty("credentials")
    private TranscodePayloadStorageCredentials credentials;

    @JsonCreator
    public Storage2(
            @JsonProperty("type") TranscodePayloadStorageType type,
            @JsonProperty("credentials") TranscodePayloadStorageCredentials credentials) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(credentials, "credentials");
        this.type = type;
        this.credentials = credentials;
    }

    /**
     * Type of service used for output files
     */
    @JsonIgnore
    public TranscodePayloadStorageType type() {
        return type;
    }

    /**
     * Delegation proof for Livepeer to be able to upload to
     * web3.storage
     * 
     */
    @JsonIgnore
    public TranscodePayloadStorageCredentials credentials() {
        return credentials;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of service used for output files
     */
    public Storage2 withType(TranscodePayloadStorageType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Delegation proof for Livepeer to be able to upload to
     * web3.storage
     * 
     */
    public Storage2 withCredentials(TranscodePayloadStorageCredentials credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Storage2 other = (Storage2) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            credentials);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Storage2.class,
                "type", type,
                "credentials", credentials);
    }
    
    public final static class Builder {
 
        private TranscodePayloadStorageType type;
 
        private TranscodePayloadStorageCredentials credentials;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of service used for output files
         */
        public Builder type(TranscodePayloadStorageType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Delegation proof for Livepeer to be able to upload to
         * web3.storage
         * 
         */
        public Builder credentials(TranscodePayloadStorageCredentials credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }
        
        public Storage2 build() {
            return new Storage2(
                type,
                credentials);
        }
    }
}

