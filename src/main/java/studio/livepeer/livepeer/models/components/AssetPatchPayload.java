/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import studio.livepeer.livepeer.utils.Utils;


public class AssetPatchPayload {

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorId")
    private Optional<? extends InputCreatorId> creatorId;

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackPolicy")
    private JsonNullable<? extends PlaybackPolicy> playbackPolicy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage")
    private Optional<? extends Storage> storage;

    @JsonCreator
    public AssetPatchPayload(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("creatorId") Optional<? extends InputCreatorId> creatorId,
            @JsonProperty("playbackPolicy") JsonNullable<? extends PlaybackPolicy> playbackPolicy,
            @JsonProperty("storage") Optional<? extends Storage> storage) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        Utils.checkNotNull(storage, "storage");
        this.name = name;
        this.creatorId = creatorId;
        this.playbackPolicy = playbackPolicy;
        this.storage = storage;
    }
    
    public AssetPatchPayload() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InputCreatorId> creatorId() {
        return (Optional<InputCreatorId>) creatorId;
    }

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlaybackPolicy> playbackPolicy() {
        return (JsonNullable<PlaybackPolicy>) playbackPolicy;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Storage> storage() {
        return (Optional<Storage>) storage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    public AssetPatchPayload withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    public AssetPatchPayload withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AssetPatchPayload withCreatorId(InputCreatorId creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = Optional.ofNullable(creatorId);
        return this;
    }

    public AssetPatchPayload withCreatorId(Optional<? extends InputCreatorId> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    public AssetPatchPayload withPlaybackPolicy(PlaybackPolicy playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = JsonNullable.of(playbackPolicy);
        return this;
    }

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    public AssetPatchPayload withPlaybackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = playbackPolicy;
        return this;
    }

    public AssetPatchPayload withStorage(Storage storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = Optional.ofNullable(storage);
        return this;
    }

    public AssetPatchPayload withStorage(Optional<? extends Storage> storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = storage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssetPatchPayload other = (AssetPatchPayload) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.creatorId, other.creatorId) &&
            Objects.deepEquals(this.playbackPolicy, other.playbackPolicy) &&
            Objects.deepEquals(this.storage, other.storage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            creatorId,
            playbackPolicy,
            storage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AssetPatchPayload.class,
                "name", name,
                "creatorId", creatorId,
                "playbackPolicy", playbackPolicy,
                "storage", storage);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends InputCreatorId> creatorId = Optional.empty();
 
        private JsonNullable<? extends PlaybackPolicy> playbackPolicy = JsonNullable.undefined();
 
        private Optional<? extends Storage> storage = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
         * 
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
         * 
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder creatorId(InputCreatorId creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = Optional.ofNullable(creatorId);
            return this;
        }

        public Builder creatorId(Optional<? extends InputCreatorId> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        /**
         * Whether the playback policy for an asset or stream is public or signed
         */
        public Builder playbackPolicy(PlaybackPolicy playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = JsonNullable.of(playbackPolicy);
            return this;
        }

        /**
         * Whether the playback policy for an asset or stream is public or signed
         */
        public Builder playbackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = playbackPolicy;
            return this;
        }

        public Builder storage(Storage storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = Optional.ofNullable(storage);
            return this;
        }

        public Builder storage(Optional<? extends Storage> storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = storage;
            return this;
        }
        
        public AssetPatchPayload build() {
            return new AssetPatchPayload(
                name,
                creatorId,
                playbackPolicy,
                storage);
        }
    }
}

