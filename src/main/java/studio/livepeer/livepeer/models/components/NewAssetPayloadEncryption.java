/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.utils.Utils;


public class NewAssetPayloadEncryption {

    /**
     * Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
     */
    @JsonProperty("encryptedKey")
    private String encryptedKey;

    @JsonCreator
    public NewAssetPayloadEncryption(
            @JsonProperty("encryptedKey") String encryptedKey) {
        Utils.checkNotNull(encryptedKey, "encryptedKey");
        this.encryptedKey = encryptedKey;
    }

    /**
     * Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
     */
    @JsonIgnore
    public String encryptedKey() {
        return encryptedKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
     */
    public NewAssetPayloadEncryption withEncryptedKey(String encryptedKey) {
        Utils.checkNotNull(encryptedKey, "encryptedKey");
        this.encryptedKey = encryptedKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewAssetPayloadEncryption other = (NewAssetPayloadEncryption) o;
        return 
            Objects.deepEquals(this.encryptedKey, other.encryptedKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            encryptedKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NewAssetPayloadEncryption.class,
                "encryptedKey", encryptedKey);
    }
    
    public final static class Builder {
 
        private String encryptedKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
         */
        public Builder encryptedKey(String encryptedKey) {
            Utils.checkNotNull(encryptedKey, "encryptedKey");
            this.encryptedKey = encryptedKey;
            return this;
        }
        
        public NewAssetPayloadEncryption build() {
            return new NewAssetPayloadEncryption(
                encryptedKey);
        }
    }
}

