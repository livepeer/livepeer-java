/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * TaskExportData - Parameters for the export-data task
 */

public class TaskExportData {

    /**
     * File content to store into IPFS
     */
    @JsonProperty("content")
    private Content content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipfs")
    private Optional<? extends IpfsExportParams> ipfs;

    /**
     * Optional type of content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * Optional ID of the content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonCreator
    public TaskExportData(
            @JsonProperty("content") Content content,
            @JsonProperty("ipfs") Optional<? extends IpfsExportParams> ipfs,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("id") Optional<String> id) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(ipfs, "ipfs");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(id, "id");
        this.content = content;
        this.ipfs = ipfs;
        this.type = type;
        this.id = id;
    }
    
    public TaskExportData(
            Content content) {
        this(content, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * File content to store into IPFS
     */
    @JsonIgnore
    public Content content() {
        return content;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IpfsExportParams> ipfs() {
        return (Optional<IpfsExportParams>) ipfs;
    }

    /**
     * Optional type of content
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * Optional ID of the content
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * File content to store into IPFS
     */
    public TaskExportData withContent(Content content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public TaskExportData withIpfs(IpfsExportParams ipfs) {
        Utils.checkNotNull(ipfs, "ipfs");
        this.ipfs = Optional.ofNullable(ipfs);
        return this;
    }

    public TaskExportData withIpfs(Optional<? extends IpfsExportParams> ipfs) {
        Utils.checkNotNull(ipfs, "ipfs");
        this.ipfs = ipfs;
        return this;
    }

    /**
     * Optional type of content
     */
    public TaskExportData withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Optional type of content
     */
    public TaskExportData withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Optional ID of the content
     */
    public TaskExportData withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Optional ID of the content
     */
    public TaskExportData withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskExportData other = (TaskExportData) o;
        return 
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.ipfs, other.ipfs) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            content,
            ipfs,
            type,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaskExportData.class,
                "content", content,
                "ipfs", ipfs,
                "type", type,
                "id", id);
    }
    
    public final static class Builder {
 
        private Content content;
 
        private Optional<? extends IpfsExportParams> ipfs = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> id = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * File content to store into IPFS
         */
        public Builder content(Content content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder ipfs(IpfsExportParams ipfs) {
            Utils.checkNotNull(ipfs, "ipfs");
            this.ipfs = Optional.ofNullable(ipfs);
            return this;
        }

        public Builder ipfs(Optional<? extends IpfsExportParams> ipfs) {
            Utils.checkNotNull(ipfs, "ipfs");
            this.ipfs = ipfs;
            return this;
        }

        /**
         * Optional type of content
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Optional type of content
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Optional ID of the content
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Optional ID of the content
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public TaskExportData build() {
            return new TaskExportData(
                content,
                ipfs,
                type,
                id);
        }
    }
}

