/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class WebhookInput {

    @JsonProperty("name")
    private String name;

    /**
     * The ID of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectId")
    private Optional<String> projectId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    private Optional<? extends List<Events>> events;

    @JsonProperty("url")
    private String url;

    /**
     * shared secret used to sign the webhook payload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharedSecret")
    private Optional<String> sharedSecret;

    /**
     * streamId of the stream on which the webhook is applied
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamId")
    private Optional<String> streamId;

    @JsonCreator
    public WebhookInput(
            @JsonProperty("name") String name,
            @JsonProperty("projectId") Optional<String> projectId,
            @JsonProperty("events") Optional<? extends List<Events>> events,
            @JsonProperty("url") String url,
            @JsonProperty("sharedSecret") Optional<String> sharedSecret,
            @JsonProperty("streamId") Optional<String> streamId) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(events, "events");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(sharedSecret, "sharedSecret");
        Utils.checkNotNull(streamId, "streamId");
        this.name = name;
        this.projectId = projectId;
        this.events = events;
        this.url = url;
        this.sharedSecret = sharedSecret;
        this.streamId = streamId;
    }
    
    public WebhookInput(
            String name,
            String url) {
        this(name, Optional.empty(), Optional.empty(), url, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The ID of the project
     */
    @JsonIgnore
    public Optional<String> projectId() {
        return projectId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Events>> events() {
        return (Optional<List<Events>>) events;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * shared secret used to sign the webhook payload
     */
    @JsonIgnore
    public Optional<String> sharedSecret() {
        return sharedSecret;
    }

    /**
     * streamId of the stream on which the webhook is applied
     */
    @JsonIgnore
    public Optional<String> streamId() {
        return streamId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WebhookInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the project
     */
    public WebhookInput withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = Optional.ofNullable(projectId);
        return this;
    }

    /**
     * The ID of the project
     */
    public WebhookInput withProjectId(Optional<String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    public WebhookInput withEvents(List<Events> events) {
        Utils.checkNotNull(events, "events");
        this.events = Optional.ofNullable(events);
        return this;
    }

    public WebhookInput withEvents(Optional<? extends List<Events>> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }

    public WebhookInput withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * shared secret used to sign the webhook payload
     */
    public WebhookInput withSharedSecret(String sharedSecret) {
        Utils.checkNotNull(sharedSecret, "sharedSecret");
        this.sharedSecret = Optional.ofNullable(sharedSecret);
        return this;
    }

    /**
     * shared secret used to sign the webhook payload
     */
    public WebhookInput withSharedSecret(Optional<String> sharedSecret) {
        Utils.checkNotNull(sharedSecret, "sharedSecret");
        this.sharedSecret = sharedSecret;
        return this;
    }

    /**
     * streamId of the stream on which the webhook is applied
     */
    public WebhookInput withStreamId(String streamId) {
        Utils.checkNotNull(streamId, "streamId");
        this.streamId = Optional.ofNullable(streamId);
        return this;
    }

    /**
     * streamId of the stream on which the webhook is applied
     */
    public WebhookInput withStreamId(Optional<String> streamId) {
        Utils.checkNotNull(streamId, "streamId");
        this.streamId = streamId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookInput other = (WebhookInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.projectId, other.projectId) &&
            Objects.deepEquals(this.events, other.events) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.sharedSecret, other.sharedSecret) &&
            Objects.deepEquals(this.streamId, other.streamId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            projectId,
            events,
            url,
            sharedSecret,
            streamId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookInput.class,
                "name", name,
                "projectId", projectId,
                "events", events,
                "url", url,
                "sharedSecret", sharedSecret,
                "streamId", streamId);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<String> projectId = Optional.empty();
 
        private Optional<? extends List<Events>> events = Optional.empty();
 
        private String url;
 
        private Optional<String> sharedSecret = Optional.empty();
 
        private Optional<String> streamId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = Optional.ofNullable(projectId);
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(Optional<String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }

        public Builder events(List<Events> events) {
            Utils.checkNotNull(events, "events");
            this.events = Optional.ofNullable(events);
            return this;
        }

        public Builder events(Optional<? extends List<Events>> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * shared secret used to sign the webhook payload
         */
        public Builder sharedSecret(String sharedSecret) {
            Utils.checkNotNull(sharedSecret, "sharedSecret");
            this.sharedSecret = Optional.ofNullable(sharedSecret);
            return this;
        }

        /**
         * shared secret used to sign the webhook payload
         */
        public Builder sharedSecret(Optional<String> sharedSecret) {
            Utils.checkNotNull(sharedSecret, "sharedSecret");
            this.sharedSecret = sharedSecret;
            return this;
        }

        /**
         * streamId of the stream on which the webhook is applied
         */
        public Builder streamId(String streamId) {
            Utils.checkNotNull(streamId, "streamId");
            this.streamId = Optional.ofNullable(streamId);
            return this;
        }

        /**
         * streamId of the stream on which the webhook is applied
         */
        public Builder streamId(Optional<String> streamId) {
            Utils.checkNotNull(streamId, "streamId");
            this.streamId = streamId;
            return this;
        }
        
        public WebhookInput build() {
            return new WebhookInput(
                name,
                projectId,
                events,
                url,
                sharedSecret,
                streamId);
        }
    }
}

