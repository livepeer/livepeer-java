/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;
/**
 * TranscodeFile - Parameters for the transcode-file task
 */

public class TranscodeFile {

    /**
     * Input video file to transcode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("input")
    private Optional<? extends TaskInput> input;

    /**
     * Storage for the output files
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage")
    private Optional<? extends TaskStorage> storage;

    /**
     * Output formats
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outputs")
    private Optional<? extends TaskOutputs> outputs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profiles")
    private Optional<? extends java.util.List<TranscodeProfile>> profiles;

    /**
     * How many seconds the duration of each output segment should
     * be
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetSegmentSizeSecs")
    private Optional<? extends Double> targetSegmentSizeSecs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorId")
    private Optional<? extends InputCreatorId> creatorId;

    /**
     * Decides if the output video should include C2PA signature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("c2pa")
    private Optional<? extends Boolean> c2pa;

    @JsonCreator
    public TranscodeFile(
            @JsonProperty("input") Optional<? extends TaskInput> input,
            @JsonProperty("storage") Optional<? extends TaskStorage> storage,
            @JsonProperty("outputs") Optional<? extends TaskOutputs> outputs,
            @JsonProperty("profiles") Optional<? extends java.util.List<TranscodeProfile>> profiles,
            @JsonProperty("targetSegmentSizeSecs") Optional<? extends Double> targetSegmentSizeSecs,
            @JsonProperty("creatorId") Optional<? extends InputCreatorId> creatorId,
            @JsonProperty("c2pa") Optional<? extends Boolean> c2pa) {
        Utils.checkNotNull(input, "input");
        Utils.checkNotNull(storage, "storage");
        Utils.checkNotNull(outputs, "outputs");
        Utils.checkNotNull(profiles, "profiles");
        Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(c2pa, "c2pa");
        this.input = input;
        this.storage = storage;
        this.outputs = outputs;
        this.profiles = profiles;
        this.targetSegmentSizeSecs = targetSegmentSizeSecs;
        this.creatorId = creatorId;
        this.c2pa = c2pa;
    }
    
    public TranscodeFile() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Input video file to transcode
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaskInput> input() {
        return (Optional<TaskInput>) input;
    }

    /**
     * Storage for the output files
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaskStorage> storage() {
        return (Optional<TaskStorage>) storage;
    }

    /**
     * Output formats
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaskOutputs> outputs() {
        return (Optional<TaskOutputs>) outputs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<TranscodeProfile>> profiles() {
        return (Optional<java.util.List<TranscodeProfile>>) profiles;
    }

    /**
     * How many seconds the duration of each output segment should
     * be
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> targetSegmentSizeSecs() {
        return (Optional<Double>) targetSegmentSizeSecs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InputCreatorId> creatorId() {
        return (Optional<InputCreatorId>) creatorId;
    }

    /**
     * Decides if the output video should include C2PA signature
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> c2pa() {
        return (Optional<Boolean>) c2pa;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Input video file to transcode
     */
    public TranscodeFile withInput(TaskInput input) {
        Utils.checkNotNull(input, "input");
        this.input = Optional.ofNullable(input);
        return this;
    }

    /**
     * Input video file to transcode
     */
    public TranscodeFile withInput(Optional<? extends TaskInput> input) {
        Utils.checkNotNull(input, "input");
        this.input = input;
        return this;
    }

    /**
     * Storage for the output files
     */
    public TranscodeFile withStorage(TaskStorage storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = Optional.ofNullable(storage);
        return this;
    }

    /**
     * Storage for the output files
     */
    public TranscodeFile withStorage(Optional<? extends TaskStorage> storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = storage;
        return this;
    }

    /**
     * Output formats
     */
    public TranscodeFile withOutputs(TaskOutputs outputs) {
        Utils.checkNotNull(outputs, "outputs");
        this.outputs = Optional.ofNullable(outputs);
        return this;
    }

    /**
     * Output formats
     */
    public TranscodeFile withOutputs(Optional<? extends TaskOutputs> outputs) {
        Utils.checkNotNull(outputs, "outputs");
        this.outputs = outputs;
        return this;
    }

    public TranscodeFile withProfiles(java.util.List<TranscodeProfile> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = Optional.ofNullable(profiles);
        return this;
    }

    public TranscodeFile withProfiles(Optional<? extends java.util.List<TranscodeProfile>> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = profiles;
        return this;
    }

    /**
     * How many seconds the duration of each output segment should
     * be
     * 
     */
    public TranscodeFile withTargetSegmentSizeSecs(double targetSegmentSizeSecs) {
        Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
        this.targetSegmentSizeSecs = Optional.ofNullable(targetSegmentSizeSecs);
        return this;
    }

    /**
     * How many seconds the duration of each output segment should
     * be
     * 
     */
    public TranscodeFile withTargetSegmentSizeSecs(Optional<? extends Double> targetSegmentSizeSecs) {
        Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
        this.targetSegmentSizeSecs = targetSegmentSizeSecs;
        return this;
    }

    public TranscodeFile withCreatorId(InputCreatorId creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = Optional.ofNullable(creatorId);
        return this;
    }

    public TranscodeFile withCreatorId(Optional<? extends InputCreatorId> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    /**
     * Decides if the output video should include C2PA signature
     */
    public TranscodeFile withC2pa(boolean c2pa) {
        Utils.checkNotNull(c2pa, "c2pa");
        this.c2pa = Optional.ofNullable(c2pa);
        return this;
    }

    /**
     * Decides if the output video should include C2PA signature
     */
    public TranscodeFile withC2pa(Optional<? extends Boolean> c2pa) {
        Utils.checkNotNull(c2pa, "c2pa");
        this.c2pa = c2pa;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TranscodeFile other = (TranscodeFile) o;
        return 
            java.util.Objects.deepEquals(this.input, other.input) &&
            java.util.Objects.deepEquals(this.storage, other.storage) &&
            java.util.Objects.deepEquals(this.outputs, other.outputs) &&
            java.util.Objects.deepEquals(this.profiles, other.profiles) &&
            java.util.Objects.deepEquals(this.targetSegmentSizeSecs, other.targetSegmentSizeSecs) &&
            java.util.Objects.deepEquals(this.creatorId, other.creatorId) &&
            java.util.Objects.deepEquals(this.c2pa, other.c2pa);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            input,
            storage,
            outputs,
            profiles,
            targetSegmentSizeSecs,
            creatorId,
            c2pa);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TranscodeFile.class,
                "input", input,
                "storage", storage,
                "outputs", outputs,
                "profiles", profiles,
                "targetSegmentSizeSecs", targetSegmentSizeSecs,
                "creatorId", creatorId,
                "c2pa", c2pa);
    }
    
    public final static class Builder {
 
        private Optional<? extends TaskInput> input = Optional.empty();
 
        private Optional<? extends TaskStorage> storage = Optional.empty();
 
        private Optional<? extends TaskOutputs> outputs = Optional.empty();
 
        private Optional<? extends java.util.List<TranscodeProfile>> profiles = Optional.empty();
 
        private Optional<? extends Double> targetSegmentSizeSecs = Optional.empty();
 
        private Optional<? extends InputCreatorId> creatorId = Optional.empty();
 
        private Optional<? extends Boolean> c2pa = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Input video file to transcode
         */
        public Builder input(TaskInput input) {
            Utils.checkNotNull(input, "input");
            this.input = Optional.ofNullable(input);
            return this;
        }

        /**
         * Input video file to transcode
         */
        public Builder input(Optional<? extends TaskInput> input) {
            Utils.checkNotNull(input, "input");
            this.input = input;
            return this;
        }

        /**
         * Storage for the output files
         */
        public Builder storage(TaskStorage storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = Optional.ofNullable(storage);
            return this;
        }

        /**
         * Storage for the output files
         */
        public Builder storage(Optional<? extends TaskStorage> storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = storage;
            return this;
        }

        /**
         * Output formats
         */
        public Builder outputs(TaskOutputs outputs) {
            Utils.checkNotNull(outputs, "outputs");
            this.outputs = Optional.ofNullable(outputs);
            return this;
        }

        /**
         * Output formats
         */
        public Builder outputs(Optional<? extends TaskOutputs> outputs) {
            Utils.checkNotNull(outputs, "outputs");
            this.outputs = outputs;
            return this;
        }

        public Builder profiles(java.util.List<TranscodeProfile> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = Optional.ofNullable(profiles);
            return this;
        }

        public Builder profiles(Optional<? extends java.util.List<TranscodeProfile>> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = profiles;
            return this;
        }

        /**
         * How many seconds the duration of each output segment should
         * be
         * 
         */
        public Builder targetSegmentSizeSecs(double targetSegmentSizeSecs) {
            Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
            this.targetSegmentSizeSecs = Optional.ofNullable(targetSegmentSizeSecs);
            return this;
        }

        /**
         * How many seconds the duration of each output segment should
         * be
         * 
         */
        public Builder targetSegmentSizeSecs(Optional<? extends Double> targetSegmentSizeSecs) {
            Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
            this.targetSegmentSizeSecs = targetSegmentSizeSecs;
            return this;
        }

        public Builder creatorId(InputCreatorId creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = Optional.ofNullable(creatorId);
            return this;
        }

        public Builder creatorId(Optional<? extends InputCreatorId> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        /**
         * Decides if the output video should include C2PA signature
         */
        public Builder c2pa(boolean c2pa) {
            Utils.checkNotNull(c2pa, "c2pa");
            this.c2pa = Optional.ofNullable(c2pa);
            return this;
        }

        /**
         * Decides if the output video should include C2PA signature
         */
        public Builder c2pa(Optional<? extends Boolean> c2pa) {
            Utils.checkNotNull(c2pa, "c2pa");
            this.c2pa = c2pa;
            return this;
        }
        
        public TranscodeFile build() {
            return new TranscodeFile(
                input,
                storage,
                outputs,
                profiles,
                targetSegmentSizeSecs,
                creatorId,
                c2pa);
        }
    }
}

