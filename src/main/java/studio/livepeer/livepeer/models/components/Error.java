/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Error {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends List<String>> errors;

    @JsonCreator
    public Error(
            @JsonProperty("errors") Optional<? extends List<String>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
    }
    
    public Error() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> errors() {
        return (Optional<List<String>>) errors;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Error withErrors(List<String> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }

    public Error withErrors(Optional<? extends List<String>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error other = (Error) o;
        return 
            Objects.deepEquals(this.errors, other.errors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            errors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Error.class,
                "errors", errors);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> errors = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder errors(List<String> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public Builder errors(Optional<? extends List<String>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }
        
        public Error build() {
            return new Error(
                errors);
        }
    }
}

