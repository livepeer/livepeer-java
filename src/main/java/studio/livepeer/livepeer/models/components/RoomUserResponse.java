/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class RoomUserResponse {

    /**
     * The ID of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("joinUrl")
    private Optional<String> joinUrl;

    /**
     * Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    private Optional<String> token;

    @JsonCreator
    public RoomUserResponse(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("joinUrl") Optional<String> joinUrl,
            @JsonProperty("token") Optional<String> token) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(joinUrl, "joinUrl");
        Utils.checkNotNull(token, "token");
        this.id = id;
        this.joinUrl = joinUrl;
        this.token = token;
    }
    
    public RoomUserResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the user
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
     */
    @JsonIgnore
    public Optional<String> joinUrl() {
        return joinUrl;
    }

    /**
     * Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
     */
    @JsonIgnore
    public Optional<String> token() {
        return token;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the user
     */
    public RoomUserResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the user
     */
    public RoomUserResponse withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
     */
    public RoomUserResponse withJoinUrl(String joinUrl) {
        Utils.checkNotNull(joinUrl, "joinUrl");
        this.joinUrl = Optional.ofNullable(joinUrl);
        return this;
    }

    /**
     * Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
     */
    public RoomUserResponse withJoinUrl(Optional<String> joinUrl) {
        Utils.checkNotNull(joinUrl, "joinUrl");
        this.joinUrl = joinUrl;
        return this;
    }

    /**
     * Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
     */
    public RoomUserResponse withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = Optional.ofNullable(token);
        return this;
    }

    /**
     * Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
     */
    public RoomUserResponse withToken(Optional<String> token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RoomUserResponse other = (RoomUserResponse) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.joinUrl, other.joinUrl) &&
            Objects.deepEquals(this.token, other.token);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            joinUrl,
            token);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RoomUserResponse.class,
                "id", id,
                "joinUrl", joinUrl,
                "token", token);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> joinUrl = Optional.empty();
 
        private Optional<String> token = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the user
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the user
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
         */
        public Builder joinUrl(String joinUrl) {
            Utils.checkNotNull(joinUrl, "joinUrl");
            this.joinUrl = Optional.ofNullable(joinUrl);
            return this;
        }

        /**
         * Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
         */
        public Builder joinUrl(Optional<String> joinUrl) {
            Utils.checkNotNull(joinUrl, "joinUrl");
            this.joinUrl = joinUrl;
            return this;
        }

        /**
         * Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = Optional.ofNullable(token);
            return this;
        }

        /**
         * Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
         */
        public Builder token(Optional<String> token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }
        
        public RoomUserResponse build() {
            return new RoomUserResponse(
                id,
                joinUrl,
                token);
        }
    }
}

