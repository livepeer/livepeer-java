/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class AssetSource1 {

    @JsonProperty("type")
    private SourceType type;

    /**
     * URL from which the asset was uploaded.
     */
    @JsonProperty("url")
    private String url;

    /**
     * Gateway URL from asset if parsed from provided URL on upload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayUrl")
    private Optional<? extends String> gatewayUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption")
    private Optional<? extends EncryptionOutput> encryption;

    @JsonCreator
    public AssetSource1(
            @JsonProperty("type") SourceType type,
            @JsonProperty("url") String url,
            @JsonProperty("gatewayUrl") Optional<? extends String> gatewayUrl,
            @JsonProperty("encryption") Optional<? extends EncryptionOutput> encryption) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(gatewayUrl, "gatewayUrl");
        Utils.checkNotNull(encryption, "encryption");
        this.type = type;
        this.url = url;
        this.gatewayUrl = gatewayUrl;
        this.encryption = encryption;
    }
    
    public AssetSource1(
            SourceType type,
            String url) {
        this(type, url, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public SourceType type() {
        return type;
    }

    /**
     * URL from which the asset was uploaded.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * Gateway URL from asset if parsed from provided URL on upload.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gatewayUrl() {
        return (Optional<String>) gatewayUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EncryptionOutput> encryption() {
        return (Optional<EncryptionOutput>) encryption;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AssetSource1 withType(SourceType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * URL from which the asset was uploaded.
     */
    public AssetSource1 withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Gateway URL from asset if parsed from provided URL on upload.
     */
    public AssetSource1 withGatewayUrl(String gatewayUrl) {
        Utils.checkNotNull(gatewayUrl, "gatewayUrl");
        this.gatewayUrl = Optional.ofNullable(gatewayUrl);
        return this;
    }

    /**
     * Gateway URL from asset if parsed from provided URL on upload.
     */
    public AssetSource1 withGatewayUrl(Optional<? extends String> gatewayUrl) {
        Utils.checkNotNull(gatewayUrl, "gatewayUrl");
        this.gatewayUrl = gatewayUrl;
        return this;
    }

    public AssetSource1 withEncryption(EncryptionOutput encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = Optional.ofNullable(encryption);
        return this;
    }

    public AssetSource1 withEncryption(Optional<? extends EncryptionOutput> encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = encryption;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssetSource1 other = (AssetSource1) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.gatewayUrl, other.gatewayUrl) &&
            java.util.Objects.deepEquals(this.encryption, other.encryption);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            url,
            gatewayUrl,
            encryption);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AssetSource1.class,
                "type", type,
                "url", url,
                "gatewayUrl", gatewayUrl,
                "encryption", encryption);
    }
    
    public final static class Builder {
 
        private SourceType type;
 
        private String url;
 
        private Optional<? extends String> gatewayUrl = Optional.empty();
 
        private Optional<? extends EncryptionOutput> encryption = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(SourceType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * URL from which the asset was uploaded.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Gateway URL from asset if parsed from provided URL on upload.
         */
        public Builder gatewayUrl(String gatewayUrl) {
            Utils.checkNotNull(gatewayUrl, "gatewayUrl");
            this.gatewayUrl = Optional.ofNullable(gatewayUrl);
            return this;
        }

        /**
         * Gateway URL from asset if parsed from provided URL on upload.
         */
        public Builder gatewayUrl(Optional<? extends String> gatewayUrl) {
            Utils.checkNotNull(gatewayUrl, "gatewayUrl");
            this.gatewayUrl = gatewayUrl;
            return this;
        }

        public Builder encryption(EncryptionOutput encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = Optional.ofNullable(encryption);
            return this;
        }

        public Builder encryption(Optional<? extends EncryptionOutput> encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = encryption;
            return this;
        }
        
        public AssetSource1 build() {
            return new AssetSource1(
                type,
                url,
                gatewayUrl,
                encryption);
        }
    }
}

