/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;
import studio.livepeer.livepeer.utils.Utils;


public class NewAssetPayloadIpfs1 {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec")
    private JsonNullable<? extends Spec> spec;

    @JsonCreator
    public NewAssetPayloadIpfs1(
            @JsonProperty("spec") JsonNullable<? extends Spec> spec) {
        Utils.checkNotNull(spec, "spec");
        this.spec = spec;
    }
    
    public NewAssetPayloadIpfs1() {
        this(JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Spec> spec() {
        return (JsonNullable<Spec>) spec;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NewAssetPayloadIpfs1 withSpec(Spec spec) {
        Utils.checkNotNull(spec, "spec");
        this.spec = JsonNullable.of(spec);
        return this;
    }

    public NewAssetPayloadIpfs1 withSpec(JsonNullable<? extends Spec> spec) {
        Utils.checkNotNull(spec, "spec");
        this.spec = spec;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewAssetPayloadIpfs1 other = (NewAssetPayloadIpfs1) o;
        return 
            Objects.deepEquals(this.spec, other.spec);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            spec);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NewAssetPayloadIpfs1.class,
                "spec", spec);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Spec> spec = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder spec(Spec spec) {
            Utils.checkNotNull(spec, "spec");
            this.spec = JsonNullable.of(spec);
            return this;
        }

        public Builder spec(JsonNullable<? extends Spec> spec) {
            Utils.checkNotNull(spec, "spec");
            this.spec = spec;
            return this;
        }
        
        public NewAssetPayloadIpfs1 build() {
            return new NewAssetPayloadIpfs1(
                spec);
        }
    }
}

