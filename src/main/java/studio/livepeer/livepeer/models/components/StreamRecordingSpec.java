/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * StreamRecordingSpec - Configuration for recording the stream. This can only be set if
 * `record` is true.
 * 
 */

public class StreamRecordingSpec {

    /**
     * Profiles to process the recording of this stream into. If not
     * specified, default profiles will be derived based on the stream
     * input. Keep in mind that the source rendition is always kept.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profiles")
    private Optional<? extends List<TranscodeProfile>> profiles;

    @JsonCreator
    public StreamRecordingSpec(
            @JsonProperty("profiles") Optional<? extends List<TranscodeProfile>> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = profiles;
    }
    
    public StreamRecordingSpec() {
        this(Optional.empty());
    }

    /**
     * Profiles to process the recording of this stream into. If not
     * specified, default profiles will be derived based on the stream
     * input. Keep in mind that the source rendition is always kept.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TranscodeProfile>> profiles() {
        return (Optional<List<TranscodeProfile>>) profiles;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Profiles to process the recording of this stream into. If not
     * specified, default profiles will be derived based on the stream
     * input. Keep in mind that the source rendition is always kept.
     * 
     */
    public StreamRecordingSpec withProfiles(List<TranscodeProfile> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = Optional.ofNullable(profiles);
        return this;
    }

    /**
     * Profiles to process the recording of this stream into. If not
     * specified, default profiles will be derived based on the stream
     * input. Keep in mind that the source rendition is always kept.
     * 
     */
    public StreamRecordingSpec withProfiles(Optional<? extends List<TranscodeProfile>> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = profiles;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamRecordingSpec other = (StreamRecordingSpec) o;
        return 
            Objects.deepEquals(this.profiles, other.profiles);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            profiles);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreamRecordingSpec.class,
                "profiles", profiles);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<TranscodeProfile>> profiles = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Profiles to process the recording of this stream into. If not
         * specified, default profiles will be derived based on the stream
         * input. Keep in mind that the source rendition is always kept.
         * 
         */
        public Builder profiles(List<TranscodeProfile> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = Optional.ofNullable(profiles);
            return this;
        }

        /**
         * Profiles to process the recording of this stream into. If not
         * specified, default profiles will be derived based on the stream
         * input. Keep in mind that the source rendition is always kept.
         * 
         */
        public Builder profiles(Optional<? extends List<TranscodeProfile>> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = profiles;
            return this;
        }
        
        public StreamRecordingSpec build() {
            return new StreamRecordingSpec(
                profiles);
        }
    }
}

