/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.LazySingletonValue;
import studio.livepeer.livepeer.utils.Utils;

public class GetRoomUserResponse {

    /**
     * The ID of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Timestamp (in milliseconds) at which the user joined
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("joinedAt")
    private Optional<? extends Long> joinedAt;

    /**
     * The display name of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPublisher")
    private Optional<? extends Boolean> isPublisher;

    /**
     * User defined payload to store for the participant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    @JsonCreator
    public GetRoomUserResponse(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("joinedAt") Optional<? extends Long> joinedAt,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("isPublisher") Optional<? extends Boolean> isPublisher,
            @JsonProperty("metadata") Optional<? extends String> metadata) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(joinedAt, "joinedAt");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(isPublisher, "isPublisher");
        Utils.checkNotNull(metadata, "metadata");
        this.id = id;
        this.joinedAt = joinedAt;
        this.name = name;
        this.isPublisher = isPublisher;
        this.metadata = metadata;
    }
    
    public GetRoomUserResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the user
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    /**
     * Timestamp (in milliseconds) at which the user joined
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> joinedAt() {
        return (Optional<Long>) joinedAt;
    }

    /**
     * The display name of the user
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> isPublisher() {
        return (Optional<Boolean>) isPublisher;
    }

    /**
     * User defined payload to store for the participant
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> metadata() {
        return (Optional<String>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the user
     */
    public GetRoomUserResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the user
     */
    public GetRoomUserResponse withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the user joined
     */
    public GetRoomUserResponse withJoinedAt(long joinedAt) {
        Utils.checkNotNull(joinedAt, "joinedAt");
        this.joinedAt = Optional.ofNullable(joinedAt);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the user joined
     */
    public GetRoomUserResponse withJoinedAt(Optional<? extends Long> joinedAt) {
        Utils.checkNotNull(joinedAt, "joinedAt");
        this.joinedAt = joinedAt;
        return this;
    }

    /**
     * The display name of the user
     */
    public GetRoomUserResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The display name of the user
     */
    public GetRoomUserResponse withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    public GetRoomUserResponse withIsPublisher(boolean isPublisher) {
        Utils.checkNotNull(isPublisher, "isPublisher");
        this.isPublisher = Optional.ofNullable(isPublisher);
        return this;
    }

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    public GetRoomUserResponse withIsPublisher(Optional<? extends Boolean> isPublisher) {
        Utils.checkNotNull(isPublisher, "isPublisher");
        this.isPublisher = isPublisher;
        return this;
    }

    /**
     * User defined payload to store for the participant
     */
    public GetRoomUserResponse withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * User defined payload to store for the participant
     */
    public GetRoomUserResponse withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRoomUserResponse other = (GetRoomUserResponse) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.joinedAt, other.joinedAt) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.isPublisher, other.isPublisher) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            joinedAt,
            name,
            isPublisher,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRoomUserResponse.class,
                "id", id,
                "joinedAt", joinedAt,
                "name", name,
                "isPublisher", isPublisher,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Long> joinedAt = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Boolean> isPublisher;
 
        private Optional<? extends String> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the user
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the user
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the user joined
         */
        public Builder joinedAt(long joinedAt) {
            Utils.checkNotNull(joinedAt, "joinedAt");
            this.joinedAt = Optional.ofNullable(joinedAt);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the user joined
         */
        public Builder joinedAt(Optional<? extends Long> joinedAt) {
            Utils.checkNotNull(joinedAt, "joinedAt");
            this.joinedAt = joinedAt;
            return this;
        }

        /**
         * The display name of the user
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The display name of the user
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Whether a user is allowed to publish audio/video tracks
         */
        public Builder isPublisher(boolean isPublisher) {
            Utils.checkNotNull(isPublisher, "isPublisher");
            this.isPublisher = Optional.ofNullable(isPublisher);
            return this;
        }

        /**
         * Whether a user is allowed to publish audio/video tracks
         */
        public Builder isPublisher(Optional<? extends Boolean> isPublisher) {
            Utils.checkNotNull(isPublisher, "isPublisher");
            this.isPublisher = isPublisher;
            return this;
        }

        /**
         * User defined payload to store for the participant
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * User defined payload to store for the participant
         */
        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public GetRoomUserResponse build() {
            if (isPublisher == null) {
                isPublisher = _SINGLETON_VALUE_IsPublisher.value();
            }
            return new GetRoomUserResponse(
                id,
                joinedAt,
                name,
                isPublisher,
                metadata);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_IsPublisher =
                new LazySingletonValue<>(
                        "isPublisher",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

