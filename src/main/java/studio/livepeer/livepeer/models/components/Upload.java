/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * Upload - Parameters for the upload task
 */

public class Upload {

    /**
     * URL of the asset to "upload"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption")
    private Optional<? extends EncryptionOutput> encryption;

    /**
     * Decides if the output video should include C2PA signature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("c2pa")
    private Optional<Boolean> c2pa;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profiles")
    private Optional<? extends List<TranscodeProfile>> profiles;

    /**
     * How many seconds the duration of each output segment should be
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetSegmentSizeSecs")
    private Optional<Double> targetSegmentSizeSecs;

    @JsonCreator
    public Upload(
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("encryption") Optional<? extends EncryptionOutput> encryption,
            @JsonProperty("c2pa") Optional<Boolean> c2pa,
            @JsonProperty("profiles") Optional<? extends List<TranscodeProfile>> profiles,
            @JsonProperty("targetSegmentSizeSecs") Optional<Double> targetSegmentSizeSecs) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(encryption, "encryption");
        Utils.checkNotNull(c2pa, "c2pa");
        Utils.checkNotNull(profiles, "profiles");
        Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
        this.url = url;
        this.encryption = encryption;
        this.c2pa = c2pa;
        this.profiles = profiles;
        this.targetSegmentSizeSecs = targetSegmentSizeSecs;
    }
    
    public Upload() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * URL of the asset to "upload"
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EncryptionOutput> encryption() {
        return (Optional<EncryptionOutput>) encryption;
    }

    /**
     * Decides if the output video should include C2PA signature
     */
    @JsonIgnore
    public Optional<Boolean> c2pa() {
        return c2pa;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TranscodeProfile>> profiles() {
        return (Optional<List<TranscodeProfile>>) profiles;
    }

    /**
     * How many seconds the duration of each output segment should be
     */
    @JsonIgnore
    public Optional<Double> targetSegmentSizeSecs() {
        return targetSegmentSizeSecs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * URL of the asset to "upload"
     */
    public Upload withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * URL of the asset to "upload"
     */
    public Upload withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public Upload withEncryption(EncryptionOutput encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = Optional.ofNullable(encryption);
        return this;
    }

    public Upload withEncryption(Optional<? extends EncryptionOutput> encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = encryption;
        return this;
    }

    /**
     * Decides if the output video should include C2PA signature
     */
    public Upload withC2pa(boolean c2pa) {
        Utils.checkNotNull(c2pa, "c2pa");
        this.c2pa = Optional.ofNullable(c2pa);
        return this;
    }

    /**
     * Decides if the output video should include C2PA signature
     */
    public Upload withC2pa(Optional<Boolean> c2pa) {
        Utils.checkNotNull(c2pa, "c2pa");
        this.c2pa = c2pa;
        return this;
    }

    public Upload withProfiles(List<TranscodeProfile> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = Optional.ofNullable(profiles);
        return this;
    }

    public Upload withProfiles(Optional<? extends List<TranscodeProfile>> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = profiles;
        return this;
    }

    /**
     * How many seconds the duration of each output segment should be
     */
    public Upload withTargetSegmentSizeSecs(double targetSegmentSizeSecs) {
        Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
        this.targetSegmentSizeSecs = Optional.ofNullable(targetSegmentSizeSecs);
        return this;
    }

    /**
     * How many seconds the duration of each output segment should be
     */
    public Upload withTargetSegmentSizeSecs(Optional<Double> targetSegmentSizeSecs) {
        Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
        this.targetSegmentSizeSecs = targetSegmentSizeSecs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Upload other = (Upload) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.encryption, other.encryption) &&
            Objects.deepEquals(this.c2pa, other.c2pa) &&
            Objects.deepEquals(this.profiles, other.profiles) &&
            Objects.deepEquals(this.targetSegmentSizeSecs, other.targetSegmentSizeSecs);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            encryption,
            c2pa,
            profiles,
            targetSegmentSizeSecs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Upload.class,
                "url", url,
                "encryption", encryption,
                "c2pa", c2pa,
                "profiles", profiles,
                "targetSegmentSizeSecs", targetSegmentSizeSecs);
    }
    
    public final static class Builder {
 
        private Optional<String> url = Optional.empty();
 
        private Optional<? extends EncryptionOutput> encryption = Optional.empty();
 
        private Optional<Boolean> c2pa = Optional.empty();
 
        private Optional<? extends List<TranscodeProfile>> profiles = Optional.empty();
 
        private Optional<Double> targetSegmentSizeSecs = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL of the asset to "upload"
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * URL of the asset to "upload"
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder encryption(EncryptionOutput encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = Optional.ofNullable(encryption);
            return this;
        }

        public Builder encryption(Optional<? extends EncryptionOutput> encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = encryption;
            return this;
        }

        /**
         * Decides if the output video should include C2PA signature
         */
        public Builder c2pa(boolean c2pa) {
            Utils.checkNotNull(c2pa, "c2pa");
            this.c2pa = Optional.ofNullable(c2pa);
            return this;
        }

        /**
         * Decides if the output video should include C2PA signature
         */
        public Builder c2pa(Optional<Boolean> c2pa) {
            Utils.checkNotNull(c2pa, "c2pa");
            this.c2pa = c2pa;
            return this;
        }

        public Builder profiles(List<TranscodeProfile> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = Optional.ofNullable(profiles);
            return this;
        }

        public Builder profiles(Optional<? extends List<TranscodeProfile>> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = profiles;
            return this;
        }

        /**
         * How many seconds the duration of each output segment should be
         */
        public Builder targetSegmentSizeSecs(double targetSegmentSizeSecs) {
            Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
            this.targetSegmentSizeSecs = Optional.ofNullable(targetSegmentSizeSecs);
            return this;
        }

        /**
         * How many seconds the duration of each output segment should be
         */
        public Builder targetSegmentSizeSecs(Optional<Double> targetSegmentSizeSecs) {
            Utils.checkNotNull(targetSegmentSizeSecs, "targetSegmentSizeSecs");
            this.targetSegmentSizeSecs = targetSegmentSizeSecs;
            return this;
        }
        
        public Upload build() {
            return new Upload(
                url,
                encryption,
                c2pa,
                profiles,
                targetSegmentSizeSecs);
        }
    }
}

