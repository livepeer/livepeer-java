/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class PlaybackInfoSource {

    /**
     * Human Readable Name
     */
    @JsonProperty("hrn")
    private Hrn hrn;

    @JsonProperty("type")
    private PlaybackInfoMetaType type;

    @JsonProperty("url")
    private String url;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Double> size;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<? extends Double> width;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<? extends Double> height;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrate")
    private Optional<? extends Double> bitrate;

    @JsonCreator
    public PlaybackInfoSource(
            @JsonProperty("hrn") Hrn hrn,
            @JsonProperty("type") PlaybackInfoMetaType type,
            @JsonProperty("url") String url,
            @JsonProperty("size") Optional<? extends Double> size,
            @JsonProperty("width") Optional<? extends Double> width,
            @JsonProperty("height") Optional<? extends Double> height,
            @JsonProperty("bitrate") Optional<? extends Double> bitrate) {
        Utils.checkNotNull(hrn, "hrn");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(bitrate, "bitrate");
        this.hrn = hrn;
        this.type = type;
        this.url = url;
        this.size = size;
        this.width = width;
        this.height = height;
        this.bitrate = bitrate;
    }
    
    public PlaybackInfoSource(
            Hrn hrn,
            PlaybackInfoMetaType type,
            String url) {
        this(hrn, type, url, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Human Readable Name
     */
    @JsonIgnore
    public Hrn hrn() {
        return hrn;
    }

    @JsonIgnore
    public PlaybackInfoMetaType type() {
        return type;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> size() {
        return (Optional<Double>) size;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> width() {
        return (Optional<Double>) width;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> height() {
        return (Optional<Double>) height;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> bitrate() {
        return (Optional<Double>) bitrate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Human Readable Name
     */
    public PlaybackInfoSource withHrn(Hrn hrn) {
        Utils.checkNotNull(hrn, "hrn");
        this.hrn = hrn;
        return this;
    }

    public PlaybackInfoSource withType(PlaybackInfoMetaType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public PlaybackInfoSource withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public PlaybackInfoSource withSize(double size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    public PlaybackInfoSource withSize(Optional<? extends Double> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public PlaybackInfoSource withWidth(double width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    public PlaybackInfoSource withWidth(Optional<? extends Double> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    public PlaybackInfoSource withHeight(double height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    public PlaybackInfoSource withHeight(Optional<? extends Double> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    public PlaybackInfoSource withBitrate(double bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = Optional.ofNullable(bitrate);
        return this;
    }

    public PlaybackInfoSource withBitrate(Optional<? extends Double> bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = bitrate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlaybackInfoSource other = (PlaybackInfoSource) o;
        return 
            java.util.Objects.deepEquals(this.hrn, other.hrn) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.width, other.width) &&
            java.util.Objects.deepEquals(this.height, other.height) &&
            java.util.Objects.deepEquals(this.bitrate, other.bitrate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            hrn,
            type,
            url,
            size,
            width,
            height,
            bitrate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PlaybackInfoSource.class,
                "hrn", hrn,
                "type", type,
                "url", url,
                "size", size,
                "width", width,
                "height", height,
                "bitrate", bitrate);
    }
    
    public final static class Builder {
 
        private Hrn hrn;
 
        private PlaybackInfoMetaType type;
 
        private String url;
 
        private Optional<? extends Double> size = Optional.empty();
 
        private Optional<? extends Double> width = Optional.empty();
 
        private Optional<? extends Double> height = Optional.empty();
 
        private Optional<? extends Double> bitrate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Human Readable Name
         */
        public Builder hrn(Hrn hrn) {
            Utils.checkNotNull(hrn, "hrn");
            this.hrn = hrn;
            return this;
        }

        public Builder type(PlaybackInfoMetaType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder size(double size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<? extends Double> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder width(double width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        public Builder width(Optional<? extends Double> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        public Builder height(double height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        public Builder height(Optional<? extends Double> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        public Builder bitrate(double bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = Optional.ofNullable(bitrate);
            return this;
        }

        public Builder bitrate(Optional<? extends Double> bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = bitrate;
            return this;
        }
        
        public PlaybackInfoSource build() {
            return new PlaybackInfoSource(
                hrn,
                type,
                url,
                size,
                width,
                height,
                bitrate);
        }
    }
}

