/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import studio.livepeer.livepeer.utils.Utils;

/**
 * StorageCredentials - Credentials for the output video storage
 */

public class StorageCredentials {

    /**
     * Access Key ID
     */
    @JsonProperty("accessKeyId")
    private String accessKeyId;

    /**
     * Secret Access Key
     */
    @JsonProperty("secretAccessKey")
    private String secretAccessKey;

    @JsonCreator
    public StorageCredentials(
            @JsonProperty("accessKeyId") String accessKeyId,
            @JsonProperty("secretAccessKey") String secretAccessKey) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.accessKeyId = accessKeyId;
        this.secretAccessKey = secretAccessKey;
    }

    /**
     * Access Key ID
     */
    @JsonIgnore
    public String accessKeyId() {
        return accessKeyId;
    }

    /**
     * Secret Access Key
     */
    @JsonIgnore
    public String secretAccessKey() {
        return secretAccessKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Access Key ID
     */
    public StorageCredentials withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * Secret Access Key
     */
    public StorageCredentials withSecretAccessKey(String secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = secretAccessKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StorageCredentials other = (StorageCredentials) o;
        return 
            java.util.Objects.deepEquals(this.accessKeyId, other.accessKeyId) &&
            java.util.Objects.deepEquals(this.secretAccessKey, other.secretAccessKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKeyId,
            secretAccessKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StorageCredentials.class,
                "accessKeyId", accessKeyId,
                "secretAccessKey", secretAccessKey);
    }
    
    public final static class Builder {
 
        private String accessKeyId;
 
        private String secretAccessKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Access Key ID
         */
        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * Secret Access Key
         */
        public Builder secretAccessKey(String secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        
        public StorageCredentials build() {
            return new StorageCredentials(
                accessKeyId,
                secretAccessKey);
        }
    }
}

