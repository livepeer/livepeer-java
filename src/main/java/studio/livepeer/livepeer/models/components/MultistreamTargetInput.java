/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

public class MultistreamTargetInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    @JsonProperty("url")
    private String url;

    /**
     * If true then this multistream target will not be used for pushing
     * even if it is configured in a stream object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    private Optional<? extends Boolean> disabled;

    @JsonCreator
    public MultistreamTargetInput(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("url") String url,
            @JsonProperty("disabled") Optional<? extends Boolean> disabled) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(disabled, "disabled");
        this.name = name;
        this.url = url;
        this.disabled = disabled;
    }
    
    public MultistreamTargetInput(
            String url) {
        this(Optional.empty(), url, Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * If true then this multistream target will not be used for pushing
     * even if it is configured in a stream object.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> disabled() {
        return (Optional<Boolean>) disabled;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MultistreamTargetInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public MultistreamTargetInput withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    public MultistreamTargetInput withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * If true then this multistream target will not be used for pushing
     * even if it is configured in a stream object.
     * 
     */
    public MultistreamTargetInput withDisabled(boolean disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = Optional.ofNullable(disabled);
        return this;
    }

    /**
     * If true then this multistream target will not be used for pushing
     * even if it is configured in a stream object.
     * 
     */
    public MultistreamTargetInput withDisabled(Optional<? extends Boolean> disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = disabled;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultistreamTargetInput other = (MultistreamTargetInput) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.disabled, other.disabled);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            url,
            disabled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MultistreamTargetInput.class,
                "name", name,
                "url", url,
                "disabled", disabled);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private String url;
 
        private Optional<? extends Boolean> disabled = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * If true then this multistream target will not be used for pushing
         * even if it is configured in a stream object.
         * 
         */
        public Builder disabled(boolean disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = Optional.ofNullable(disabled);
            return this;
        }

        /**
         * If true then this multistream target will not be used for pushing
         * even if it is configured in a stream object.
         * 
         */
        public Builder disabled(Optional<? extends Boolean> disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = disabled;
            return this;
        }
        
        public MultistreamTargetInput build() {
            return new MultistreamTargetInput(
                name,
                url,
                disabled);
        }
    }
}

