/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class RoomUserPayload {

    /**
     * Display name
     */
    @JsonProperty("name")
    private String name;

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canPublish")
    private Optional<Boolean> canPublish;

    /**
     * Whether a user is allowed to publish data messages to the room
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canPublishData")
    private Optional<Boolean> canPublishData;

    /**
     * User defined payload to store for the participant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    @JsonCreator
    public RoomUserPayload(
            @JsonProperty("name") String name,
            @JsonProperty("canPublish") Optional<Boolean> canPublish,
            @JsonProperty("canPublishData") Optional<Boolean> canPublishData,
            @JsonProperty("metadata") Optional<String> metadata) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(canPublish, "canPublish");
        Utils.checkNotNull(canPublishData, "canPublishData");
        Utils.checkNotNull(metadata, "metadata");
        this.name = name;
        this.canPublish = canPublish;
        this.canPublishData = canPublishData;
        this.metadata = metadata;
    }
    
    public RoomUserPayload(
            String name) {
        this(name, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Display name
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    @JsonIgnore
    public Optional<Boolean> canPublish() {
        return canPublish;
    }

    /**
     * Whether a user is allowed to publish data messages to the room
     */
    @JsonIgnore
    public Optional<Boolean> canPublishData() {
        return canPublishData;
    }

    /**
     * User defined payload to store for the participant
     */
    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Display name
     */
    public RoomUserPayload withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    public RoomUserPayload withCanPublish(boolean canPublish) {
        Utils.checkNotNull(canPublish, "canPublish");
        this.canPublish = Optional.ofNullable(canPublish);
        return this;
    }

    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    public RoomUserPayload withCanPublish(Optional<Boolean> canPublish) {
        Utils.checkNotNull(canPublish, "canPublish");
        this.canPublish = canPublish;
        return this;
    }

    /**
     * Whether a user is allowed to publish data messages to the room
     */
    public RoomUserPayload withCanPublishData(boolean canPublishData) {
        Utils.checkNotNull(canPublishData, "canPublishData");
        this.canPublishData = Optional.ofNullable(canPublishData);
        return this;
    }

    /**
     * Whether a user is allowed to publish data messages to the room
     */
    public RoomUserPayload withCanPublishData(Optional<Boolean> canPublishData) {
        Utils.checkNotNull(canPublishData, "canPublishData");
        this.canPublishData = canPublishData;
        return this;
    }

    /**
     * User defined payload to store for the participant
     */
    public RoomUserPayload withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * User defined payload to store for the participant
     */
    public RoomUserPayload withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RoomUserPayload other = (RoomUserPayload) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.canPublish, other.canPublish) &&
            Objects.deepEquals(this.canPublishData, other.canPublishData) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            canPublish,
            canPublishData,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RoomUserPayload.class,
                "name", name,
                "canPublish", canPublish,
                "canPublishData", canPublishData,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<Boolean> canPublish = Optional.empty();
 
        private Optional<Boolean> canPublishData = Optional.empty();
 
        private Optional<String> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Display name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Whether a user is allowed to publish audio/video tracks
         */
        public Builder canPublish(boolean canPublish) {
            Utils.checkNotNull(canPublish, "canPublish");
            this.canPublish = Optional.ofNullable(canPublish);
            return this;
        }

        /**
         * Whether a user is allowed to publish audio/video tracks
         */
        public Builder canPublish(Optional<Boolean> canPublish) {
            Utils.checkNotNull(canPublish, "canPublish");
            this.canPublish = canPublish;
            return this;
        }

        /**
         * Whether a user is allowed to publish data messages to the room
         */
        public Builder canPublishData(boolean canPublishData) {
            Utils.checkNotNull(canPublishData, "canPublishData");
            this.canPublishData = Optional.ofNullable(canPublishData);
            return this;
        }

        /**
         * Whether a user is allowed to publish data messages to the room
         */
        public Builder canPublishData(Optional<Boolean> canPublishData) {
            Utils.checkNotNull(canPublishData, "canPublishData");
            this.canPublishData = canPublishData;
            return this;
        }

        /**
         * User defined payload to store for the participant
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * User defined payload to store for the participant
         */
        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public RoomUserPayload build() {
            return new RoomUserPayload(
                name,
                canPublish,
                canPublishData,
                metadata);
        }
    }
}

