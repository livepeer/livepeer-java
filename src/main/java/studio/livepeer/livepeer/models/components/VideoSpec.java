/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * VideoSpec - Video metadata
 */

public class VideoSpec {

    /**
     * Format of the asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    private Optional<? extends String> format;

    /**
     * Duration of the asset in seconds (float)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Double> duration;

    /**
     * Bitrate of the video in bits per second
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrate")
    private Optional<? extends Double> bitrate;

    /**
     * List of tracks associated with the asset when the format
     * contemplates them (e.g. mp4)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracks")
    private Optional<? extends java.util.List<Tracks>> tracks;

    @JsonCreator
    public VideoSpec(
            @JsonProperty("format") Optional<? extends String> format,
            @JsonProperty("duration") Optional<? extends Double> duration,
            @JsonProperty("bitrate") Optional<? extends Double> bitrate,
            @JsonProperty("tracks") Optional<? extends java.util.List<Tracks>> tracks) {
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(bitrate, "bitrate");
        Utils.checkNotNull(tracks, "tracks");
        this.format = format;
        this.duration = duration;
        this.bitrate = bitrate;
        this.tracks = tracks;
    }
    
    public VideoSpec() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Format of the asset
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> format() {
        return (Optional<String>) format;
    }

    /**
     * Duration of the asset in seconds (float)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> duration() {
        return (Optional<Double>) duration;
    }

    /**
     * Bitrate of the video in bits per second
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> bitrate() {
        return (Optional<Double>) bitrate;
    }

    /**
     * List of tracks associated with the asset when the format
     * contemplates them (e.g. mp4)
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Tracks>> tracks() {
        return (Optional<java.util.List<Tracks>>) tracks;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Format of the asset
     */
    public VideoSpec withFormat(String format) {
        Utils.checkNotNull(format, "format");
        this.format = Optional.ofNullable(format);
        return this;
    }

    /**
     * Format of the asset
     */
    public VideoSpec withFormat(Optional<? extends String> format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    /**
     * Duration of the asset in seconds (float)
     */
    public VideoSpec withDuration(double duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    /**
     * Duration of the asset in seconds (float)
     */
    public VideoSpec withDuration(Optional<? extends Double> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * Bitrate of the video in bits per second
     */
    public VideoSpec withBitrate(double bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = Optional.ofNullable(bitrate);
        return this;
    }

    /**
     * Bitrate of the video in bits per second
     */
    public VideoSpec withBitrate(Optional<? extends Double> bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = bitrate;
        return this;
    }

    /**
     * List of tracks associated with the asset when the format
     * contemplates them (e.g. mp4)
     * 
     */
    public VideoSpec withTracks(java.util.List<Tracks> tracks) {
        Utils.checkNotNull(tracks, "tracks");
        this.tracks = Optional.ofNullable(tracks);
        return this;
    }

    /**
     * List of tracks associated with the asset when the format
     * contemplates them (e.g. mp4)
     * 
     */
    public VideoSpec withTracks(Optional<? extends java.util.List<Tracks>> tracks) {
        Utils.checkNotNull(tracks, "tracks");
        this.tracks = tracks;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VideoSpec other = (VideoSpec) o;
        return 
            java.util.Objects.deepEquals(this.format, other.format) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.bitrate, other.bitrate) &&
            java.util.Objects.deepEquals(this.tracks, other.tracks);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            format,
            duration,
            bitrate,
            tracks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VideoSpec.class,
                "format", format,
                "duration", duration,
                "bitrate", bitrate,
                "tracks", tracks);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> format = Optional.empty();
 
        private Optional<? extends Double> duration = Optional.empty();
 
        private Optional<? extends Double> bitrate = Optional.empty();
 
        private Optional<? extends java.util.List<Tracks>> tracks = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Format of the asset
         */
        public Builder format(String format) {
            Utils.checkNotNull(format, "format");
            this.format = Optional.ofNullable(format);
            return this;
        }

        /**
         * Format of the asset
         */
        public Builder format(Optional<? extends String> format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        /**
         * Duration of the asset in seconds (float)
         */
        public Builder duration(double duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        /**
         * Duration of the asset in seconds (float)
         */
        public Builder duration(Optional<? extends Double> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * Bitrate of the video in bits per second
         */
        public Builder bitrate(double bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = Optional.ofNullable(bitrate);
            return this;
        }

        /**
         * Bitrate of the video in bits per second
         */
        public Builder bitrate(Optional<? extends Double> bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = bitrate;
            return this;
        }

        /**
         * List of tracks associated with the asset when the format
         * contemplates them (e.g. mp4)
         * 
         */
        public Builder tracks(java.util.List<Tracks> tracks) {
            Utils.checkNotNull(tracks, "tracks");
            this.tracks = Optional.ofNullable(tracks);
            return this;
        }

        /**
         * List of tracks associated with the asset when the format
         * contemplates them (e.g. mp4)
         * 
         */
        public Builder tracks(Optional<? extends java.util.List<Tracks>> tracks) {
            Utils.checkNotNull(tracks, "tracks");
            this.tracks = tracks;
            return this;
        }
        
        public VideoSpec build() {
            return new VideoSpec(
                format,
                duration,
                bitrate,
                tracks);
        }
    }
}

