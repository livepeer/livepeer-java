/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class SigningKey {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Name of the signing key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    @Deprecated
    private Optional<String> userId;

    /**
     * Timestamp (in milliseconds) at which the signing-key was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Double> createdAt;

    /**
     * Timestamp (in milliseconds) at which the signing-key was last used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastSeen")
    private Optional<Double> lastSeen;

    @JsonProperty("publicKey")
    private String publicKey;

    /**
     * Disable the signing key to allow rotation safely
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    private Optional<Boolean> disabled;

    /**
     * The ID of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectId")
    private Optional<String> projectId;

    @JsonCreator
    public SigningKey(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("userId") Optional<String> userId,
            @JsonProperty("createdAt") Optional<Double> createdAt,
            @JsonProperty("lastSeen") Optional<Double> lastSeen,
            @JsonProperty("publicKey") String publicKey,
            @JsonProperty("disabled") Optional<Boolean> disabled,
            @JsonProperty("projectId") Optional<String> projectId) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(lastSeen, "lastSeen");
        Utils.checkNotNull(publicKey, "publicKey");
        Utils.checkNotNull(disabled, "disabled");
        Utils.checkNotNull(projectId, "projectId");
        this.id = id;
        this.name = name;
        this.userId = userId;
        this.createdAt = createdAt;
        this.lastSeen = lastSeen;
        this.publicKey = publicKey;
        this.disabled = disabled;
        this.projectId = projectId;
    }
    
    public SigningKey(
            String publicKey) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), publicKey, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Name of the signing key
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    /**
     * Timestamp (in milliseconds) at which the signing-key was created
     */
    @JsonIgnore
    public Optional<Double> createdAt() {
        return createdAt;
    }

    /**
     * Timestamp (in milliseconds) at which the signing-key was last used
     */
    @JsonIgnore
    public Optional<Double> lastSeen() {
        return lastSeen;
    }

    @JsonIgnore
    public String publicKey() {
        return publicKey;
    }

    /**
     * Disable the signing key to allow rotation safely
     */
    @JsonIgnore
    public Optional<Boolean> disabled() {
        return disabled;
    }

    /**
     * The ID of the project
     */
    @JsonIgnore
    public Optional<String> projectId() {
        return projectId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SigningKey withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public SigningKey withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the signing key
     */
    public SigningKey withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the signing key
     */
    public SigningKey withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SigningKey withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SigningKey withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the signing-key was created
     */
    public SigningKey withCreatedAt(double createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the signing-key was created
     */
    public SigningKey withCreatedAt(Optional<Double> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the signing-key was last used
     */
    public SigningKey withLastSeen(double lastSeen) {
        Utils.checkNotNull(lastSeen, "lastSeen");
        this.lastSeen = Optional.ofNullable(lastSeen);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the signing-key was last used
     */
    public SigningKey withLastSeen(Optional<Double> lastSeen) {
        Utils.checkNotNull(lastSeen, "lastSeen");
        this.lastSeen = lastSeen;
        return this;
    }

    public SigningKey withPublicKey(String publicKey) {
        Utils.checkNotNull(publicKey, "publicKey");
        this.publicKey = publicKey;
        return this;
    }

    /**
     * Disable the signing key to allow rotation safely
     */
    public SigningKey withDisabled(boolean disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = Optional.ofNullable(disabled);
        return this;
    }

    /**
     * Disable the signing key to allow rotation safely
     */
    public SigningKey withDisabled(Optional<Boolean> disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = disabled;
        return this;
    }

    /**
     * The ID of the project
     */
    public SigningKey withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = Optional.ofNullable(projectId);
        return this;
    }

    /**
     * The ID of the project
     */
    public SigningKey withProjectId(Optional<String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SigningKey other = (SigningKey) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.userId, other.userId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.lastSeen, other.lastSeen) &&
            Objects.deepEquals(this.publicKey, other.publicKey) &&
            Objects.deepEquals(this.disabled, other.disabled) &&
            Objects.deepEquals(this.projectId, other.projectId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            userId,
            createdAt,
            lastSeen,
            publicKey,
            disabled,
            projectId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SigningKey.class,
                "id", id,
                "name", name,
                "userId", userId,
                "createdAt", createdAt,
                "lastSeen", lastSeen,
                "publicKey", publicKey,
                "disabled", disabled,
                "projectId", projectId);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        @Deprecated
        private Optional<String> userId = Optional.empty();
 
        private Optional<Double> createdAt = Optional.empty();
 
        private Optional<Double> lastSeen = Optional.empty();
 
        private String publicKey;
 
        private Optional<Boolean> disabled = Optional.empty();
 
        private Optional<String> projectId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the signing key
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the signing key
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the signing-key was created
         */
        public Builder createdAt(double createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the signing-key was created
         */
        public Builder createdAt(Optional<Double> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the signing-key was last used
         */
        public Builder lastSeen(double lastSeen) {
            Utils.checkNotNull(lastSeen, "lastSeen");
            this.lastSeen = Optional.ofNullable(lastSeen);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the signing-key was last used
         */
        public Builder lastSeen(Optional<Double> lastSeen) {
            Utils.checkNotNull(lastSeen, "lastSeen");
            this.lastSeen = lastSeen;
            return this;
        }

        public Builder publicKey(String publicKey) {
            Utils.checkNotNull(publicKey, "publicKey");
            this.publicKey = publicKey;
            return this;
        }

        /**
         * Disable the signing key to allow rotation safely
         */
        public Builder disabled(boolean disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = Optional.ofNullable(disabled);
            return this;
        }

        /**
         * Disable the signing key to allow rotation safely
         */
        public Builder disabled(Optional<Boolean> disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = disabled;
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = Optional.ofNullable(projectId);
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(Optional<String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }
        
        public SigningKey build() {
            return new SigningKey(
                id,
                name,
                userId,
                createdAt,
                lastSeen,
                publicKey,
                disabled,
                projectId);
        }
    }
}

