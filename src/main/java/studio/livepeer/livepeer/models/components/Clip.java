/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

public class Clip {

    /**
     * URL of the asset to "clip"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<? extends String> url;

    /**
     * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clipStrategy")
    private Optional<? extends ClipStrategy> clipStrategy;

    /**
     * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalystPipelineStrategy")
    private Optional<? extends CatalystPipelineStrategy> catalystPipelineStrategy;

    /**
     * ID of the session
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionId")
    private Optional<? extends String> sessionId;

    /**
     * ID of the input asset or stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputId")
    private Optional<? extends String> inputId;

    @JsonCreator
    public Clip(
            @JsonProperty("url") Optional<? extends String> url,
            @JsonProperty("clipStrategy") Optional<? extends ClipStrategy> clipStrategy,
            @JsonProperty("catalystPipelineStrategy") Optional<? extends CatalystPipelineStrategy> catalystPipelineStrategy,
            @JsonProperty("sessionId") Optional<? extends String> sessionId,
            @JsonProperty("inputId") Optional<? extends String> inputId) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(clipStrategy, "clipStrategy");
        Utils.checkNotNull(catalystPipelineStrategy, "catalystPipelineStrategy");
        Utils.checkNotNull(sessionId, "sessionId");
        Utils.checkNotNull(inputId, "inputId");
        this.url = url;
        this.clipStrategy = clipStrategy;
        this.catalystPipelineStrategy = catalystPipelineStrategy;
        this.sessionId = sessionId;
        this.inputId = inputId;
    }
    
    public Clip() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * URL of the asset to "clip"
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> url() {
        return (Optional<String>) url;
    }

    /**
     * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ClipStrategy> clipStrategy() {
        return (Optional<ClipStrategy>) clipStrategy;
    }

    /**
     * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CatalystPipelineStrategy> catalystPipelineStrategy() {
        return (Optional<CatalystPipelineStrategy>) catalystPipelineStrategy;
    }

    /**
     * ID of the session
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sessionId() {
        return (Optional<String>) sessionId;
    }

    /**
     * ID of the input asset or stream
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> inputId() {
        return (Optional<String>) inputId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * URL of the asset to "clip"
     */
    public Clip withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * URL of the asset to "clip"
     */
    public Clip withUrl(Optional<? extends String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    public Clip withClipStrategy(ClipStrategy clipStrategy) {
        Utils.checkNotNull(clipStrategy, "clipStrategy");
        this.clipStrategy = Optional.ofNullable(clipStrategy);
        return this;
    }

    /**
     * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    public Clip withClipStrategy(Optional<? extends ClipStrategy> clipStrategy) {
        Utils.checkNotNull(clipStrategy, "clipStrategy");
        this.clipStrategy = clipStrategy;
        return this;
    }

    /**
     * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    public Clip withCatalystPipelineStrategy(CatalystPipelineStrategy catalystPipelineStrategy) {
        Utils.checkNotNull(catalystPipelineStrategy, "catalystPipelineStrategy");
        this.catalystPipelineStrategy = Optional.ofNullable(catalystPipelineStrategy);
        return this;
    }

    /**
     * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    public Clip withCatalystPipelineStrategy(Optional<? extends CatalystPipelineStrategy> catalystPipelineStrategy) {
        Utils.checkNotNull(catalystPipelineStrategy, "catalystPipelineStrategy");
        this.catalystPipelineStrategy = catalystPipelineStrategy;
        return this;
    }

    /**
     * ID of the session
     */
    public Clip withSessionId(String sessionId) {
        Utils.checkNotNull(sessionId, "sessionId");
        this.sessionId = Optional.ofNullable(sessionId);
        return this;
    }

    /**
     * ID of the session
     */
    public Clip withSessionId(Optional<? extends String> sessionId) {
        Utils.checkNotNull(sessionId, "sessionId");
        this.sessionId = sessionId;
        return this;
    }

    /**
     * ID of the input asset or stream
     */
    public Clip withInputId(String inputId) {
        Utils.checkNotNull(inputId, "inputId");
        this.inputId = Optional.ofNullable(inputId);
        return this;
    }

    /**
     * ID of the input asset or stream
     */
    public Clip withInputId(Optional<? extends String> inputId) {
        Utils.checkNotNull(inputId, "inputId");
        this.inputId = inputId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Clip other = (Clip) o;
        return 
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.clipStrategy, other.clipStrategy) &&
            java.util.Objects.deepEquals(this.catalystPipelineStrategy, other.catalystPipelineStrategy) &&
            java.util.Objects.deepEquals(this.sessionId, other.sessionId) &&
            java.util.Objects.deepEquals(this.inputId, other.inputId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            url,
            clipStrategy,
            catalystPipelineStrategy,
            sessionId,
            inputId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Clip.class,
                "url", url,
                "clipStrategy", clipStrategy,
                "catalystPipelineStrategy", catalystPipelineStrategy,
                "sessionId", sessionId,
                "inputId", inputId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> url = Optional.empty();
 
        private Optional<? extends ClipStrategy> clipStrategy = Optional.empty();
 
        private Optional<? extends CatalystPipelineStrategy> catalystPipelineStrategy = Optional.empty();
 
        private Optional<? extends String> sessionId = Optional.empty();
 
        private Optional<? extends String> inputId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL of the asset to "clip"
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * URL of the asset to "clip"
         */
        public Builder url(Optional<? extends String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
         */
        public Builder clipStrategy(ClipStrategy clipStrategy) {
            Utils.checkNotNull(clipStrategy, "clipStrategy");
            this.clipStrategy = Optional.ofNullable(clipStrategy);
            return this;
        }

        /**
         * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
         */
        public Builder clipStrategy(Optional<? extends ClipStrategy> clipStrategy) {
            Utils.checkNotNull(clipStrategy, "clipStrategy");
            this.clipStrategy = clipStrategy;
            return this;
        }

        /**
         * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
         */
        public Builder catalystPipelineStrategy(CatalystPipelineStrategy catalystPipelineStrategy) {
            Utils.checkNotNull(catalystPipelineStrategy, "catalystPipelineStrategy");
            this.catalystPipelineStrategy = Optional.ofNullable(catalystPipelineStrategy);
            return this;
        }

        /**
         * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
         */
        public Builder catalystPipelineStrategy(Optional<? extends CatalystPipelineStrategy> catalystPipelineStrategy) {
            Utils.checkNotNull(catalystPipelineStrategy, "catalystPipelineStrategy");
            this.catalystPipelineStrategy = catalystPipelineStrategy;
            return this;
        }

        /**
         * ID of the session
         */
        public Builder sessionId(String sessionId) {
            Utils.checkNotNull(sessionId, "sessionId");
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        /**
         * ID of the session
         */
        public Builder sessionId(Optional<? extends String> sessionId) {
            Utils.checkNotNull(sessionId, "sessionId");
            this.sessionId = sessionId;
            return this;
        }

        /**
         * ID of the input asset or stream
         */
        public Builder inputId(String inputId) {
            Utils.checkNotNull(inputId, "inputId");
            this.inputId = Optional.ofNullable(inputId);
            return this;
        }

        /**
         * ID of the input asset or stream
         */
        public Builder inputId(Optional<? extends String> inputId) {
            Utils.checkNotNull(inputId, "inputId");
            this.inputId = inputId;
            return this;
        }
        
        public Clip build() {
            return new Clip(
                url,
                clipStrategy,
                catalystPipelineStrategy,
                sessionId,
                inputId);
        }
    }
}

