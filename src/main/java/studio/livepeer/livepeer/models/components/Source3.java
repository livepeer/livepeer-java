/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Source3 {

    @JsonProperty("type")
    private AssetSource3Type type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption")
    private Optional<? extends EncryptionOutput> encryption;

    /**
     * ID of the asset or stream from which this asset was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceId")
    private Optional<String> sourceId;

    /**
     * ID of the session from which this asset was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionId")
    private Optional<String> sessionId;

    /**
     * Playback ID of the asset or stream from which this asset was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackId")
    private Optional<String> playbackId;

    /**
     * ID of the requester from which this asset was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requesterId")
    private Optional<String> requesterId;

    /**
     * ID of the asset from which this asset was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assetId")
    private Optional<String> assetId;

    @JsonCreator
    public Source3(
            @JsonProperty("type") AssetSource3Type type,
            @JsonProperty("encryption") Optional<? extends EncryptionOutput> encryption,
            @JsonProperty("sourceId") Optional<String> sourceId,
            @JsonProperty("sessionId") Optional<String> sessionId,
            @JsonProperty("playbackId") Optional<String> playbackId,
            @JsonProperty("requesterId") Optional<String> requesterId,
            @JsonProperty("assetId") Optional<String> assetId) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(encryption, "encryption");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(sessionId, "sessionId");
        Utils.checkNotNull(playbackId, "playbackId");
        Utils.checkNotNull(requesterId, "requesterId");
        Utils.checkNotNull(assetId, "assetId");
        this.type = type;
        this.encryption = encryption;
        this.sourceId = sourceId;
        this.sessionId = sessionId;
        this.playbackId = playbackId;
        this.requesterId = requesterId;
        this.assetId = assetId;
    }
    
    public Source3(
            AssetSource3Type type) {
        this(type, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public AssetSource3Type type() {
        return type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EncryptionOutput> encryption() {
        return (Optional<EncryptionOutput>) encryption;
    }

    /**
     * ID of the asset or stream from which this asset was created.
     */
    @JsonIgnore
    public Optional<String> sourceId() {
        return sourceId;
    }

    /**
     * ID of the session from which this asset was created.
     */
    @JsonIgnore
    public Optional<String> sessionId() {
        return sessionId;
    }

    /**
     * Playback ID of the asset or stream from which this asset was created.
     */
    @JsonIgnore
    public Optional<String> playbackId() {
        return playbackId;
    }

    /**
     * ID of the requester from which this asset was created.
     */
    @JsonIgnore
    public Optional<String> requesterId() {
        return requesterId;
    }

    /**
     * ID of the asset from which this asset was created.
     */
    @JsonIgnore
    public Optional<String> assetId() {
        return assetId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Source3 withType(AssetSource3Type type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Source3 withEncryption(EncryptionOutput encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = Optional.ofNullable(encryption);
        return this;
    }

    public Source3 withEncryption(Optional<? extends EncryptionOutput> encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = encryption;
        return this;
    }

    /**
     * ID of the asset or stream from which this asset was created.
     */
    public Source3 withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = Optional.ofNullable(sourceId);
        return this;
    }

    /**
     * ID of the asset or stream from which this asset was created.
     */
    public Source3 withSourceId(Optional<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    /**
     * ID of the session from which this asset was created.
     */
    public Source3 withSessionId(String sessionId) {
        Utils.checkNotNull(sessionId, "sessionId");
        this.sessionId = Optional.ofNullable(sessionId);
        return this;
    }

    /**
     * ID of the session from which this asset was created.
     */
    public Source3 withSessionId(Optional<String> sessionId) {
        Utils.checkNotNull(sessionId, "sessionId");
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Playback ID of the asset or stream from which this asset was created.
     */
    public Source3 withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = Optional.ofNullable(playbackId);
        return this;
    }

    /**
     * Playback ID of the asset or stream from which this asset was created.
     */
    public Source3 withPlaybackId(Optional<String> playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }

    /**
     * ID of the requester from which this asset was created.
     */
    public Source3 withRequesterId(String requesterId) {
        Utils.checkNotNull(requesterId, "requesterId");
        this.requesterId = Optional.ofNullable(requesterId);
        return this;
    }

    /**
     * ID of the requester from which this asset was created.
     */
    public Source3 withRequesterId(Optional<String> requesterId) {
        Utils.checkNotNull(requesterId, "requesterId");
        this.requesterId = requesterId;
        return this;
    }

    /**
     * ID of the asset from which this asset was created.
     */
    public Source3 withAssetId(String assetId) {
        Utils.checkNotNull(assetId, "assetId");
        this.assetId = Optional.ofNullable(assetId);
        return this;
    }

    /**
     * ID of the asset from which this asset was created.
     */
    public Source3 withAssetId(Optional<String> assetId) {
        Utils.checkNotNull(assetId, "assetId");
        this.assetId = assetId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Source3 other = (Source3) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.encryption, other.encryption) &&
            Objects.deepEquals(this.sourceId, other.sourceId) &&
            Objects.deepEquals(this.sessionId, other.sessionId) &&
            Objects.deepEquals(this.playbackId, other.playbackId) &&
            Objects.deepEquals(this.requesterId, other.requesterId) &&
            Objects.deepEquals(this.assetId, other.assetId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            encryption,
            sourceId,
            sessionId,
            playbackId,
            requesterId,
            assetId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Source3.class,
                "type", type,
                "encryption", encryption,
                "sourceId", sourceId,
                "sessionId", sessionId,
                "playbackId", playbackId,
                "requesterId", requesterId,
                "assetId", assetId);
    }
    
    public final static class Builder {
 
        private AssetSource3Type type;
 
        private Optional<? extends EncryptionOutput> encryption = Optional.empty();
 
        private Optional<String> sourceId = Optional.empty();
 
        private Optional<String> sessionId = Optional.empty();
 
        private Optional<String> playbackId = Optional.empty();
 
        private Optional<String> requesterId = Optional.empty();
 
        private Optional<String> assetId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(AssetSource3Type type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder encryption(EncryptionOutput encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = Optional.ofNullable(encryption);
            return this;
        }

        public Builder encryption(Optional<? extends EncryptionOutput> encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = encryption;
            return this;
        }

        /**
         * ID of the asset or stream from which this asset was created.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        /**
         * ID of the asset or stream from which this asset was created.
         */
        public Builder sourceId(Optional<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        /**
         * ID of the session from which this asset was created.
         */
        public Builder sessionId(String sessionId) {
            Utils.checkNotNull(sessionId, "sessionId");
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        /**
         * ID of the session from which this asset was created.
         */
        public Builder sessionId(Optional<String> sessionId) {
            Utils.checkNotNull(sessionId, "sessionId");
            this.sessionId = sessionId;
            return this;
        }

        /**
         * Playback ID of the asset or stream from which this asset was created.
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = Optional.ofNullable(playbackId);
            return this;
        }

        /**
         * Playback ID of the asset or stream from which this asset was created.
         */
        public Builder playbackId(Optional<String> playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }

        /**
         * ID of the requester from which this asset was created.
         */
        public Builder requesterId(String requesterId) {
            Utils.checkNotNull(requesterId, "requesterId");
            this.requesterId = Optional.ofNullable(requesterId);
            return this;
        }

        /**
         * ID of the requester from which this asset was created.
         */
        public Builder requesterId(Optional<String> requesterId) {
            Utils.checkNotNull(requesterId, "requesterId");
            this.requesterId = requesterId;
            return this;
        }

        /**
         * ID of the asset from which this asset was created.
         */
        public Builder assetId(String assetId) {
            Utils.checkNotNull(assetId, "assetId");
            this.assetId = Optional.ofNullable(assetId);
            return this;
        }

        /**
         * ID of the asset from which this asset was created.
         */
        public Builder assetId(Optional<String> assetId) {
            Utils.checkNotNull(assetId, "assetId");
            this.assetId = assetId;
            return this;
        }
        
        public Source3 build() {
            return new Source3(
                type,
                encryption,
                sourceId,
                sessionId,
                playbackId,
                requesterId,
                assetId);
        }
    }
}

