/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;
/**
 * TargetSpec - Inline multistream target object. Will automatically
 * create the target resource to be used by the created
 * stream.
 * 
 */

public class TargetSpec {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    @JsonProperty("url")
    private String url;

    @JsonCreator
    public TargetSpec(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(url, "url");
        this.name = name;
        this.url = url;
    }
    
    public TargetSpec(
            String url) {
        this(Optional.empty(), url);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TargetSpec withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public TargetSpec withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    public TargetSpec withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetSpec other = (TargetSpec) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TargetSpec.class,
                "name", name,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public TargetSpec build() {
            return new TargetSpec(
                name,
                url);
        }
    }
}

