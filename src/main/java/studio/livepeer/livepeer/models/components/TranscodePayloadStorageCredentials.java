/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import studio.livepeer.livepeer.utils.Utils;

/**
 * TranscodePayloadStorageCredentials - Delegation proof for Livepeer to be able to upload to
 * web3.storage
 * 
 */

public class TranscodePayloadStorageCredentials {

    /**
     * Base64 encoded UCAN delegation proof
     */
    @JsonProperty("proof")
    private String proof;

    @JsonCreator
    public TranscodePayloadStorageCredentials(
            @JsonProperty("proof") String proof) {
        Utils.checkNotNull(proof, "proof");
        this.proof = proof;
    }

    /**
     * Base64 encoded UCAN delegation proof
     */
    @JsonIgnore
    public String proof() {
        return proof;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Base64 encoded UCAN delegation proof
     */
    public TranscodePayloadStorageCredentials withProof(String proof) {
        Utils.checkNotNull(proof, "proof");
        this.proof = proof;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TranscodePayloadStorageCredentials other = (TranscodePayloadStorageCredentials) o;
        return 
            java.util.Objects.deepEquals(this.proof, other.proof);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            proof);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TranscodePayloadStorageCredentials.class,
                "proof", proof);
    }
    
    public final static class Builder {
 
        private String proof;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Base64 encoded UCAN delegation proof
         */
        public Builder proof(String proof) {
            Utils.checkNotNull(proof, "proof");
            this.proof = proof;
            return this;
        }
        
        public TranscodePayloadStorageCredentials build() {
            return new TranscodePayloadStorageCredentials(
                proof);
        }
    }
}

