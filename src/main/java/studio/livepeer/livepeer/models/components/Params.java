/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;
/**
 * Params - Parameters of the task
 */

public class Params {

    /**
     * Parameters for the upload task
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upload")
    private Optional<? extends Upload> upload;

    /**
     * Parameters for the export task
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("export")
    private Optional<? extends ExportTaskParams> export;

    /**
     * Parameters for the export-data task
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exportData")
    private Optional<? extends TaskExportData> exportData;

    /**
     * Parameters for the transcode-file task
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcode-file")
    private Optional<? extends TranscodeFile> transcodeFile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clip")
    private Optional<? extends Clip> clip;

    @JsonCreator
    public Params(
            @JsonProperty("upload") Optional<? extends Upload> upload,
            @JsonProperty("export") Optional<? extends ExportTaskParams> export,
            @JsonProperty("exportData") Optional<? extends TaskExportData> exportData,
            @JsonProperty("transcode-file") Optional<? extends TranscodeFile> transcodeFile,
            @JsonProperty("clip") Optional<? extends Clip> clip) {
        Utils.checkNotNull(upload, "upload");
        Utils.checkNotNull(export, "export");
        Utils.checkNotNull(exportData, "exportData");
        Utils.checkNotNull(transcodeFile, "transcodeFile");
        Utils.checkNotNull(clip, "clip");
        this.upload = upload;
        this.export = export;
        this.exportData = exportData;
        this.transcodeFile = transcodeFile;
        this.clip = clip;
    }
    
    public Params() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Parameters for the upload task
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Upload> upload() {
        return (Optional<Upload>) upload;
    }

    /**
     * Parameters for the export task
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExportTaskParams> export() {
        return (Optional<ExportTaskParams>) export;
    }

    /**
     * Parameters for the export-data task
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaskExportData> exportData() {
        return (Optional<TaskExportData>) exportData;
    }

    /**
     * Parameters for the transcode-file task
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TranscodeFile> transcodeFile() {
        return (Optional<TranscodeFile>) transcodeFile;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Clip> clip() {
        return (Optional<Clip>) clip;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Parameters for the upload task
     */
    public Params withUpload(Upload upload) {
        Utils.checkNotNull(upload, "upload");
        this.upload = Optional.ofNullable(upload);
        return this;
    }

    /**
     * Parameters for the upload task
     */
    public Params withUpload(Optional<? extends Upload> upload) {
        Utils.checkNotNull(upload, "upload");
        this.upload = upload;
        return this;
    }

    /**
     * Parameters for the export task
     */
    public Params withExport(ExportTaskParams export) {
        Utils.checkNotNull(export, "export");
        this.export = Optional.ofNullable(export);
        return this;
    }

    /**
     * Parameters for the export task
     */
    public Params withExport(Optional<? extends ExportTaskParams> export) {
        Utils.checkNotNull(export, "export");
        this.export = export;
        return this;
    }

    /**
     * Parameters for the export-data task
     */
    public Params withExportData(TaskExportData exportData) {
        Utils.checkNotNull(exportData, "exportData");
        this.exportData = Optional.ofNullable(exportData);
        return this;
    }

    /**
     * Parameters for the export-data task
     */
    public Params withExportData(Optional<? extends TaskExportData> exportData) {
        Utils.checkNotNull(exportData, "exportData");
        this.exportData = exportData;
        return this;
    }

    /**
     * Parameters for the transcode-file task
     */
    public Params withTranscodeFile(TranscodeFile transcodeFile) {
        Utils.checkNotNull(transcodeFile, "transcodeFile");
        this.transcodeFile = Optional.ofNullable(transcodeFile);
        return this;
    }

    /**
     * Parameters for the transcode-file task
     */
    public Params withTranscodeFile(Optional<? extends TranscodeFile> transcodeFile) {
        Utils.checkNotNull(transcodeFile, "transcodeFile");
        this.transcodeFile = transcodeFile;
        return this;
    }

    public Params withClip(Clip clip) {
        Utils.checkNotNull(clip, "clip");
        this.clip = Optional.ofNullable(clip);
        return this;
    }

    public Params withClip(Optional<? extends Clip> clip) {
        Utils.checkNotNull(clip, "clip");
        this.clip = clip;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Params other = (Params) o;
        return 
            java.util.Objects.deepEquals(this.upload, other.upload) &&
            java.util.Objects.deepEquals(this.export, other.export) &&
            java.util.Objects.deepEquals(this.exportData, other.exportData) &&
            java.util.Objects.deepEquals(this.transcodeFile, other.transcodeFile) &&
            java.util.Objects.deepEquals(this.clip, other.clip);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            upload,
            export,
            exportData,
            transcodeFile,
            clip);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Params.class,
                "upload", upload,
                "export", export,
                "exportData", exportData,
                "transcodeFile", transcodeFile,
                "clip", clip);
    }
    
    public final static class Builder {
 
        private Optional<? extends Upload> upload = Optional.empty();
 
        private Optional<? extends ExportTaskParams> export = Optional.empty();
 
        private Optional<? extends TaskExportData> exportData = Optional.empty();
 
        private Optional<? extends TranscodeFile> transcodeFile = Optional.empty();
 
        private Optional<? extends Clip> clip = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Parameters for the upload task
         */
        public Builder upload(Upload upload) {
            Utils.checkNotNull(upload, "upload");
            this.upload = Optional.ofNullable(upload);
            return this;
        }

        /**
         * Parameters for the upload task
         */
        public Builder upload(Optional<? extends Upload> upload) {
            Utils.checkNotNull(upload, "upload");
            this.upload = upload;
            return this;
        }

        /**
         * Parameters for the export task
         */
        public Builder export(ExportTaskParams export) {
            Utils.checkNotNull(export, "export");
            this.export = Optional.ofNullable(export);
            return this;
        }

        /**
         * Parameters for the export task
         */
        public Builder export(Optional<? extends ExportTaskParams> export) {
            Utils.checkNotNull(export, "export");
            this.export = export;
            return this;
        }

        /**
         * Parameters for the export-data task
         */
        public Builder exportData(TaskExportData exportData) {
            Utils.checkNotNull(exportData, "exportData");
            this.exportData = Optional.ofNullable(exportData);
            return this;
        }

        /**
         * Parameters for the export-data task
         */
        public Builder exportData(Optional<? extends TaskExportData> exportData) {
            Utils.checkNotNull(exportData, "exportData");
            this.exportData = exportData;
            return this;
        }

        /**
         * Parameters for the transcode-file task
         */
        public Builder transcodeFile(TranscodeFile transcodeFile) {
            Utils.checkNotNull(transcodeFile, "transcodeFile");
            this.transcodeFile = Optional.ofNullable(transcodeFile);
            return this;
        }

        /**
         * Parameters for the transcode-file task
         */
        public Builder transcodeFile(Optional<? extends TranscodeFile> transcodeFile) {
            Utils.checkNotNull(transcodeFile, "transcodeFile");
            this.transcodeFile = transcodeFile;
            return this;
        }

        public Builder clip(Clip clip) {
            Utils.checkNotNull(clip, "clip");
            this.clip = Optional.ofNullable(clip);
            return this;
        }

        public Builder clip(Optional<? extends Clip> clip) {
            Utils.checkNotNull(clip, "clip");
            this.clip = clip;
            return this;
        }
        
        public Params build() {
            return new Params(
                upload,
                export,
                exportData,
                transcodeFile,
                clip);
        }
    }
}

