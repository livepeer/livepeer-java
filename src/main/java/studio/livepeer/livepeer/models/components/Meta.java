/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import studio.livepeer.livepeer.utils.Utils;


public class Meta {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("live")
    private Optional<? extends Live> live;

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackPolicy")
    private JsonNullable<? extends PlaybackPolicy> playbackPolicy;

    @JsonProperty("source")
    private java.util.List<PlaybackInfoSource> source;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dvrPlayback")
    private Optional<? extends java.util.List<DvrPlayback>> dvrPlayback;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attestation")
    private Optional<? extends Attestation> attestation;

    @JsonCreator
    public Meta(
            @JsonProperty("live") Optional<? extends Live> live,
            @JsonProperty("playbackPolicy") JsonNullable<? extends PlaybackPolicy> playbackPolicy,
            @JsonProperty("source") java.util.List<PlaybackInfoSource> source,
            @JsonProperty("dvrPlayback") Optional<? extends java.util.List<DvrPlayback>> dvrPlayback,
            @JsonProperty("attestation") Optional<? extends Attestation> attestation) {
        Utils.checkNotNull(live, "live");
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(dvrPlayback, "dvrPlayback");
        Utils.checkNotNull(attestation, "attestation");
        this.live = live;
        this.playbackPolicy = playbackPolicy;
        this.source = source;
        this.dvrPlayback = dvrPlayback;
        this.attestation = attestation;
    }
    
    public Meta(
            java.util.List<PlaybackInfoSource> source) {
        this(Optional.empty(), JsonNullable.undefined(), source, Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Live> live() {
        return (Optional<Live>) live;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlaybackPolicy> playbackPolicy() {
        return (JsonNullable<PlaybackPolicy>) playbackPolicy;
    }

    @JsonIgnore
    public java.util.List<PlaybackInfoSource> source() {
        return source;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<DvrPlayback>> dvrPlayback() {
        return (Optional<java.util.List<DvrPlayback>>) dvrPlayback;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Attestation> attestation() {
        return (Optional<Attestation>) attestation;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Meta withLive(Live live) {
        Utils.checkNotNull(live, "live");
        this.live = Optional.ofNullable(live);
        return this;
    }

    public Meta withLive(Optional<? extends Live> live) {
        Utils.checkNotNull(live, "live");
        this.live = live;
        return this;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    public Meta withPlaybackPolicy(PlaybackPolicy playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = JsonNullable.of(playbackPolicy);
        return this;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    public Meta withPlaybackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = playbackPolicy;
        return this;
    }

    public Meta withSource(java.util.List<PlaybackInfoSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public Meta withDvrPlayback(java.util.List<DvrPlayback> dvrPlayback) {
        Utils.checkNotNull(dvrPlayback, "dvrPlayback");
        this.dvrPlayback = Optional.ofNullable(dvrPlayback);
        return this;
    }

    public Meta withDvrPlayback(Optional<? extends java.util.List<DvrPlayback>> dvrPlayback) {
        Utils.checkNotNull(dvrPlayback, "dvrPlayback");
        this.dvrPlayback = dvrPlayback;
        return this;
    }

    public Meta withAttestation(Attestation attestation) {
        Utils.checkNotNull(attestation, "attestation");
        this.attestation = Optional.ofNullable(attestation);
        return this;
    }

    public Meta withAttestation(Optional<? extends Attestation> attestation) {
        Utils.checkNotNull(attestation, "attestation");
        this.attestation = attestation;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Meta other = (Meta) o;
        return 
            java.util.Objects.deepEquals(this.live, other.live) &&
            java.util.Objects.deepEquals(this.playbackPolicy, other.playbackPolicy) &&
            java.util.Objects.deepEquals(this.source, other.source) &&
            java.util.Objects.deepEquals(this.dvrPlayback, other.dvrPlayback) &&
            java.util.Objects.deepEquals(this.attestation, other.attestation);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            live,
            playbackPolicy,
            source,
            dvrPlayback,
            attestation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Meta.class,
                "live", live,
                "playbackPolicy", playbackPolicy,
                "source", source,
                "dvrPlayback", dvrPlayback,
                "attestation", attestation);
    }
    
    public final static class Builder {
 
        private Optional<? extends Live> live = Optional.empty();
 
        private JsonNullable<? extends PlaybackPolicy> playbackPolicy = JsonNullable.undefined();
 
        private java.util.List<PlaybackInfoSource> source;
 
        private Optional<? extends java.util.List<DvrPlayback>> dvrPlayback = Optional.empty();
 
        private Optional<? extends Attestation> attestation = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder live(Live live) {
            Utils.checkNotNull(live, "live");
            this.live = Optional.ofNullable(live);
            return this;
        }

        public Builder live(Optional<? extends Live> live) {
            Utils.checkNotNull(live, "live");
            this.live = live;
            return this;
        }

        /**
         * Whether the playback policy for a asset or stream is public or signed
         */
        public Builder playbackPolicy(PlaybackPolicy playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = JsonNullable.of(playbackPolicy);
            return this;
        }

        /**
         * Whether the playback policy for a asset or stream is public or signed
         */
        public Builder playbackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = playbackPolicy;
            return this;
        }

        public Builder source(java.util.List<PlaybackInfoSource> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder dvrPlayback(java.util.List<DvrPlayback> dvrPlayback) {
            Utils.checkNotNull(dvrPlayback, "dvrPlayback");
            this.dvrPlayback = Optional.ofNullable(dvrPlayback);
            return this;
        }

        public Builder dvrPlayback(Optional<? extends java.util.List<DvrPlayback>> dvrPlayback) {
            Utils.checkNotNull(dvrPlayback, "dvrPlayback");
            this.dvrPlayback = dvrPlayback;
            return this;
        }

        public Builder attestation(Attestation attestation) {
            Utils.checkNotNull(attestation, "attestation");
            this.attestation = Optional.ofNullable(attestation);
            return this;
        }

        public Builder attestation(Optional<? extends Attestation> attestation) {
            Utils.checkNotNull(attestation, "attestation");
            this.attestation = attestation;
            return this;
        }
        
        public Meta build() {
            return new Meta(
                live,
                playbackPolicy,
                source,
                dvrPlayback,
                attestation);
        }
    }
}

