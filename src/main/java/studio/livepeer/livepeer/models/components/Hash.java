/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Hash {

    /**
     * Hash of the asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hash")
    private Optional<? extends String> hash;

    /**
     * Hash algorithm used to compute the hash
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("algorithm")
    private Optional<? extends String> algorithm;

    @JsonCreator
    public Hash(
            @JsonProperty("hash") Optional<? extends String> hash,
            @JsonProperty("algorithm") Optional<? extends String> algorithm) {
        Utils.checkNotNull(hash, "hash");
        Utils.checkNotNull(algorithm, "algorithm");
        this.hash = hash;
        this.algorithm = algorithm;
    }
    
    public Hash() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Hash of the asset
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> hash() {
        return (Optional<String>) hash;
    }

    /**
     * Hash algorithm used to compute the hash
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> algorithm() {
        return (Optional<String>) algorithm;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Hash of the asset
     */
    public Hash withHash(String hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = Optional.ofNullable(hash);
        return this;
    }

    /**
     * Hash of the asset
     */
    public Hash withHash(Optional<? extends String> hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = hash;
        return this;
    }

    /**
     * Hash algorithm used to compute the hash
     */
    public Hash withAlgorithm(String algorithm) {
        Utils.checkNotNull(algorithm, "algorithm");
        this.algorithm = Optional.ofNullable(algorithm);
        return this;
    }

    /**
     * Hash algorithm used to compute the hash
     */
    public Hash withAlgorithm(Optional<? extends String> algorithm) {
        Utils.checkNotNull(algorithm, "algorithm");
        this.algorithm = algorithm;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Hash other = (Hash) o;
        return 
            java.util.Objects.deepEquals(this.hash, other.hash) &&
            java.util.Objects.deepEquals(this.algorithm, other.algorithm);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            hash,
            algorithm);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Hash.class,
                "hash", hash,
                "algorithm", algorithm);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> hash = Optional.empty();
 
        private Optional<? extends String> algorithm = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Hash of the asset
         */
        public Builder hash(String hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = Optional.ofNullable(hash);
            return this;
        }

        /**
         * Hash of the asset
         */
        public Builder hash(Optional<? extends String> hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = hash;
            return this;
        }

        /**
         * Hash algorithm used to compute the hash
         */
        public Builder algorithm(String algorithm) {
            Utils.checkNotNull(algorithm, "algorithm");
            this.algorithm = Optional.ofNullable(algorithm);
            return this;
        }

        /**
         * Hash algorithm used to compute the hash
         */
        public Builder algorithm(Optional<? extends String> algorithm) {
            Utils.checkNotNull(algorithm, "algorithm");
            this.algorithm = algorithm;
            return this;
        }
        
        public Hash build() {
            return new Hash(
                hash,
                algorithm);
        }
    }
}

