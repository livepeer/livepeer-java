/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * RealtimeViewershipMetric - An individual metric about realtime viewership of a stream/asset.
 * 
 */

public class RealtimeViewershipMetric {

    /**
     * The playback ID associated with the metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackId")
    private Optional<String> playbackId;

    /**
     * The device used by the viewer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device")
    private Optional<String> device;

    /**
     * The browser used by the viewer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("browser")
    private Optional<String> browser;

    /**
     * The country where the viewer is located.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    /**
     * The number of views for the stream/asset.
     */
    @JsonProperty("viewCount")
    private long viewCount;

    /**
     * The error rate for the stream/asset.
     */
    @JsonProperty("errorRate")
    private double errorRate;

    @JsonCreator
    public RealtimeViewershipMetric(
            @JsonProperty("playbackId") Optional<String> playbackId,
            @JsonProperty("device") Optional<String> device,
            @JsonProperty("browser") Optional<String> browser,
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("viewCount") long viewCount,
            @JsonProperty("errorRate") double errorRate) {
        Utils.checkNotNull(playbackId, "playbackId");
        Utils.checkNotNull(device, "device");
        Utils.checkNotNull(browser, "browser");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(viewCount, "viewCount");
        Utils.checkNotNull(errorRate, "errorRate");
        this.playbackId = playbackId;
        this.device = device;
        this.browser = browser;
        this.country = country;
        this.viewCount = viewCount;
        this.errorRate = errorRate;
    }
    
    public RealtimeViewershipMetric(
            long viewCount,
            double errorRate) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), viewCount, errorRate);
    }

    /**
     * The playback ID associated with the metric.
     */
    @JsonIgnore
    public Optional<String> playbackId() {
        return playbackId;
    }

    /**
     * The device used by the viewer.
     */
    @JsonIgnore
    public Optional<String> device() {
        return device;
    }

    /**
     * The browser used by the viewer.
     */
    @JsonIgnore
    public Optional<String> browser() {
        return browser;
    }

    /**
     * The country where the viewer is located.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * The number of views for the stream/asset.
     */
    @JsonIgnore
    public long viewCount() {
        return viewCount;
    }

    /**
     * The error rate for the stream/asset.
     */
    @JsonIgnore
    public double errorRate() {
        return errorRate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The playback ID associated with the metric.
     */
    public RealtimeViewershipMetric withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = Optional.ofNullable(playbackId);
        return this;
    }

    /**
     * The playback ID associated with the metric.
     */
    public RealtimeViewershipMetric withPlaybackId(Optional<String> playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }

    /**
     * The device used by the viewer.
     */
    public RealtimeViewershipMetric withDevice(String device) {
        Utils.checkNotNull(device, "device");
        this.device = Optional.ofNullable(device);
        return this;
    }

    /**
     * The device used by the viewer.
     */
    public RealtimeViewershipMetric withDevice(Optional<String> device) {
        Utils.checkNotNull(device, "device");
        this.device = device;
        return this;
    }

    /**
     * The browser used by the viewer.
     */
    public RealtimeViewershipMetric withBrowser(String browser) {
        Utils.checkNotNull(browser, "browser");
        this.browser = Optional.ofNullable(browser);
        return this;
    }

    /**
     * The browser used by the viewer.
     */
    public RealtimeViewershipMetric withBrowser(Optional<String> browser) {
        Utils.checkNotNull(browser, "browser");
        this.browser = browser;
        return this;
    }

    /**
     * The country where the viewer is located.
     */
    public RealtimeViewershipMetric withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * The country where the viewer is located.
     */
    public RealtimeViewershipMetric withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The number of views for the stream/asset.
     */
    public RealtimeViewershipMetric withViewCount(long viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = viewCount;
        return this;
    }

    /**
     * The error rate for the stream/asset.
     */
    public RealtimeViewershipMetric withErrorRate(double errorRate) {
        Utils.checkNotNull(errorRate, "errorRate");
        this.errorRate = errorRate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RealtimeViewershipMetric other = (RealtimeViewershipMetric) o;
        return 
            Objects.deepEquals(this.playbackId, other.playbackId) &&
            Objects.deepEquals(this.device, other.device) &&
            Objects.deepEquals(this.browser, other.browser) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.viewCount, other.viewCount) &&
            Objects.deepEquals(this.errorRate, other.errorRate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            playbackId,
            device,
            browser,
            country,
            viewCount,
            errorRate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RealtimeViewershipMetric.class,
                "playbackId", playbackId,
                "device", device,
                "browser", browser,
                "country", country,
                "viewCount", viewCount,
                "errorRate", errorRate);
    }
    
    public final static class Builder {
 
        private Optional<String> playbackId = Optional.empty();
 
        private Optional<String> device = Optional.empty();
 
        private Optional<String> browser = Optional.empty();
 
        private Optional<String> country = Optional.empty();
 
        private Long viewCount;
 
        private Double errorRate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The playback ID associated with the metric.
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = Optional.ofNullable(playbackId);
            return this;
        }

        /**
         * The playback ID associated with the metric.
         */
        public Builder playbackId(Optional<String> playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }

        /**
         * The device used by the viewer.
         */
        public Builder device(String device) {
            Utils.checkNotNull(device, "device");
            this.device = Optional.ofNullable(device);
            return this;
        }

        /**
         * The device used by the viewer.
         */
        public Builder device(Optional<String> device) {
            Utils.checkNotNull(device, "device");
            this.device = device;
            return this;
        }

        /**
         * The browser used by the viewer.
         */
        public Builder browser(String browser) {
            Utils.checkNotNull(browser, "browser");
            this.browser = Optional.ofNullable(browser);
            return this;
        }

        /**
         * The browser used by the viewer.
         */
        public Builder browser(Optional<String> browser) {
            Utils.checkNotNull(browser, "browser");
            this.browser = browser;
            return this;
        }

        /**
         * The country where the viewer is located.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * The country where the viewer is located.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The number of views for the stream/asset.
         */
        public Builder viewCount(long viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = viewCount;
            return this;
        }

        /**
         * The error rate for the stream/asset.
         */
        public Builder errorRate(double errorRate) {
            Utils.checkNotNull(errorRate, "errorRate");
            this.errorRate = errorRate;
            return this;
        }
        
        public RealtimeViewershipMetric build() {
            return new RealtimeViewershipMetric(
                playbackId,
                device,
                browser,
                country,
                viewCount,
                errorRate);
        }
    }
}

