/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Participants {

    /**
     * participant ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identity")
    private Optional<? extends String> identity;

    /**
     * user defined participant name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * the time the participant joined
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("joinedAt")
    private Optional<? extends Long> joinedAt;

    /**
     * the time the participant left
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leftAt")
    private Optional<? extends Long> leftAt;

    @JsonCreator
    public Participants(
            @JsonProperty("identity") Optional<? extends String> identity,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("joinedAt") Optional<? extends Long> joinedAt,
            @JsonProperty("leftAt") Optional<? extends Long> leftAt) {
        Utils.checkNotNull(identity, "identity");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(joinedAt, "joinedAt");
        Utils.checkNotNull(leftAt, "leftAt");
        this.identity = identity;
        this.name = name;
        this.joinedAt = joinedAt;
        this.leftAt = leftAt;
    }
    
    public Participants() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * participant ID
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> identity() {
        return (Optional<String>) identity;
    }

    /**
     * user defined participant name
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * the time the participant joined
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> joinedAt() {
        return (Optional<Long>) joinedAt;
    }

    /**
     * the time the participant left
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> leftAt() {
        return (Optional<Long>) leftAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * participant ID
     */
    public Participants withIdentity(String identity) {
        Utils.checkNotNull(identity, "identity");
        this.identity = Optional.ofNullable(identity);
        return this;
    }

    /**
     * participant ID
     */
    public Participants withIdentity(Optional<? extends String> identity) {
        Utils.checkNotNull(identity, "identity");
        this.identity = identity;
        return this;
    }

    /**
     * user defined participant name
     */
    public Participants withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * user defined participant name
     */
    public Participants withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * the time the participant joined
     */
    public Participants withJoinedAt(long joinedAt) {
        Utils.checkNotNull(joinedAt, "joinedAt");
        this.joinedAt = Optional.ofNullable(joinedAt);
        return this;
    }

    /**
     * the time the participant joined
     */
    public Participants withJoinedAt(Optional<? extends Long> joinedAt) {
        Utils.checkNotNull(joinedAt, "joinedAt");
        this.joinedAt = joinedAt;
        return this;
    }

    /**
     * the time the participant left
     */
    public Participants withLeftAt(long leftAt) {
        Utils.checkNotNull(leftAt, "leftAt");
        this.leftAt = Optional.ofNullable(leftAt);
        return this;
    }

    /**
     * the time the participant left
     */
    public Participants withLeftAt(Optional<? extends Long> leftAt) {
        Utils.checkNotNull(leftAt, "leftAt");
        this.leftAt = leftAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Participants other = (Participants) o;
        return 
            java.util.Objects.deepEquals(this.identity, other.identity) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.joinedAt, other.joinedAt) &&
            java.util.Objects.deepEquals(this.leftAt, other.leftAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            identity,
            name,
            joinedAt,
            leftAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Participants.class,
                "identity", identity,
                "name", name,
                "joinedAt", joinedAt,
                "leftAt", leftAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> identity = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Long> joinedAt = Optional.empty();
 
        private Optional<? extends Long> leftAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * participant ID
         */
        public Builder identity(String identity) {
            Utils.checkNotNull(identity, "identity");
            this.identity = Optional.ofNullable(identity);
            return this;
        }

        /**
         * participant ID
         */
        public Builder identity(Optional<? extends String> identity) {
            Utils.checkNotNull(identity, "identity");
            this.identity = identity;
            return this;
        }

        /**
         * user defined participant name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * user defined participant name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * the time the participant joined
         */
        public Builder joinedAt(long joinedAt) {
            Utils.checkNotNull(joinedAt, "joinedAt");
            this.joinedAt = Optional.ofNullable(joinedAt);
            return this;
        }

        /**
         * the time the participant joined
         */
        public Builder joinedAt(Optional<? extends Long> joinedAt) {
            Utils.checkNotNull(joinedAt, "joinedAt");
            this.joinedAt = joinedAt;
            return this;
        }

        /**
         * the time the participant left
         */
        public Builder leftAt(long leftAt) {
            Utils.checkNotNull(leftAt, "leftAt");
            this.leftAt = Optional.ofNullable(leftAt);
            return this;
        }

        /**
         * the time the participant left
         */
        public Builder leftAt(Optional<? extends Long> leftAt) {
            Utils.checkNotNull(leftAt, "leftAt");
            this.leftAt = leftAt;
            return this;
        }
        
        public Participants build() {
            return new Participants(
                identity,
                name,
                joinedAt,
                leftAt);
        }
    }
}

