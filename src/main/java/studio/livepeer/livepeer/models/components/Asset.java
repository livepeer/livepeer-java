/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import studio.livepeer.livepeer.utils.Utils;

public class Asset {

    @JsonProperty("id")
    private String id;

    /**
     * Type of the asset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AssetType> type;

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackId")
    private Optional<? extends String> playbackId;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    @Deprecated
    private Optional<? extends String> userId;

    /**
     * URL for HLS playback. **It is recommended to not use this URL**, and instead use playback IDs with the Playback Info endpoint to retrieve the playback URLs - this URL format is subject to change (e.g. https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackUrl")
    private Optional<? extends String> playbackUrl;

    /**
     * The URL to directly download the asset, e.g. `https://livepeercdn.com/asset/eawrrk06ts2d0mzb/video`. It is not recommended to use this for playback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadUrl")
    private Optional<? extends String> downloadUrl;

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackPolicy")
    private JsonNullable<? extends PlaybackPolicy> playbackPolicy;

    @JsonProperty("source")
    private Source source;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorId")
    private Optional<? extends CreatorId> creatorId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage")
    private Optional<? extends AssetStorage> storage;

    /**
     * Status of the asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AssetStatus> status;

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    @JsonProperty("name")
    private String name;

    /**
     * The ID of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectId")
    private Optional<? extends String> projectId;

    /**
     * Timestamp (in milliseconds) at which asset was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<? extends Double> createdAt;

    /**
     * Name of the token used to create this object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdByTokenName")
    private Optional<? extends String> createdByTokenName;

    /**
     * Size of the asset in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Double> size;

    /**
     * Hash of the asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hash")
    private JsonNullable<? extends java.util.List<Hash>> hash;

    /**
     * Video metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoSpec")
    private Optional<? extends VideoSpec> videoSpec;

    @JsonCreator
    public Asset(
            @JsonProperty("id") String id,
            @JsonProperty("type") Optional<? extends AssetType> type,
            @JsonProperty("playbackId") Optional<? extends String> playbackId,
            @JsonProperty("userId") Optional<? extends String> userId,
            @JsonProperty("playbackUrl") Optional<? extends String> playbackUrl,
            @JsonProperty("downloadUrl") Optional<? extends String> downloadUrl,
            @JsonProperty("playbackPolicy") JsonNullable<? extends PlaybackPolicy> playbackPolicy,
            @JsonProperty("source") Source source,
            @JsonProperty("creatorId") Optional<? extends CreatorId> creatorId,
            @JsonProperty("storage") Optional<? extends AssetStorage> storage,
            @JsonProperty("status") Optional<? extends AssetStatus> status,
            @JsonProperty("name") String name,
            @JsonProperty("projectId") Optional<? extends String> projectId,
            @JsonProperty("createdAt") Optional<? extends Double> createdAt,
            @JsonProperty("createdByTokenName") Optional<? extends String> createdByTokenName,
            @JsonProperty("size") Optional<? extends Double> size,
            @JsonProperty("hash") JsonNullable<? extends java.util.List<Hash>> hash,
            @JsonProperty("videoSpec") Optional<? extends VideoSpec> videoSpec) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(playbackId, "playbackId");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(playbackUrl, "playbackUrl");
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(storage, "storage");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdByTokenName, "createdByTokenName");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(hash, "hash");
        Utils.checkNotNull(videoSpec, "videoSpec");
        this.id = id;
        this.type = type;
        this.playbackId = playbackId;
        this.userId = userId;
        this.playbackUrl = playbackUrl;
        this.downloadUrl = downloadUrl;
        this.playbackPolicy = playbackPolicy;
        this.source = source;
        this.creatorId = creatorId;
        this.storage = storage;
        this.status = status;
        this.name = name;
        this.projectId = projectId;
        this.createdAt = createdAt;
        this.createdByTokenName = createdByTokenName;
        this.size = size;
        this.hash = hash;
        this.videoSpec = videoSpec;
    }
    
    public Asset(
            String id,
            Source source,
            String name) {
        this(id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), source, Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Type of the asset.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AssetType> type() {
        return (Optional<AssetType>) type;
    }

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> playbackId() {
        return (Optional<String>) playbackId;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> userId() {
        return (Optional<String>) userId;
    }

    /**
     * URL for HLS playback. **It is recommended to not use this URL**, and instead use playback IDs with the Playback Info endpoint to retrieve the playback URLs - this URL format is subject to change (e.g. https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> playbackUrl() {
        return (Optional<String>) playbackUrl;
    }

    /**
     * The URL to directly download the asset, e.g. `https://livepeercdn.com/asset/eawrrk06ts2d0mzb/video`. It is not recommended to use this for playback.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> downloadUrl() {
        return (Optional<String>) downloadUrl;
    }

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlaybackPolicy> playbackPolicy() {
        return (JsonNullable<PlaybackPolicy>) playbackPolicy;
    }

    @JsonIgnore
    public Source source() {
        return source;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatorId> creatorId() {
        return (Optional<CreatorId>) creatorId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AssetStorage> storage() {
        return (Optional<AssetStorage>) storage;
    }

    /**
     * Status of the asset
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AssetStatus> status() {
        return (Optional<AssetStatus>) status;
    }

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The ID of the project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> projectId() {
        return (Optional<String>) projectId;
    }

    /**
     * Timestamp (in milliseconds) at which asset was created
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> createdAt() {
        return (Optional<Double>) createdAt;
    }

    /**
     * Name of the token used to create this object
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> createdByTokenName() {
        return (Optional<String>) createdByTokenName;
    }

    /**
     * Size of the asset in bytes
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> size() {
        return (Optional<Double>) size;
    }

    /**
     * Hash of the asset
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<java.util.List<Hash>> hash() {
        return (JsonNullable<java.util.List<Hash>>) hash;
    }

    /**
     * Video metadata
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VideoSpec> videoSpec() {
        return (Optional<VideoSpec>) videoSpec;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Asset withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Type of the asset.
     */
    public Asset withType(AssetType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of the asset.
     */
    public Asset withType(Optional<? extends AssetType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    public Asset withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = Optional.ofNullable(playbackId);
        return this;
    }

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    public Asset withPlaybackId(Optional<? extends String> playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Asset withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Asset withUserId(Optional<? extends String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * URL for HLS playback. **It is recommended to not use this URL**, and instead use playback IDs with the Playback Info endpoint to retrieve the playback URLs - this URL format is subject to change (e.g. https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8).
     */
    public Asset withPlaybackUrl(String playbackUrl) {
        Utils.checkNotNull(playbackUrl, "playbackUrl");
        this.playbackUrl = Optional.ofNullable(playbackUrl);
        return this;
    }

    /**
     * URL for HLS playback. **It is recommended to not use this URL**, and instead use playback IDs with the Playback Info endpoint to retrieve the playback URLs - this URL format is subject to change (e.g. https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8).
     */
    public Asset withPlaybackUrl(Optional<? extends String> playbackUrl) {
        Utils.checkNotNull(playbackUrl, "playbackUrl");
        this.playbackUrl = playbackUrl;
        return this;
    }

    /**
     * The URL to directly download the asset, e.g. `https://livepeercdn.com/asset/eawrrk06ts2d0mzb/video`. It is not recommended to use this for playback.
     */
    public Asset withDownloadUrl(String downloadUrl) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        this.downloadUrl = Optional.ofNullable(downloadUrl);
        return this;
    }

    /**
     * The URL to directly download the asset, e.g. `https://livepeercdn.com/asset/eawrrk06ts2d0mzb/video`. It is not recommended to use this for playback.
     */
    public Asset withDownloadUrl(Optional<? extends String> downloadUrl) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        this.downloadUrl = downloadUrl;
        return this;
    }

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    public Asset withPlaybackPolicy(PlaybackPolicy playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = JsonNullable.of(playbackPolicy);
        return this;
    }

    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    public Asset withPlaybackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = playbackPolicy;
        return this;
    }

    public Asset withSource(Source source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public Asset withCreatorId(CreatorId creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = Optional.ofNullable(creatorId);
        return this;
    }

    public Asset withCreatorId(Optional<? extends CreatorId> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    public Asset withStorage(AssetStorage storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = Optional.ofNullable(storage);
        return this;
    }

    public Asset withStorage(Optional<? extends AssetStorage> storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = storage;
        return this;
    }

    /**
     * Status of the asset
     */
    public Asset withStatus(AssetStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of the asset
     */
    public Asset withStatus(Optional<? extends AssetStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    public Asset withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the project
     */
    public Asset withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = Optional.ofNullable(projectId);
        return this;
    }

    /**
     * The ID of the project
     */
    public Asset withProjectId(Optional<? extends String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which asset was created
     */
    public Asset withCreatedAt(double createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which asset was created
     */
    public Asset withCreatedAt(Optional<? extends Double> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Name of the token used to create this object
     */
    public Asset withCreatedByTokenName(String createdByTokenName) {
        Utils.checkNotNull(createdByTokenName, "createdByTokenName");
        this.createdByTokenName = Optional.ofNullable(createdByTokenName);
        return this;
    }

    /**
     * Name of the token used to create this object
     */
    public Asset withCreatedByTokenName(Optional<? extends String> createdByTokenName) {
        Utils.checkNotNull(createdByTokenName, "createdByTokenName");
        this.createdByTokenName = createdByTokenName;
        return this;
    }

    /**
     * Size of the asset in bytes
     */
    public Asset withSize(double size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Size of the asset in bytes
     */
    public Asset withSize(Optional<? extends Double> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Hash of the asset
     */
    public Asset withHash(java.util.List<Hash> hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = JsonNullable.of(hash);
        return this;
    }

    /**
     * Hash of the asset
     */
    public Asset withHash(JsonNullable<? extends java.util.List<Hash>> hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = hash;
        return this;
    }

    /**
     * Video metadata
     */
    public Asset withVideoSpec(VideoSpec videoSpec) {
        Utils.checkNotNull(videoSpec, "videoSpec");
        this.videoSpec = Optional.ofNullable(videoSpec);
        return this;
    }

    /**
     * Video metadata
     */
    public Asset withVideoSpec(Optional<? extends VideoSpec> videoSpec) {
        Utils.checkNotNull(videoSpec, "videoSpec");
        this.videoSpec = videoSpec;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Asset other = (Asset) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.playbackId, other.playbackId) &&
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.playbackUrl, other.playbackUrl) &&
            java.util.Objects.deepEquals(this.downloadUrl, other.downloadUrl) &&
            java.util.Objects.deepEquals(this.playbackPolicy, other.playbackPolicy) &&
            java.util.Objects.deepEquals(this.source, other.source) &&
            java.util.Objects.deepEquals(this.creatorId, other.creatorId) &&
            java.util.Objects.deepEquals(this.storage, other.storage) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.projectId, other.projectId) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.createdByTokenName, other.createdByTokenName) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.hash, other.hash) &&
            java.util.Objects.deepEquals(this.videoSpec, other.videoSpec);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            type,
            playbackId,
            userId,
            playbackUrl,
            downloadUrl,
            playbackPolicy,
            source,
            creatorId,
            storage,
            status,
            name,
            projectId,
            createdAt,
            createdByTokenName,
            size,
            hash,
            videoSpec);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Asset.class,
                "id", id,
                "type", type,
                "playbackId", playbackId,
                "userId", userId,
                "playbackUrl", playbackUrl,
                "downloadUrl", downloadUrl,
                "playbackPolicy", playbackPolicy,
                "source", source,
                "creatorId", creatorId,
                "storage", storage,
                "status", status,
                "name", name,
                "projectId", projectId,
                "createdAt", createdAt,
                "createdByTokenName", createdByTokenName,
                "size", size,
                "hash", hash,
                "videoSpec", videoSpec);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<? extends AssetType> type = Optional.empty();
 
        private Optional<? extends String> playbackId = Optional.empty();
 
        @Deprecated
        private Optional<? extends String> userId = Optional.empty();
 
        private Optional<? extends String> playbackUrl = Optional.empty();
 
        private Optional<? extends String> downloadUrl = Optional.empty();
 
        private JsonNullable<? extends PlaybackPolicy> playbackPolicy = JsonNullable.undefined();
 
        private Source source;
 
        private Optional<? extends CreatorId> creatorId = Optional.empty();
 
        private Optional<? extends AssetStorage> storage = Optional.empty();
 
        private Optional<? extends AssetStatus> status = Optional.empty();
 
        private String name;
 
        private Optional<? extends String> projectId = Optional.empty();
 
        private Optional<? extends Double> createdAt = Optional.empty();
 
        private Optional<? extends String> createdByTokenName = Optional.empty();
 
        private Optional<? extends Double> size = Optional.empty();
 
        private JsonNullable<? extends java.util.List<Hash>> hash = JsonNullable.undefined();
 
        private Optional<? extends VideoSpec> videoSpec = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Type of the asset.
         */
        public Builder type(AssetType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of the asset.
         */
        public Builder type(Optional<? extends AssetType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = Optional.ofNullable(playbackId);
            return this;
        }

        /**
         * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
         */
        public Builder playbackId(Optional<? extends String> playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder userId(Optional<? extends String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * URL for HLS playback. **It is recommended to not use this URL**, and instead use playback IDs with the Playback Info endpoint to retrieve the playback URLs - this URL format is subject to change (e.g. https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8).
         */
        public Builder playbackUrl(String playbackUrl) {
            Utils.checkNotNull(playbackUrl, "playbackUrl");
            this.playbackUrl = Optional.ofNullable(playbackUrl);
            return this;
        }

        /**
         * URL for HLS playback. **It is recommended to not use this URL**, and instead use playback IDs with the Playback Info endpoint to retrieve the playback URLs - this URL format is subject to change (e.g. https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8).
         */
        public Builder playbackUrl(Optional<? extends String> playbackUrl) {
            Utils.checkNotNull(playbackUrl, "playbackUrl");
            this.playbackUrl = playbackUrl;
            return this;
        }

        /**
         * The URL to directly download the asset, e.g. `https://livepeercdn.com/asset/eawrrk06ts2d0mzb/video`. It is not recommended to use this for playback.
         */
        public Builder downloadUrl(String downloadUrl) {
            Utils.checkNotNull(downloadUrl, "downloadUrl");
            this.downloadUrl = Optional.ofNullable(downloadUrl);
            return this;
        }

        /**
         * The URL to directly download the asset, e.g. `https://livepeercdn.com/asset/eawrrk06ts2d0mzb/video`. It is not recommended to use this for playback.
         */
        public Builder downloadUrl(Optional<? extends String> downloadUrl) {
            Utils.checkNotNull(downloadUrl, "downloadUrl");
            this.downloadUrl = downloadUrl;
            return this;
        }

        /**
         * Whether the playback policy for an asset or stream is public or signed
         */
        public Builder playbackPolicy(PlaybackPolicy playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = JsonNullable.of(playbackPolicy);
            return this;
        }

        /**
         * Whether the playback policy for an asset or stream is public or signed
         */
        public Builder playbackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = playbackPolicy;
            return this;
        }

        public Builder source(Source source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder creatorId(CreatorId creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = Optional.ofNullable(creatorId);
            return this;
        }

        public Builder creatorId(Optional<? extends CreatorId> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        public Builder storage(AssetStorage storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = Optional.ofNullable(storage);
            return this;
        }

        public Builder storage(Optional<? extends AssetStorage> storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = storage;
            return this;
        }

        /**
         * Status of the asset
         */
        public Builder status(AssetStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the asset
         */
        public Builder status(Optional<? extends AssetStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
         * 
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = Optional.ofNullable(projectId);
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(Optional<? extends String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which asset was created
         */
        public Builder createdAt(double createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which asset was created
         */
        public Builder createdAt(Optional<? extends Double> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Name of the token used to create this object
         */
        public Builder createdByTokenName(String createdByTokenName) {
            Utils.checkNotNull(createdByTokenName, "createdByTokenName");
            this.createdByTokenName = Optional.ofNullable(createdByTokenName);
            return this;
        }

        /**
         * Name of the token used to create this object
         */
        public Builder createdByTokenName(Optional<? extends String> createdByTokenName) {
            Utils.checkNotNull(createdByTokenName, "createdByTokenName");
            this.createdByTokenName = createdByTokenName;
            return this;
        }

        /**
         * Size of the asset in bytes
         */
        public Builder size(double size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Size of the asset in bytes
         */
        public Builder size(Optional<? extends Double> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Hash of the asset
         */
        public Builder hash(java.util.List<Hash> hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = JsonNullable.of(hash);
            return this;
        }

        /**
         * Hash of the asset
         */
        public Builder hash(JsonNullable<? extends java.util.List<Hash>> hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = hash;
            return this;
        }

        /**
         * Video metadata
         */
        public Builder videoSpec(VideoSpec videoSpec) {
            Utils.checkNotNull(videoSpec, "videoSpec");
            this.videoSpec = Optional.ofNullable(videoSpec);
            return this;
        }

        /**
         * Video metadata
         */
        public Builder videoSpec(Optional<? extends VideoSpec> videoSpec) {
            Utils.checkNotNull(videoSpec, "videoSpec");
            this.videoSpec = videoSpec;
            return this;
        }
        
        public Asset build() {
            return new Asset(
                id,
                type,
                playbackId,
                userId,
                playbackUrl,
                downloadUrl,
                playbackPolicy,
                source,
                creatorId,
                storage,
                status,
                name,
                projectId,
                createdAt,
                createdByTokenName,
                size,
                hash,
                videoSpec);
        }
    }
}

