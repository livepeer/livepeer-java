/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Room {

    /**
     * room ID
     */
    @JsonProperty("id")
    private String id;

    /**
     * Timestamp (in milliseconds) at which the room was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Double> createdAt;

    /**
     * Timestamp (in milliseconds) at which room was updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<Double> updatedAt;

    /**
     * internal ID for egress output
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("egressId")
    private Optional<String> egressId;

    @JsonProperty("participants")
    private Map<String, Participants> participants;

    @JsonCreator
    public Room(
            @JsonProperty("id") String id,
            @JsonProperty("createdAt") Optional<Double> createdAt,
            @JsonProperty("updatedAt") Optional<Double> updatedAt,
            @JsonProperty("egressId") Optional<String> egressId,
            @JsonProperty("participants") Map<String, Participants> participants) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(egressId, "egressId");
        participants = Utils.emptyMapIfNull(participants);
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.egressId = egressId;
        this.participants = participants;
    }
    
    public Room(
            String id,
            Map<String, Participants> participants) {
        this(id, Optional.empty(), Optional.empty(), Optional.empty(), participants);
    }

    /**
     * room ID
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Timestamp (in milliseconds) at which the room was created
     */
    @JsonIgnore
    public Optional<Double> createdAt() {
        return createdAt;
    }

    /**
     * Timestamp (in milliseconds) at which room was updated
     */
    @JsonIgnore
    public Optional<Double> updatedAt() {
        return updatedAt;
    }

    /**
     * internal ID for egress output
     */
    @JsonIgnore
    public Optional<String> egressId() {
        return egressId;
    }

    @JsonIgnore
    public Map<String, Participants> participants() {
        return participants;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * room ID
     */
    public Room withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the room was created
     */
    public Room withCreatedAt(double createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the room was created
     */
    public Room withCreatedAt(Optional<Double> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which room was updated
     */
    public Room withUpdatedAt(double updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which room was updated
     */
    public Room withUpdatedAt(Optional<Double> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * internal ID for egress output
     */
    public Room withEgressId(String egressId) {
        Utils.checkNotNull(egressId, "egressId");
        this.egressId = Optional.ofNullable(egressId);
        return this;
    }

    /**
     * internal ID for egress output
     */
    public Room withEgressId(Optional<String> egressId) {
        Utils.checkNotNull(egressId, "egressId");
        this.egressId = egressId;
        return this;
    }

    public Room withParticipants(Map<String, Participants> participants) {
        Utils.checkNotNull(participants, "participants");
        this.participants = participants;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Room other = (Room) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.egressId, other.egressId) &&
            Objects.deepEquals(this.participants, other.participants);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            createdAt,
            updatedAt,
            egressId,
            participants);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Room.class,
                "id", id,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "egressId", egressId,
                "participants", participants);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<Double> createdAt = Optional.empty();
 
        private Optional<Double> updatedAt = Optional.empty();
 
        private Optional<String> egressId = Optional.empty();
 
        private Map<String, Participants> participants;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * room ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the room was created
         */
        public Builder createdAt(double createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the room was created
         */
        public Builder createdAt(Optional<Double> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which room was updated
         */
        public Builder updatedAt(double updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which room was updated
         */
        public Builder updatedAt(Optional<Double> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * internal ID for egress output
         */
        public Builder egressId(String egressId) {
            Utils.checkNotNull(egressId, "egressId");
            this.egressId = Optional.ofNullable(egressId);
            return this;
        }

        /**
         * internal ID for egress output
         */
        public Builder egressId(Optional<String> egressId) {
            Utils.checkNotNull(egressId, "egressId");
            this.egressId = egressId;
            return this;
        }

        public Builder participants(Map<String, Participants> participants) {
            Utils.checkNotNull(participants, "participants");
            this.participants = participants;
            return this;
        }
        
        public Room build() {
            return new Room(
                id,
                createdAt,
                updatedAt,
                egressId,
                participants);
        }
    }
}

