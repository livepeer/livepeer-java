/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class AttestationStorage {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipfs")
    private Optional<? extends AttestationIpfs> ipfs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends StorageStatus> status;

    @JsonCreator
    public AttestationStorage(
            @JsonProperty("ipfs") Optional<? extends AttestationIpfs> ipfs,
            @JsonProperty("status") Optional<? extends StorageStatus> status) {
        Utils.checkNotNull(ipfs, "ipfs");
        Utils.checkNotNull(status, "status");
        this.ipfs = ipfs;
        this.status = status;
    }
    
    public AttestationStorage() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AttestationIpfs> ipfs() {
        return (Optional<AttestationIpfs>) ipfs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StorageStatus> status() {
        return (Optional<StorageStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AttestationStorage withIpfs(AttestationIpfs ipfs) {
        Utils.checkNotNull(ipfs, "ipfs");
        this.ipfs = Optional.ofNullable(ipfs);
        return this;
    }

    public AttestationStorage withIpfs(Optional<? extends AttestationIpfs> ipfs) {
        Utils.checkNotNull(ipfs, "ipfs");
        this.ipfs = ipfs;
        return this;
    }

    public AttestationStorage withStatus(StorageStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public AttestationStorage withStatus(Optional<? extends StorageStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AttestationStorage other = (AttestationStorage) o;
        return 
            java.util.Objects.deepEquals(this.ipfs, other.ipfs) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ipfs,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AttestationStorage.class,
                "ipfs", ipfs,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends AttestationIpfs> ipfs = Optional.empty();
 
        private Optional<? extends StorageStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ipfs(AttestationIpfs ipfs) {
            Utils.checkNotNull(ipfs, "ipfs");
            this.ipfs = Optional.ofNullable(ipfs);
            return this;
        }

        public Builder ipfs(Optional<? extends AttestationIpfs> ipfs) {
            Utils.checkNotNull(ipfs, "ipfs");
            this.ipfs = ipfs;
            return this;
        }

        public Builder status(StorageStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends StorageStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public AttestationStorage build() {
            return new AttestationStorage(
                ipfs,
                status);
        }
    }
}

