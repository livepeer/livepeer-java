/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class IpfsFileInfo {

    /**
     * CID of the file on IPFS
     */
    @JsonProperty("cid")
    private String cid;

    /**
     * URL with IPFS scheme for the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<? extends String> url;

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayUrl")
    private Optional<? extends String> gatewayUrl;

    @JsonCreator
    public IpfsFileInfo(
            @JsonProperty("cid") String cid,
            @JsonProperty("url") Optional<? extends String> url,
            @JsonProperty("gatewayUrl") Optional<? extends String> gatewayUrl) {
        Utils.checkNotNull(cid, "cid");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(gatewayUrl, "gatewayUrl");
        this.cid = cid;
        this.url = url;
        this.gatewayUrl = gatewayUrl;
    }
    
    public IpfsFileInfo(
            String cid) {
        this(cid, Optional.empty(), Optional.empty());
    }

    /**
     * CID of the file on IPFS
     */
    @JsonIgnore
    public String cid() {
        return cid;
    }

    /**
     * URL with IPFS scheme for the file
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> url() {
        return (Optional<String>) url;
    }

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gatewayUrl() {
        return (Optional<String>) gatewayUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * CID of the file on IPFS
     */
    public IpfsFileInfo withCid(String cid) {
        Utils.checkNotNull(cid, "cid");
        this.cid = cid;
        return this;
    }

    /**
     * URL with IPFS scheme for the file
     */
    public IpfsFileInfo withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * URL with IPFS scheme for the file
     */
    public IpfsFileInfo withUrl(Optional<? extends String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    public IpfsFileInfo withGatewayUrl(String gatewayUrl) {
        Utils.checkNotNull(gatewayUrl, "gatewayUrl");
        this.gatewayUrl = Optional.ofNullable(gatewayUrl);
        return this;
    }

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    public IpfsFileInfo withGatewayUrl(Optional<? extends String> gatewayUrl) {
        Utils.checkNotNull(gatewayUrl, "gatewayUrl");
        this.gatewayUrl = gatewayUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IpfsFileInfo other = (IpfsFileInfo) o;
        return 
            java.util.Objects.deepEquals(this.cid, other.cid) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.gatewayUrl, other.gatewayUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            cid,
            url,
            gatewayUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IpfsFileInfo.class,
                "cid", cid,
                "url", url,
                "gatewayUrl", gatewayUrl);
    }
    
    public final static class Builder {
 
        private String cid;
 
        private Optional<? extends String> url = Optional.empty();
 
        private Optional<? extends String> gatewayUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * CID of the file on IPFS
         */
        public Builder cid(String cid) {
            Utils.checkNotNull(cid, "cid");
            this.cid = cid;
            return this;
        }

        /**
         * URL with IPFS scheme for the file
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * URL with IPFS scheme for the file
         */
        public Builder url(Optional<? extends String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * URL to access file via HTTP through an IPFS gateway
         */
        public Builder gatewayUrl(String gatewayUrl) {
            Utils.checkNotNull(gatewayUrl, "gatewayUrl");
            this.gatewayUrl = Optional.ofNullable(gatewayUrl);
            return this;
        }

        /**
         * URL to access file via HTTP through an IPFS gateway
         */
        public Builder gatewayUrl(Optional<? extends String> gatewayUrl) {
            Utils.checkNotNull(gatewayUrl, "gatewayUrl");
            this.gatewayUrl = gatewayUrl;
            return this;
        }
        
        public IpfsFileInfo build() {
            return new IpfsFileInfo(
                cid,
                url,
                gatewayUrl);
        }
    }
}

