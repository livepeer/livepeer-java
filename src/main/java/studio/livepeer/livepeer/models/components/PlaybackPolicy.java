/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * PlaybackPolicy - Whether the playback policy for a asset or stream is public or signed
 */

public class PlaybackPolicy {

    @JsonProperty("type")
    private Type type;

    /**
     * ID of the webhook to use for playback policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookId")
    private Optional<? extends String> webhookId;

    /**
     * User-defined webhook context
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookContext")
    private Optional<? extends java.util.Map<String, java.lang.Object>> webhookContext;

    /**
     * Interval (in seconds) at which the playback policy should be
     * refreshed (default 600 seconds)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshInterval")
    private Optional<? extends Double> refreshInterval;

    /**
     * List of allowed origins for CORS playback (&lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt;, &lt;scheme&gt;://&lt;hostname&gt;)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedOrigins")
    private Optional<? extends java.util.List<String>> allowedOrigins;

    @JsonCreator
    public PlaybackPolicy(
            @JsonProperty("type") Type type,
            @JsonProperty("webhookId") Optional<? extends String> webhookId,
            @JsonProperty("webhookContext") Optional<? extends java.util.Map<String, java.lang.Object>> webhookContext,
            @JsonProperty("refreshInterval") Optional<? extends Double> refreshInterval,
            @JsonProperty("allowedOrigins") Optional<? extends java.util.List<String>> allowedOrigins) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(webhookId, "webhookId");
        Utils.checkNotNull(webhookContext, "webhookContext");
        Utils.checkNotNull(refreshInterval, "refreshInterval");
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.type = type;
        this.webhookId = webhookId;
        this.webhookContext = webhookContext;
        this.refreshInterval = refreshInterval;
        this.allowedOrigins = allowedOrigins;
    }
    
    public PlaybackPolicy(
            Type type) {
        this(type, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Type type() {
        return type;
    }

    /**
     * ID of the webhook to use for playback policy
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> webhookId() {
        return (Optional<String>) webhookId;
    }

    /**
     * User-defined webhook context
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.Map<String, java.lang.Object>> webhookContext() {
        return (Optional<java.util.Map<String, java.lang.Object>>) webhookContext;
    }

    /**
     * Interval (in seconds) at which the playback policy should be
     * refreshed (default 600 seconds)
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> refreshInterval() {
        return (Optional<Double>) refreshInterval;
    }

    /**
     * List of allowed origins for CORS playback (&lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt;, &lt;scheme&gt;://&lt;hostname&gt;)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> allowedOrigins() {
        return (Optional<java.util.List<String>>) allowedOrigins;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PlaybackPolicy withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * ID of the webhook to use for playback policy
     */
    public PlaybackPolicy withWebhookId(String webhookId) {
        Utils.checkNotNull(webhookId, "webhookId");
        this.webhookId = Optional.ofNullable(webhookId);
        return this;
    }

    /**
     * ID of the webhook to use for playback policy
     */
    public PlaybackPolicy withWebhookId(Optional<? extends String> webhookId) {
        Utils.checkNotNull(webhookId, "webhookId");
        this.webhookId = webhookId;
        return this;
    }

    /**
     * User-defined webhook context
     */
    public PlaybackPolicy withWebhookContext(java.util.Map<String, java.lang.Object> webhookContext) {
        Utils.checkNotNull(webhookContext, "webhookContext");
        this.webhookContext = Optional.ofNullable(webhookContext);
        return this;
    }

    /**
     * User-defined webhook context
     */
    public PlaybackPolicy withWebhookContext(Optional<? extends java.util.Map<String, java.lang.Object>> webhookContext) {
        Utils.checkNotNull(webhookContext, "webhookContext");
        this.webhookContext = webhookContext;
        return this;
    }

    /**
     * Interval (in seconds) at which the playback policy should be
     * refreshed (default 600 seconds)
     * 
     */
    public PlaybackPolicy withRefreshInterval(double refreshInterval) {
        Utils.checkNotNull(refreshInterval, "refreshInterval");
        this.refreshInterval = Optional.ofNullable(refreshInterval);
        return this;
    }

    /**
     * Interval (in seconds) at which the playback policy should be
     * refreshed (default 600 seconds)
     * 
     */
    public PlaybackPolicy withRefreshInterval(Optional<? extends Double> refreshInterval) {
        Utils.checkNotNull(refreshInterval, "refreshInterval");
        this.refreshInterval = refreshInterval;
        return this;
    }

    /**
     * List of allowed origins for CORS playback (&lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt;, &lt;scheme&gt;://&lt;hostname&gt;)
     */
    public PlaybackPolicy withAllowedOrigins(java.util.List<String> allowedOrigins) {
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.allowedOrigins = Optional.ofNullable(allowedOrigins);
        return this;
    }

    /**
     * List of allowed origins for CORS playback (&lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt;, &lt;scheme&gt;://&lt;hostname&gt;)
     */
    public PlaybackPolicy withAllowedOrigins(Optional<? extends java.util.List<String>> allowedOrigins) {
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.allowedOrigins = allowedOrigins;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlaybackPolicy other = (PlaybackPolicy) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.webhookId, other.webhookId) &&
            java.util.Objects.deepEquals(this.webhookContext, other.webhookContext) &&
            java.util.Objects.deepEquals(this.refreshInterval, other.refreshInterval) &&
            java.util.Objects.deepEquals(this.allowedOrigins, other.allowedOrigins);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            webhookId,
            webhookContext,
            refreshInterval,
            allowedOrigins);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PlaybackPolicy.class,
                "type", type,
                "webhookId", webhookId,
                "webhookContext", webhookContext,
                "refreshInterval", refreshInterval,
                "allowedOrigins", allowedOrigins);
    }
    
    public final static class Builder {
 
        private Type type;
 
        private Optional<? extends String> webhookId = Optional.empty();
 
        private Optional<? extends java.util.Map<String, java.lang.Object>> webhookContext = Optional.empty();
 
        private Optional<? extends Double> refreshInterval = Optional.empty();
 
        private Optional<? extends java.util.List<String>> allowedOrigins = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * ID of the webhook to use for playback policy
         */
        public Builder webhookId(String webhookId) {
            Utils.checkNotNull(webhookId, "webhookId");
            this.webhookId = Optional.ofNullable(webhookId);
            return this;
        }

        /**
         * ID of the webhook to use for playback policy
         */
        public Builder webhookId(Optional<? extends String> webhookId) {
            Utils.checkNotNull(webhookId, "webhookId");
            this.webhookId = webhookId;
            return this;
        }

        /**
         * User-defined webhook context
         */
        public Builder webhookContext(java.util.Map<String, java.lang.Object> webhookContext) {
            Utils.checkNotNull(webhookContext, "webhookContext");
            this.webhookContext = Optional.ofNullable(webhookContext);
            return this;
        }

        /**
         * User-defined webhook context
         */
        public Builder webhookContext(Optional<? extends java.util.Map<String, java.lang.Object>> webhookContext) {
            Utils.checkNotNull(webhookContext, "webhookContext");
            this.webhookContext = webhookContext;
            return this;
        }

        /**
         * Interval (in seconds) at which the playback policy should be
         * refreshed (default 600 seconds)
         * 
         */
        public Builder refreshInterval(double refreshInterval) {
            Utils.checkNotNull(refreshInterval, "refreshInterval");
            this.refreshInterval = Optional.ofNullable(refreshInterval);
            return this;
        }

        /**
         * Interval (in seconds) at which the playback policy should be
         * refreshed (default 600 seconds)
         * 
         */
        public Builder refreshInterval(Optional<? extends Double> refreshInterval) {
            Utils.checkNotNull(refreshInterval, "refreshInterval");
            this.refreshInterval = refreshInterval;
            return this;
        }

        /**
         * List of allowed origins for CORS playback (&lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt;, &lt;scheme&gt;://&lt;hostname&gt;)
         */
        public Builder allowedOrigins(java.util.List<String> allowedOrigins) {
            Utils.checkNotNull(allowedOrigins, "allowedOrigins");
            this.allowedOrigins = Optional.ofNullable(allowedOrigins);
            return this;
        }

        /**
         * List of allowed origins for CORS playback (&lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt;, &lt;scheme&gt;://&lt;hostname&gt;)
         */
        public Builder allowedOrigins(Optional<? extends java.util.List<String>> allowedOrigins) {
            Utils.checkNotNull(allowedOrigins, "allowedOrigins");
            this.allowedOrigins = allowedOrigins;
            return this;
        }
        
        public PlaybackPolicy build() {
            return new PlaybackPolicy(
                type,
                webhookId,
                webhookContext,
                refreshInterval,
                allowedOrigins);
        }
    }
}

