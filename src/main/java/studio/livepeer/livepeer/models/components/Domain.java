/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.utils.Utils;

/**
 * Domain - Video Metadata EIP-712 domain
 */

public class Domain {

    @JsonProperty("name")
    private Name name;

    @JsonProperty("version")
    private Version version;

    @JsonCreator
    public Domain(
            @JsonProperty("name") Name name,
            @JsonProperty("version") Version version) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(version, "version");
        this.name = name;
        this.version = version;
    }

    @JsonIgnore
    public Name name() {
        return name;
    }

    @JsonIgnore
    public Version version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Domain withName(Name name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Domain withVersion(Version version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Domain other = (Domain) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Domain.class,
                "name", name,
                "version", version);
    }
    
    public final static class Builder {
 
        private Name name;
 
        private Version version;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(Name name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder version(Version version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public Domain build() {
            return new Domain(
                name,
                version);
        }
    }
}

