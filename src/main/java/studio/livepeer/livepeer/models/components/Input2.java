/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import studio.livepeer.livepeer.utils.Utils;
/**
 * Input2 - S3-like storage input video
 */

public class Input2 {

    /**
     * Type of service. This is optional and defaults to `url` if
     * ŚURL field is provided.
     * 
     */
    @JsonProperty("type")
    private InputType type;

    /**
     * Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)
     */
    @JsonProperty("endpoint")
    private String endpoint;

    /**
     * Bucket with input file
     */
    @JsonProperty("bucket")
    private String bucket;

    /**
     * Path to the input file inside the bucket
     */
    @JsonProperty("path")
    private String path;

    /**
     * Credentials for the private input video storage
     */
    @JsonProperty("credentials")
    private Credentials credentials;

    @JsonCreator
    public Input2(
            @JsonProperty("type") InputType type,
            @JsonProperty("endpoint") String endpoint,
            @JsonProperty("bucket") String bucket,
            @JsonProperty("path") String path,
            @JsonProperty("credentials") Credentials credentials) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(endpoint, "endpoint");
        Utils.checkNotNull(bucket, "bucket");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(credentials, "credentials");
        this.type = type;
        this.endpoint = endpoint;
        this.bucket = bucket;
        this.path = path;
        this.credentials = credentials;
    }

    /**
     * Type of service. This is optional and defaults to `url` if
     * ŚURL field is provided.
     * 
     */
    @JsonIgnore
    public InputType type() {
        return type;
    }

    /**
     * Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)
     */
    @JsonIgnore
    public String endpoint() {
        return endpoint;
    }

    /**
     * Bucket with input file
     */
    @JsonIgnore
    public String bucket() {
        return bucket;
    }

    /**
     * Path to the input file inside the bucket
     */
    @JsonIgnore
    public String path() {
        return path;
    }

    /**
     * Credentials for the private input video storage
     */
    @JsonIgnore
    public Credentials credentials() {
        return credentials;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of service. This is optional and defaults to `url` if
     * ŚURL field is provided.
     * 
     */
    public Input2 withType(InputType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)
     */
    public Input2 withEndpoint(String endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Bucket with input file
     */
    public Input2 withBucket(String bucket) {
        Utils.checkNotNull(bucket, "bucket");
        this.bucket = bucket;
        return this;
    }

    /**
     * Path to the input file inside the bucket
     */
    public Input2 withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * Credentials for the private input video storage
     */
    public Input2 withCredentials(Credentials credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Input2 other = (Input2) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.endpoint, other.endpoint) &&
            java.util.Objects.deepEquals(this.bucket, other.bucket) &&
            java.util.Objects.deepEquals(this.path, other.path) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            endpoint,
            bucket,
            path,
            credentials);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Input2.class,
                "type", type,
                "endpoint", endpoint,
                "bucket", bucket,
                "path", path,
                "credentials", credentials);
    }
    
    public final static class Builder {
 
        private InputType type;
 
        private String endpoint;
 
        private String bucket;
 
        private String path;
 
        private Credentials credentials;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of service. This is optional and defaults to `url` if
         * ŚURL field is provided.
         * 
         */
        public Builder type(InputType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)
         */
        public Builder endpoint(String endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = endpoint;
            return this;
        }

        /**
         * Bucket with input file
         */
        public Builder bucket(String bucket) {
            Utils.checkNotNull(bucket, "bucket");
            this.bucket = bucket;
            return this;
        }

        /**
         * Path to the input file inside the bucket
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        /**
         * Credentials for the private input video storage
         */
        public Builder credentials(Credentials credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }
        
        public Input2 build() {
            return new Input2(
                type,
                endpoint,
                bucket,
                path,
                credentials);
        }
    }
}

