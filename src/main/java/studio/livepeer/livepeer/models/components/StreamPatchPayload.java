/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import studio.livepeer.livepeer.utils.Utils;


public class StreamPatchPayload {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorId")
    private Optional<? extends InputCreatorId> creatorId;

    /**
     * Should this stream be recorded? Uses default settings. For more
     * customization, create and configure an object store.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record")
    private Optional<? extends Boolean> record;

    /**
     * If currently suspended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspended")
    private Optional<? extends Boolean> suspended;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multistream")
    private Optional<? extends Multistream> multistream;

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackPolicy")
    private JsonNullable<? extends PlaybackPolicy> playbackPolicy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profiles")
    private JsonNullable<? extends java.util.List<FfmpegProfile>> profiles;

    /**
     * User input tags associated with the stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userTags")
    private Optional<? extends java.util.Map<String, UserTags>> userTags;

    @JsonCreator
    public StreamPatchPayload(
            @JsonProperty("creatorId") Optional<? extends InputCreatorId> creatorId,
            @JsonProperty("record") Optional<? extends Boolean> record,
            @JsonProperty("suspended") Optional<? extends Boolean> suspended,
            @JsonProperty("multistream") Optional<? extends Multistream> multistream,
            @JsonProperty("playbackPolicy") JsonNullable<? extends PlaybackPolicy> playbackPolicy,
            @JsonProperty("profiles") JsonNullable<? extends java.util.List<FfmpegProfile>> profiles,
            @JsonProperty("userTags") Optional<? extends java.util.Map<String, UserTags>> userTags) {
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(record, "record");
        Utils.checkNotNull(suspended, "suspended");
        Utils.checkNotNull(multistream, "multistream");
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        Utils.checkNotNull(profiles, "profiles");
        Utils.checkNotNull(userTags, "userTags");
        this.creatorId = creatorId;
        this.record = record;
        this.suspended = suspended;
        this.multistream = multistream;
        this.playbackPolicy = playbackPolicy;
        this.profiles = profiles;
        this.userTags = userTags;
    }
    
    public StreamPatchPayload() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InputCreatorId> creatorId() {
        return (Optional<InputCreatorId>) creatorId;
    }

    /**
     * Should this stream be recorded? Uses default settings. For more
     * customization, create and configure an object store.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> record() {
        return (Optional<Boolean>) record;
    }

    /**
     * If currently suspended
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> suspended() {
        return (Optional<Boolean>) suspended;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Multistream> multistream() {
        return (Optional<Multistream>) multistream;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlaybackPolicy> playbackPolicy() {
        return (JsonNullable<PlaybackPolicy>) playbackPolicy;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<java.util.List<FfmpegProfile>> profiles() {
        return (JsonNullable<java.util.List<FfmpegProfile>>) profiles;
    }

    /**
     * User input tags associated with the stream
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.Map<String, UserTags>> userTags() {
        return (Optional<java.util.Map<String, UserTags>>) userTags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StreamPatchPayload withCreatorId(InputCreatorId creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = Optional.ofNullable(creatorId);
        return this;
    }

    public StreamPatchPayload withCreatorId(Optional<? extends InputCreatorId> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    /**
     * Should this stream be recorded? Uses default settings. For more
     * customization, create and configure an object store.
     * 
     */
    public StreamPatchPayload withRecord(boolean record) {
        Utils.checkNotNull(record, "record");
        this.record = Optional.ofNullable(record);
        return this;
    }

    /**
     * Should this stream be recorded? Uses default settings. For more
     * customization, create and configure an object store.
     * 
     */
    public StreamPatchPayload withRecord(Optional<? extends Boolean> record) {
        Utils.checkNotNull(record, "record");
        this.record = record;
        return this;
    }

    /**
     * If currently suspended
     */
    public StreamPatchPayload withSuspended(boolean suspended) {
        Utils.checkNotNull(suspended, "suspended");
        this.suspended = Optional.ofNullable(suspended);
        return this;
    }

    /**
     * If currently suspended
     */
    public StreamPatchPayload withSuspended(Optional<? extends Boolean> suspended) {
        Utils.checkNotNull(suspended, "suspended");
        this.suspended = suspended;
        return this;
    }

    public StreamPatchPayload withMultistream(Multistream multistream) {
        Utils.checkNotNull(multistream, "multistream");
        this.multistream = Optional.ofNullable(multistream);
        return this;
    }

    public StreamPatchPayload withMultistream(Optional<? extends Multistream> multistream) {
        Utils.checkNotNull(multistream, "multistream");
        this.multistream = multistream;
        return this;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    public StreamPatchPayload withPlaybackPolicy(PlaybackPolicy playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = JsonNullable.of(playbackPolicy);
        return this;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    public StreamPatchPayload withPlaybackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = playbackPolicy;
        return this;
    }

    public StreamPatchPayload withProfiles(java.util.List<FfmpegProfile> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = JsonNullable.of(profiles);
        return this;
    }

    public StreamPatchPayload withProfiles(JsonNullable<? extends java.util.List<FfmpegProfile>> profiles) {
        Utils.checkNotNull(profiles, "profiles");
        this.profiles = profiles;
        return this;
    }

    /**
     * User input tags associated with the stream
     */
    public StreamPatchPayload withUserTags(java.util.Map<String, UserTags> userTags) {
        Utils.checkNotNull(userTags, "userTags");
        this.userTags = Optional.ofNullable(userTags);
        return this;
    }

    /**
     * User input tags associated with the stream
     */
    public StreamPatchPayload withUserTags(Optional<? extends java.util.Map<String, UserTags>> userTags) {
        Utils.checkNotNull(userTags, "userTags");
        this.userTags = userTags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamPatchPayload other = (StreamPatchPayload) o;
        return 
            java.util.Objects.deepEquals(this.creatorId, other.creatorId) &&
            java.util.Objects.deepEquals(this.record, other.record) &&
            java.util.Objects.deepEquals(this.suspended, other.suspended) &&
            java.util.Objects.deepEquals(this.multistream, other.multistream) &&
            java.util.Objects.deepEquals(this.playbackPolicy, other.playbackPolicy) &&
            java.util.Objects.deepEquals(this.profiles, other.profiles) &&
            java.util.Objects.deepEquals(this.userTags, other.userTags);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            creatorId,
            record,
            suspended,
            multistream,
            playbackPolicy,
            profiles,
            userTags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreamPatchPayload.class,
                "creatorId", creatorId,
                "record", record,
                "suspended", suspended,
                "multistream", multistream,
                "playbackPolicy", playbackPolicy,
                "profiles", profiles,
                "userTags", userTags);
    }
    
    public final static class Builder {
 
        private Optional<? extends InputCreatorId> creatorId = Optional.empty();
 
        private Optional<? extends Boolean> record = Optional.empty();
 
        private Optional<? extends Boolean> suspended = Optional.empty();
 
        private Optional<? extends Multistream> multistream = Optional.empty();
 
        private JsonNullable<? extends PlaybackPolicy> playbackPolicy = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<FfmpegProfile>> profiles = JsonNullable.undefined();
 
        private Optional<? extends java.util.Map<String, UserTags>> userTags = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder creatorId(InputCreatorId creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = Optional.ofNullable(creatorId);
            return this;
        }

        public Builder creatorId(Optional<? extends InputCreatorId> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        /**
         * Should this stream be recorded? Uses default settings. For more
         * customization, create and configure an object store.
         * 
         */
        public Builder record(boolean record) {
            Utils.checkNotNull(record, "record");
            this.record = Optional.ofNullable(record);
            return this;
        }

        /**
         * Should this stream be recorded? Uses default settings. For more
         * customization, create and configure an object store.
         * 
         */
        public Builder record(Optional<? extends Boolean> record) {
            Utils.checkNotNull(record, "record");
            this.record = record;
            return this;
        }

        /**
         * If currently suspended
         */
        public Builder suspended(boolean suspended) {
            Utils.checkNotNull(suspended, "suspended");
            this.suspended = Optional.ofNullable(suspended);
            return this;
        }

        /**
         * If currently suspended
         */
        public Builder suspended(Optional<? extends Boolean> suspended) {
            Utils.checkNotNull(suspended, "suspended");
            this.suspended = suspended;
            return this;
        }

        public Builder multistream(Multistream multistream) {
            Utils.checkNotNull(multistream, "multistream");
            this.multistream = Optional.ofNullable(multistream);
            return this;
        }

        public Builder multistream(Optional<? extends Multistream> multistream) {
            Utils.checkNotNull(multistream, "multistream");
            this.multistream = multistream;
            return this;
        }

        /**
         * Whether the playback policy for a asset or stream is public or signed
         */
        public Builder playbackPolicy(PlaybackPolicy playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = JsonNullable.of(playbackPolicy);
            return this;
        }

        /**
         * Whether the playback policy for a asset or stream is public or signed
         */
        public Builder playbackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = playbackPolicy;
            return this;
        }

        public Builder profiles(java.util.List<FfmpegProfile> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = JsonNullable.of(profiles);
            return this;
        }

        public Builder profiles(JsonNullable<? extends java.util.List<FfmpegProfile>> profiles) {
            Utils.checkNotNull(profiles, "profiles");
            this.profiles = profiles;
            return this;
        }

        /**
         * User input tags associated with the stream
         */
        public Builder userTags(java.util.Map<String, UserTags> userTags) {
            Utils.checkNotNull(userTags, "userTags");
            this.userTags = Optional.ofNullable(userTags);
            return this;
        }

        /**
         * User input tags associated with the stream
         */
        public Builder userTags(Optional<? extends java.util.Map<String, UserTags>> userTags) {
            Utils.checkNotNull(userTags, "userTags");
            this.userTags = userTags;
            return this;
        }
        
        public StreamPatchPayload build() {
            return new StreamPatchPayload(
                creatorId,
                record,
                suspended,
                multistream,
                playbackPolicy,
                profiles,
                userTags);
        }
    }
}

