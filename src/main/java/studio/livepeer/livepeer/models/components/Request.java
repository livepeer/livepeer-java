/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Request {

    /**
     * URL used for the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * HTTP request method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<String> method;

    /**
     * HTTP request headers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    private Optional<? extends Map<String, String>> headers;

    /**
     * request body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<String> body;

    @JsonCreator
    public Request(
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("method") Optional<String> method,
            @JsonProperty("headers") Optional<? extends Map<String, String>> headers,
            @JsonProperty("body") Optional<String> body) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(headers, "headers");
        Utils.checkNotNull(body, "body");
        this.url = url;
        this.method = method;
        this.headers = headers;
        this.body = body;
    }
    
    public Request() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * URL used for the request
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * HTTP request method
     */
    @JsonIgnore
    public Optional<String> method() {
        return method;
    }

    /**
     * HTTP request headers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> headers() {
        return (Optional<Map<String, String>>) headers;
    }

    /**
     * request body
     */
    @JsonIgnore
    public Optional<String> body() {
        return body;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * URL used for the request
     */
    public Request withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * URL used for the request
     */
    public Request withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * HTTP request method
     */
    public Request withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }

    /**
     * HTTP request method
     */
    public Request withMethod(Optional<String> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * HTTP request headers
     */
    public Request withHeaders(Map<String, String> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = Optional.ofNullable(headers);
        return this;
    }

    /**
     * HTTP request headers
     */
    public Request withHeaders(Optional<? extends Map<String, String>> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = headers;
        return this;
    }

    /**
     * request body
     */
    public Request withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    /**
     * request body
     */
    public Request withBody(Optional<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Request other = (Request) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.headers, other.headers) &&
            Objects.deepEquals(this.body, other.body);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            method,
            headers,
            body);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Request.class,
                "url", url,
                "method", method,
                "headers", headers,
                "body", body);
    }
    
    public final static class Builder {
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> method = Optional.empty();
 
        private Optional<? extends Map<String, String>> headers = Optional.empty();
 
        private Optional<String> body = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL used for the request
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * URL used for the request
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * HTTP request method
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * HTTP request method
         */
        public Builder method(Optional<String> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * HTTP request headers
         */
        public Builder headers(Map<String, String> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = Optional.ofNullable(headers);
            return this;
        }

        /**
         * HTTP request headers
         */
        public Builder headers(Optional<? extends Map<String, String>> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = headers;
            return this;
        }

        /**
         * request body
         */
        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        /**
         * request body
         */
        public Builder body(Optional<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }
        
        public Request build() {
            return new Request(
                url,
                method,
                headers,
                body);
        }
    }
}

