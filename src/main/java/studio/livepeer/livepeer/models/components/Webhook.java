/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Webhook {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonProperty("name")
    private String name;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    @Deprecated
    private Optional<? extends String> kind;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    @Deprecated
    private Optional<? extends String> userId;

    /**
     * Timestamp (in milliseconds) at which stream object was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<? extends Double> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    private Optional<? extends java.util.List<Events>> events;

    @JsonProperty("url")
    private String url;

    /**
     * streamId of the stream on which the webhook is applied
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamId")
    private Optional<? extends String> streamId;

    /**
     * status of webhook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    @JsonCreator
    public Webhook(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") String name,
            @JsonProperty("kind") Optional<? extends String> kind,
            @JsonProperty("userId") Optional<? extends String> userId,
            @JsonProperty("createdAt") Optional<? extends Double> createdAt,
            @JsonProperty("events") Optional<? extends java.util.List<Events>> events,
            @JsonProperty("url") String url,
            @JsonProperty("streamId") Optional<? extends String> streamId,
            @JsonProperty("status") Optional<? extends Status> status) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(kind, "kind");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(events, "events");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(streamId, "streamId");
        Utils.checkNotNull(status, "status");
        this.id = id;
        this.name = name;
        this.kind = kind;
        this.userId = userId;
        this.createdAt = createdAt;
        this.events = events;
        this.url = url;
        this.streamId = streamId;
        this.status = status;
    }
    
    public Webhook(
            String name,
            String url) {
        this(Optional.empty(), name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), url, Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> kind() {
        return (Optional<String>) kind;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> userId() {
        return (Optional<String>) userId;
    }

    /**
     * Timestamp (in milliseconds) at which stream object was created
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> createdAt() {
        return (Optional<Double>) createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Events>> events() {
        return (Optional<java.util.List<Events>>) events;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * streamId of the stream on which the webhook is applied
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> streamId() {
        return (Optional<String>) streamId;
    }

    /**
     * status of webhook
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Webhook withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Webhook withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Webhook withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Webhook withKind(String kind) {
        Utils.checkNotNull(kind, "kind");
        this.kind = Optional.ofNullable(kind);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Webhook withKind(Optional<? extends String> kind) {
        Utils.checkNotNull(kind, "kind");
        this.kind = kind;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Webhook withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Webhook withUserId(Optional<? extends String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which stream object was created
     */
    public Webhook withCreatedAt(double createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which stream object was created
     */
    public Webhook withCreatedAt(Optional<? extends Double> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Webhook withEvents(java.util.List<Events> events) {
        Utils.checkNotNull(events, "events");
        this.events = Optional.ofNullable(events);
        return this;
    }

    public Webhook withEvents(Optional<? extends java.util.List<Events>> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }

    public Webhook withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * streamId of the stream on which the webhook is applied
     */
    public Webhook withStreamId(String streamId) {
        Utils.checkNotNull(streamId, "streamId");
        this.streamId = Optional.ofNullable(streamId);
        return this;
    }

    /**
     * streamId of the stream on which the webhook is applied
     */
    public Webhook withStreamId(Optional<? extends String> streamId) {
        Utils.checkNotNull(streamId, "streamId");
        this.streamId = streamId;
        return this;
    }

    /**
     * status of webhook
     */
    public Webhook withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * status of webhook
     */
    public Webhook withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Webhook other = (Webhook) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.kind, other.kind) &&
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.events, other.events) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.streamId, other.streamId) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            name,
            kind,
            userId,
            createdAt,
            events,
            url,
            streamId,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Webhook.class,
                "id", id,
                "name", name,
                "kind", kind,
                "userId", userId,
                "createdAt", createdAt,
                "events", events,
                "url", url,
                "streamId", streamId,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private String name;
 
        @Deprecated
        private Optional<? extends String> kind = Optional.empty();
 
        @Deprecated
        private Optional<? extends String> userId = Optional.empty();
 
        private Optional<? extends Double> createdAt = Optional.empty();
 
        private Optional<? extends java.util.List<Events>> events = Optional.empty();
 
        private String url;
 
        private Optional<? extends String> streamId = Optional.empty();
 
        private Optional<? extends Status> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder kind(String kind) {
            Utils.checkNotNull(kind, "kind");
            this.kind = Optional.ofNullable(kind);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder kind(Optional<? extends String> kind) {
            Utils.checkNotNull(kind, "kind");
            this.kind = kind;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder userId(Optional<? extends String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which stream object was created
         */
        public Builder createdAt(double createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which stream object was created
         */
        public Builder createdAt(Optional<? extends Double> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder events(java.util.List<Events> events) {
            Utils.checkNotNull(events, "events");
            this.events = Optional.ofNullable(events);
            return this;
        }

        public Builder events(Optional<? extends java.util.List<Events>> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * streamId of the stream on which the webhook is applied
         */
        public Builder streamId(String streamId) {
            Utils.checkNotNull(streamId, "streamId");
            this.streamId = Optional.ofNullable(streamId);
            return this;
        }

        /**
         * streamId of the stream on which the webhook is applied
         */
        public Builder streamId(Optional<? extends String> streamId) {
            Utils.checkNotNull(streamId, "streamId");
            this.streamId = streamId;
            return this;
        }

        /**
         * status of webhook
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * status of webhook
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public Webhook build() {
            return new Webhook(
                id,
                name,
                kind,
                userId,
                createdAt,
                events,
                url,
                streamId,
                status);
        }
    }
}

