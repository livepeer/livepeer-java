/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.utils.Utils;

/**
 * Fmp4 - FMP4 output format
 */

public class Fmp4 {

    /**
     * Path for the FMP4 output
     */
    @JsonProperty("path")
    private String path;

    @JsonCreator
    public Fmp4(
            @JsonProperty("path") String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
    }

    /**
     * Path for the FMP4 output
     */
    @JsonIgnore
    public String path() {
        return path;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Path for the FMP4 output
     */
    public Fmp4 withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Fmp4 other = (Fmp4) o;
        return 
            Objects.deepEquals(this.path, other.path);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            path);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Fmp4.class,
                "path", path);
    }
    
    public final static class Builder {
 
        private String path;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Path for the FMP4 output
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }
        
        public Fmp4 build() {
            return new Fmp4(
                path);
        }
    }
}

