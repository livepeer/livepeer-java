/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.LazySingletonValue;
import studio.livepeer.livepeer.utils.Utils;

/**
 * Custom - custom URL parameters for the export task
 */

public class Custom {

    /**
     * URL where to export the asset
     */
    @JsonProperty("url")
    private String url;

    /**
     * Method to use on the export request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<String> method;

    /**
     * Headers to add to the export request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    private Optional<? extends Map<String, String>> headers;

    @JsonCreator
    public Custom(
            @JsonProperty("url") String url,
            @JsonProperty("method") Optional<String> method,
            @JsonProperty("headers") Optional<? extends Map<String, String>> headers) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(headers, "headers");
        this.url = url;
        this.method = method;
        this.headers = headers;
    }
    
    public Custom(
            String url) {
        this(url, Optional.empty(), Optional.empty());
    }

    /**
     * URL where to export the asset
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * Method to use on the export request
     */
    @JsonIgnore
    public Optional<String> method() {
        return method;
    }

    /**
     * Headers to add to the export request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> headers() {
        return (Optional<Map<String, String>>) headers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * URL where to export the asset
     */
    public Custom withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Method to use on the export request
     */
    public Custom withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }

    /**
     * Method to use on the export request
     */
    public Custom withMethod(Optional<String> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * Headers to add to the export request
     */
    public Custom withHeaders(Map<String, String> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = Optional.ofNullable(headers);
        return this;
    }

    /**
     * Headers to add to the export request
     */
    public Custom withHeaders(Optional<? extends Map<String, String>> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = headers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Custom other = (Custom) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.headers, other.headers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            method,
            headers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Custom.class,
                "url", url,
                "method", method,
                "headers", headers);
    }
    
    public final static class Builder {
 
        private String url;
 
        private Optional<String> method;
 
        private Optional<? extends Map<String, String>> headers = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL where to export the asset
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Method to use on the export request
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * Method to use on the export request
         */
        public Builder method(Optional<String> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * Headers to add to the export request
         */
        public Builder headers(Map<String, String> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = Optional.ofNullable(headers);
            return this;
        }

        /**
         * Headers to add to the export request
         */
        public Builder headers(Optional<? extends Map<String, String>> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = headers;
            return this;
        }
        
        public Custom build() {
            if (method == null) {
                method = _SINGLETON_VALUE_Method.value();
            }            return new Custom(
                url,
                method,
                headers);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"PUT\"",
                        new TypeReference<Optional<String>>() {});
    }
}

