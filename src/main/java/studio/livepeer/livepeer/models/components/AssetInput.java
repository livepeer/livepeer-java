/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import studio.livepeer.livepeer.utils.Utils;


public class AssetInput {

    /**
     * Type of the asset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AssetType> type;

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackId")
    private Optional<? extends String> playbackId;

    /**
     * Whether to generate MP4s for the asset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("staticMp4")
    private Optional<? extends Boolean> staticMp4;

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackPolicy")
    private JsonNullable<? extends PlaybackPolicy> playbackPolicy;

    @JsonProperty("source")
    private Source source;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorId")
    private Optional<? extends CreatorId> creatorId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage")
    private Optional<? extends AssetStorageInput> storage;

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    @JsonProperty("name")
    private String name;

    /**
     * The ID of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectId")
    private Optional<? extends String> projectId;

    /**
     * Hash of the asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hash")
    private Optional<? extends java.util.List<Hash>> hash;

    @JsonCreator
    public AssetInput(
            @JsonProperty("type") Optional<? extends AssetType> type,
            @JsonProperty("playbackId") Optional<? extends String> playbackId,
            @JsonProperty("staticMp4") Optional<? extends Boolean> staticMp4,
            @JsonProperty("playbackPolicy") JsonNullable<? extends PlaybackPolicy> playbackPolicy,
            @JsonProperty("source") Source source,
            @JsonProperty("creatorId") Optional<? extends CreatorId> creatorId,
            @JsonProperty("storage") Optional<? extends AssetStorageInput> storage,
            @JsonProperty("name") String name,
            @JsonProperty("projectId") Optional<? extends String> projectId,
            @JsonProperty("hash") Optional<? extends java.util.List<Hash>> hash) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(playbackId, "playbackId");
        Utils.checkNotNull(staticMp4, "staticMp4");
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(storage, "storage");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(hash, "hash");
        this.type = type;
        this.playbackId = playbackId;
        this.staticMp4 = staticMp4;
        this.playbackPolicy = playbackPolicy;
        this.source = source;
        this.creatorId = creatorId;
        this.storage = storage;
        this.name = name;
        this.projectId = projectId;
        this.hash = hash;
    }
    
    public AssetInput(
            Source source,
            String name) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), source, Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty());
    }

    /**
     * Type of the asset.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AssetType> type() {
        return (Optional<AssetType>) type;
    }

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> playbackId() {
        return (Optional<String>) playbackId;
    }

    /**
     * Whether to generate MP4s for the asset.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> staticMp4() {
        return (Optional<Boolean>) staticMp4;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlaybackPolicy> playbackPolicy() {
        return (JsonNullable<PlaybackPolicy>) playbackPolicy;
    }

    @JsonIgnore
    public Source source() {
        return source;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatorId> creatorId() {
        return (Optional<CreatorId>) creatorId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AssetStorageInput> storage() {
        return (Optional<AssetStorageInput>) storage;
    }

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The ID of the project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> projectId() {
        return (Optional<String>) projectId;
    }

    /**
     * Hash of the asset
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Hash>> hash() {
        return (Optional<java.util.List<Hash>>) hash;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of the asset.
     */
    public AssetInput withType(AssetType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of the asset.
     */
    public AssetInput withType(Optional<? extends AssetType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    public AssetInput withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = Optional.ofNullable(playbackId);
        return this;
    }

    /**
     * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
     */
    public AssetInput withPlaybackId(Optional<? extends String> playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }

    /**
     * Whether to generate MP4s for the asset.
     */
    public AssetInput withStaticMp4(boolean staticMp4) {
        Utils.checkNotNull(staticMp4, "staticMp4");
        this.staticMp4 = Optional.ofNullable(staticMp4);
        return this;
    }

    /**
     * Whether to generate MP4s for the asset.
     */
    public AssetInput withStaticMp4(Optional<? extends Boolean> staticMp4) {
        Utils.checkNotNull(staticMp4, "staticMp4");
        this.staticMp4 = staticMp4;
        return this;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    public AssetInput withPlaybackPolicy(PlaybackPolicy playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = JsonNullable.of(playbackPolicy);
        return this;
    }

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    public AssetInput withPlaybackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
        Utils.checkNotNull(playbackPolicy, "playbackPolicy");
        this.playbackPolicy = playbackPolicy;
        return this;
    }

    public AssetInput withSource(Source source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public AssetInput withCreatorId(CreatorId creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = Optional.ofNullable(creatorId);
        return this;
    }

    public AssetInput withCreatorId(Optional<? extends CreatorId> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    public AssetInput withStorage(AssetStorageInput storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = Optional.ofNullable(storage);
        return this;
    }

    public AssetInput withStorage(Optional<? extends AssetStorageInput> storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = storage;
        return this;
    }

    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     * 
     */
    public AssetInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the project
     */
    public AssetInput withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = Optional.ofNullable(projectId);
        return this;
    }

    /**
     * The ID of the project
     */
    public AssetInput withProjectId(Optional<? extends String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * Hash of the asset
     */
    public AssetInput withHash(java.util.List<Hash> hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = Optional.ofNullable(hash);
        return this;
    }

    /**
     * Hash of the asset
     */
    public AssetInput withHash(Optional<? extends java.util.List<Hash>> hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = hash;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssetInput other = (AssetInput) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.playbackId, other.playbackId) &&
            java.util.Objects.deepEquals(this.staticMp4, other.staticMp4) &&
            java.util.Objects.deepEquals(this.playbackPolicy, other.playbackPolicy) &&
            java.util.Objects.deepEquals(this.source, other.source) &&
            java.util.Objects.deepEquals(this.creatorId, other.creatorId) &&
            java.util.Objects.deepEquals(this.storage, other.storage) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.projectId, other.projectId) &&
            java.util.Objects.deepEquals(this.hash, other.hash);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            playbackId,
            staticMp4,
            playbackPolicy,
            source,
            creatorId,
            storage,
            name,
            projectId,
            hash);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AssetInput.class,
                "type", type,
                "playbackId", playbackId,
                "staticMp4", staticMp4,
                "playbackPolicy", playbackPolicy,
                "source", source,
                "creatorId", creatorId,
                "storage", storage,
                "name", name,
                "projectId", projectId,
                "hash", hash);
    }
    
    public final static class Builder {
 
        private Optional<? extends AssetType> type = Optional.empty();
 
        private Optional<? extends String> playbackId = Optional.empty();
 
        private Optional<? extends Boolean> staticMp4 = Optional.empty();
 
        private JsonNullable<? extends PlaybackPolicy> playbackPolicy = JsonNullable.undefined();
 
        private Source source;
 
        private Optional<? extends CreatorId> creatorId = Optional.empty();
 
        private Optional<? extends AssetStorageInput> storage = Optional.empty();
 
        private String name;
 
        private Optional<? extends String> projectId = Optional.empty();
 
        private Optional<? extends java.util.List<Hash>> hash = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of the asset.
         */
        public Builder type(AssetType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of the asset.
         */
        public Builder type(Optional<? extends AssetType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = Optional.ofNullable(playbackId);
            return this;
        }

        /**
         * The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
         */
        public Builder playbackId(Optional<? extends String> playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }

        /**
         * Whether to generate MP4s for the asset.
         */
        public Builder staticMp4(boolean staticMp4) {
            Utils.checkNotNull(staticMp4, "staticMp4");
            this.staticMp4 = Optional.ofNullable(staticMp4);
            return this;
        }

        /**
         * Whether to generate MP4s for the asset.
         */
        public Builder staticMp4(Optional<? extends Boolean> staticMp4) {
            Utils.checkNotNull(staticMp4, "staticMp4");
            this.staticMp4 = staticMp4;
            return this;
        }

        /**
         * Whether the playback policy for a asset or stream is public or signed
         */
        public Builder playbackPolicy(PlaybackPolicy playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = JsonNullable.of(playbackPolicy);
            return this;
        }

        /**
         * Whether the playback policy for a asset or stream is public or signed
         */
        public Builder playbackPolicy(JsonNullable<? extends PlaybackPolicy> playbackPolicy) {
            Utils.checkNotNull(playbackPolicy, "playbackPolicy");
            this.playbackPolicy = playbackPolicy;
            return this;
        }

        public Builder source(Source source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder creatorId(CreatorId creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = Optional.ofNullable(creatorId);
            return this;
        }

        public Builder creatorId(Optional<? extends CreatorId> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        public Builder storage(AssetStorageInput storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = Optional.ofNullable(storage);
            return this;
        }

        public Builder storage(Optional<? extends AssetStorageInput> storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = storage;
            return this;
        }

        /**
         * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
         * 
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = Optional.ofNullable(projectId);
            return this;
        }

        /**
         * The ID of the project
         */
        public Builder projectId(Optional<? extends String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }

        /**
         * Hash of the asset
         */
        public Builder hash(java.util.List<Hash> hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = Optional.ofNullable(hash);
            return this;
        }

        /**
         * Hash of the asset
         */
        public Builder hash(Optional<? extends java.util.List<Hash>> hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = hash;
            return this;
        }
        
        public AssetInput build() {
            return new AssetInput(
                type,
                playbackId,
                staticMp4,
                playbackPolicy,
                source,
                creatorId,
                storage,
                name,
                projectId,
                hash);
        }
    }
}

