/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;
/**
 * LastFailure - failure timestamp and error message with status code
 */

public class LastFailure {

    /**
     * Timestamp (in milliseconds) at which the webhook last failed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<? extends Double> timestamp;

    /**
     * Webhook failure error message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends String> error;

    /**
     * Webhook failure response
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response")
    private Optional<? extends String> response;

    /**
     * Webhook failure status code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusCode")
    private Optional<? extends Double> statusCode;

    @JsonCreator
    public LastFailure(
            @JsonProperty("timestamp") Optional<? extends Double> timestamp,
            @JsonProperty("error") Optional<? extends String> error,
            @JsonProperty("response") Optional<? extends String> response,
            @JsonProperty("statusCode") Optional<? extends Double> statusCode) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(response, "response");
        Utils.checkNotNull(statusCode, "statusCode");
        this.timestamp = timestamp;
        this.error = error;
        this.response = response;
        this.statusCode = statusCode;
    }
    
    public LastFailure() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Timestamp (in milliseconds) at which the webhook last failed
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> timestamp() {
        return (Optional<Double>) timestamp;
    }

    /**
     * Webhook failure error message
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> error() {
        return (Optional<String>) error;
    }

    /**
     * Webhook failure response
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> response() {
        return (Optional<String>) response;
    }

    /**
     * Webhook failure status code
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> statusCode() {
        return (Optional<Double>) statusCode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Timestamp (in milliseconds) at which the webhook last failed
     */
    public LastFailure withTimestamp(double timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which the webhook last failed
     */
    public LastFailure withTimestamp(Optional<? extends Double> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Webhook failure error message
     */
    public LastFailure withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * Webhook failure error message
     */
    public LastFailure withError(Optional<? extends String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Webhook failure response
     */
    public LastFailure withResponse(String response) {
        Utils.checkNotNull(response, "response");
        this.response = Optional.ofNullable(response);
        return this;
    }

    /**
     * Webhook failure response
     */
    public LastFailure withResponse(Optional<? extends String> response) {
        Utils.checkNotNull(response, "response");
        this.response = response;
        return this;
    }

    /**
     * Webhook failure status code
     */
    public LastFailure withStatusCode(double statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = Optional.ofNullable(statusCode);
        return this;
    }

    /**
     * Webhook failure status code
     */
    public LastFailure withStatusCode(Optional<? extends Double> statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LastFailure other = (LastFailure) o;
        return 
            java.util.Objects.deepEquals(this.timestamp, other.timestamp) &&
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.response, other.response) &&
            java.util.Objects.deepEquals(this.statusCode, other.statusCode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            timestamp,
            error,
            response,
            statusCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LastFailure.class,
                "timestamp", timestamp,
                "error", error,
                "response", response,
                "statusCode", statusCode);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> timestamp = Optional.empty();
 
        private Optional<? extends String> error = Optional.empty();
 
        private Optional<? extends String> response = Optional.empty();
 
        private Optional<? extends Double> statusCode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Timestamp (in milliseconds) at which the webhook last failed
         */
        public Builder timestamp(double timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which the webhook last failed
         */
        public Builder timestamp(Optional<? extends Double> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Webhook failure error message
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * Webhook failure error message
         */
        public Builder error(Optional<? extends String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Webhook failure response
         */
        public Builder response(String response) {
            Utils.checkNotNull(response, "response");
            this.response = Optional.ofNullable(response);
            return this;
        }

        /**
         * Webhook failure response
         */
        public Builder response(Optional<? extends String> response) {
            Utils.checkNotNull(response, "response");
            this.response = response;
            return this;
        }

        /**
         * Webhook failure status code
         */
        public Builder statusCode(double statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = Optional.ofNullable(statusCode);
            return this;
        }

        /**
         * Webhook failure status code
         */
        public Builder statusCode(Optional<? extends Double> statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }
        
        public LastFailure build() {
            return new LastFailure(
                timestamp,
                error,
                response,
                statusCode);
        }
    }
}

