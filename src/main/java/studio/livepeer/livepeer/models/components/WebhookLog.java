/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class WebhookLog {

    @JsonProperty("id")
    private String id;

    /**
     * ID of the webhook this request was made for
     */
    @JsonProperty("webhookId")
    private String webhookId;

    /**
     * The event type that triggered the webhook request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event")
    private Optional<String> event;

    /**
     * Timestamp (in milliseconds) at which webhook request object was
     * created
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Double> createdAt;

    /**
     * The time taken (in seconds) to make the webhook request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<Double> duration;

    /**
     * Whether the webhook request was successful
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<Boolean> success;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request")
    private Optional<? extends Request> request;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response")
    private Optional<? extends Response> response;

    @JsonCreator
    public WebhookLog(
            @JsonProperty("id") String id,
            @JsonProperty("webhookId") String webhookId,
            @JsonProperty("event") Optional<String> event,
            @JsonProperty("createdAt") Optional<Double> createdAt,
            @JsonProperty("duration") Optional<Double> duration,
            @JsonProperty("success") Optional<Boolean> success,
            @JsonProperty("request") Optional<? extends Request> request,
            @JsonProperty("response") Optional<? extends Response> response) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(webhookId, "webhookId");
        Utils.checkNotNull(event, "event");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(request, "request");
        Utils.checkNotNull(response, "response");
        this.id = id;
        this.webhookId = webhookId;
        this.event = event;
        this.createdAt = createdAt;
        this.duration = duration;
        this.success = success;
        this.request = request;
        this.response = response;
    }
    
    public WebhookLog(
            String id,
            String webhookId) {
        this(id, webhookId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * ID of the webhook this request was made for
     */
    @JsonIgnore
    public String webhookId() {
        return webhookId;
    }

    /**
     * The event type that triggered the webhook request
     */
    @JsonIgnore
    public Optional<String> event() {
        return event;
    }

    /**
     * Timestamp (in milliseconds) at which webhook request object was
     * created
     * 
     */
    @JsonIgnore
    public Optional<Double> createdAt() {
        return createdAt;
    }

    /**
     * The time taken (in seconds) to make the webhook request
     */
    @JsonIgnore
    public Optional<Double> duration() {
        return duration;
    }

    /**
     * Whether the webhook request was successful
     */
    @JsonIgnore
    public Optional<Boolean> success() {
        return success;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Request> request() {
        return (Optional<Request>) request;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Response> response() {
        return (Optional<Response>) response;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WebhookLog withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * ID of the webhook this request was made for
     */
    public WebhookLog withWebhookId(String webhookId) {
        Utils.checkNotNull(webhookId, "webhookId");
        this.webhookId = webhookId;
        return this;
    }

    /**
     * The event type that triggered the webhook request
     */
    public WebhookLog withEvent(String event) {
        Utils.checkNotNull(event, "event");
        this.event = Optional.ofNullable(event);
        return this;
    }

    /**
     * The event type that triggered the webhook request
     */
    public WebhookLog withEvent(Optional<String> event) {
        Utils.checkNotNull(event, "event");
        this.event = event;
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which webhook request object was
     * created
     * 
     */
    public WebhookLog withCreatedAt(double createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Timestamp (in milliseconds) at which webhook request object was
     * created
     * 
     */
    public WebhookLog withCreatedAt(Optional<Double> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The time taken (in seconds) to make the webhook request
     */
    public WebhookLog withDuration(double duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    /**
     * The time taken (in seconds) to make the webhook request
     */
    public WebhookLog withDuration(Optional<Double> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * Whether the webhook request was successful
     */
    public WebhookLog withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * Whether the webhook request was successful
     */
    public WebhookLog withSuccess(Optional<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    public WebhookLog withRequest(Request request) {
        Utils.checkNotNull(request, "request");
        this.request = Optional.ofNullable(request);
        return this;
    }

    public WebhookLog withRequest(Optional<? extends Request> request) {
        Utils.checkNotNull(request, "request");
        this.request = request;
        return this;
    }

    public WebhookLog withResponse(Response response) {
        Utils.checkNotNull(response, "response");
        this.response = Optional.ofNullable(response);
        return this;
    }

    public WebhookLog withResponse(Optional<? extends Response> response) {
        Utils.checkNotNull(response, "response");
        this.response = response;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookLog other = (WebhookLog) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.webhookId, other.webhookId) &&
            Objects.deepEquals(this.event, other.event) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.duration, other.duration) &&
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.request, other.request) &&
            Objects.deepEquals(this.response, other.response);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            webhookId,
            event,
            createdAt,
            duration,
            success,
            request,
            response);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookLog.class,
                "id", id,
                "webhookId", webhookId,
                "event", event,
                "createdAt", createdAt,
                "duration", duration,
                "success", success,
                "request", request,
                "response", response);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String webhookId;
 
        private Optional<String> event = Optional.empty();
 
        private Optional<Double> createdAt = Optional.empty();
 
        private Optional<Double> duration = Optional.empty();
 
        private Optional<Boolean> success = Optional.empty();
 
        private Optional<? extends Request> request = Optional.empty();
 
        private Optional<? extends Response> response = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * ID of the webhook this request was made for
         */
        public Builder webhookId(String webhookId) {
            Utils.checkNotNull(webhookId, "webhookId");
            this.webhookId = webhookId;
            return this;
        }

        /**
         * The event type that triggered the webhook request
         */
        public Builder event(String event) {
            Utils.checkNotNull(event, "event");
            this.event = Optional.ofNullable(event);
            return this;
        }

        /**
         * The event type that triggered the webhook request
         */
        public Builder event(Optional<String> event) {
            Utils.checkNotNull(event, "event");
            this.event = event;
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which webhook request object was
         * created
         * 
         */
        public Builder createdAt(double createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Timestamp (in milliseconds) at which webhook request object was
         * created
         * 
         */
        public Builder createdAt(Optional<Double> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The time taken (in seconds) to make the webhook request
         */
        public Builder duration(double duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        /**
         * The time taken (in seconds) to make the webhook request
         */
        public Builder duration(Optional<Double> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * Whether the webhook request was successful
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * Whether the webhook request was successful
         */
        public Builder success(Optional<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        public Builder request(Request request) {
            Utils.checkNotNull(request, "request");
            this.request = Optional.ofNullable(request);
            return this;
        }

        public Builder request(Optional<? extends Request> request) {
            Utils.checkNotNull(request, "request");
            this.request = request;
            return this;
        }

        public Builder response(Response response) {
            Utils.checkNotNull(response, "response");
            this.response = Optional.ofNullable(response);
            return this;
        }

        public Builder response(Optional<? extends Response> response) {
            Utils.checkNotNull(response, "response");
            this.response = response;
            return this;
        }
        
        public WebhookLog build() {
            return new WebhookLog(
                id,
                webhookId,
                event,
                createdAt,
                duration,
                success,
                request,
                response);
        }
    }
}

