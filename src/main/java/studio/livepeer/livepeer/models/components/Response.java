/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class Response {

    /**
     * response body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<String> body;

    /**
     * HTTP status code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<Double> status;

    /**
     * response status text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusText")
    private Optional<String> statusText;

    @JsonCreator
    public Response(
            @JsonProperty("body") Optional<String> body,
            @JsonProperty("status") Optional<Double> status,
            @JsonProperty("statusText") Optional<String> statusText) {
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(statusText, "statusText");
        this.body = body;
        this.status = status;
        this.statusText = statusText;
    }
    
    public Response() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * response body
     */
    @JsonIgnore
    public Optional<String> body() {
        return body;
    }

    /**
     * HTTP status code
     */
    @JsonIgnore
    public Optional<Double> status() {
        return status;
    }

    /**
     * response status text
     */
    @JsonIgnore
    public Optional<String> statusText() {
        return statusText;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * response body
     */
    public Response withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    /**
     * response body
     */
    public Response withBody(Optional<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * HTTP status code
     */
    public Response withStatus(double status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * HTTP status code
     */
    public Response withStatus(Optional<Double> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * response status text
     */
    public Response withStatusText(String statusText) {
        Utils.checkNotNull(statusText, "statusText");
        this.statusText = Optional.ofNullable(statusText);
        return this;
    }

    /**
     * response status text
     */
    public Response withStatusText(Optional<String> statusText) {
        Utils.checkNotNull(statusText, "statusText");
        this.statusText = statusText;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Response other = (Response) o;
        return 
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.statusText, other.statusText);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            body,
            status,
            statusText);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Response.class,
                "body", body,
                "status", status,
                "statusText", statusText);
    }
    
    public final static class Builder {
 
        private Optional<String> body = Optional.empty();
 
        private Optional<Double> status = Optional.empty();
 
        private Optional<String> statusText = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * response body
         */
        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        /**
         * response body
         */
        public Builder body(Optional<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * HTTP status code
         */
        public Builder status(double status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * HTTP status code
         */
        public Builder status(Optional<Double> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * response status text
         */
        public Builder statusText(String statusText) {
            Utils.checkNotNull(statusText, "statusText");
            this.statusText = Optional.ofNullable(statusText);
            return this;
        }

        /**
         * response status text
         */
        public Builder statusText(Optional<String> statusText) {
            Utils.checkNotNull(statusText, "statusText");
            this.statusText = statusText;
            return this;
        }
        
        public Response build() {
            return new Response(
                body,
                status,
                statusText);
        }
    }
}

