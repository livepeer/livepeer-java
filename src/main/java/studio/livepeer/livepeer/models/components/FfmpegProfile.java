/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * FfmpegProfile - Transcode profile
 */

public class FfmpegProfile {

    @JsonProperty("width")
    private long width;

    @JsonProperty("name")
    private String name;

    @JsonProperty("height")
    private long height;

    @JsonProperty("bitrate")
    private long bitrate;

    @JsonProperty("fps")
    private long fps;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fpsDen")
    private Optional<Long> fpsDen;

    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quality")
    private Optional<Long> quality;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gop")
    private Optional<String> gop;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    private Optional<? extends Profile> profile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encoder")
    private Optional<? extends Encoder> encoder;

    @JsonCreator
    public FfmpegProfile(
            @JsonProperty("width") long width,
            @JsonProperty("name") String name,
            @JsonProperty("height") long height,
            @JsonProperty("bitrate") long bitrate,
            @JsonProperty("fps") long fps,
            @JsonProperty("fpsDen") Optional<Long> fpsDen,
            @JsonProperty("quality") Optional<Long> quality,
            @JsonProperty("gop") Optional<String> gop,
            @JsonProperty("profile") Optional<? extends Profile> profile,
            @JsonProperty("encoder") Optional<? extends Encoder> encoder) {
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(bitrate, "bitrate");
        Utils.checkNotNull(fps, "fps");
        Utils.checkNotNull(fpsDen, "fpsDen");
        Utils.checkNotNull(quality, "quality");
        Utils.checkNotNull(gop, "gop");
        Utils.checkNotNull(profile, "profile");
        Utils.checkNotNull(encoder, "encoder");
        this.width = width;
        this.name = name;
        this.height = height;
        this.bitrate = bitrate;
        this.fps = fps;
        this.fpsDen = fpsDen;
        this.quality = quality;
        this.gop = gop;
        this.profile = profile;
        this.encoder = encoder;
    }
    
    public FfmpegProfile(
            long width,
            String name,
            long height,
            long bitrate,
            long fps) {
        this(width, name, height, bitrate, fps, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public long width() {
        return width;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public long height() {
        return height;
    }

    @JsonIgnore
    public long bitrate() {
        return bitrate;
    }

    @JsonIgnore
    public long fps() {
        return fps;
    }

    @JsonIgnore
    public Optional<Long> fpsDen() {
        return fpsDen;
    }

    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     * 
     */
    @JsonIgnore
    public Optional<Long> quality() {
        return quality;
    }

    @JsonIgnore
    public Optional<String> gop() {
        return gop;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Profile> profile() {
        return (Optional<Profile>) profile;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Encoder> encoder() {
        return (Optional<Encoder>) encoder;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FfmpegProfile withWidth(long width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    public FfmpegProfile withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public FfmpegProfile withHeight(long height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    public FfmpegProfile withBitrate(long bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = bitrate;
        return this;
    }

    public FfmpegProfile withFps(long fps) {
        Utils.checkNotNull(fps, "fps");
        this.fps = fps;
        return this;
    }

    public FfmpegProfile withFpsDen(long fpsDen) {
        Utils.checkNotNull(fpsDen, "fpsDen");
        this.fpsDen = Optional.ofNullable(fpsDen);
        return this;
    }

    public FfmpegProfile withFpsDen(Optional<Long> fpsDen) {
        Utils.checkNotNull(fpsDen, "fpsDen");
        this.fpsDen = fpsDen;
        return this;
    }

    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     * 
     */
    public FfmpegProfile withQuality(long quality) {
        Utils.checkNotNull(quality, "quality");
        this.quality = Optional.ofNullable(quality);
        return this;
    }

    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     * 
     */
    public FfmpegProfile withQuality(Optional<Long> quality) {
        Utils.checkNotNull(quality, "quality");
        this.quality = quality;
        return this;
    }

    public FfmpegProfile withGop(String gop) {
        Utils.checkNotNull(gop, "gop");
        this.gop = Optional.ofNullable(gop);
        return this;
    }

    public FfmpegProfile withGop(Optional<String> gop) {
        Utils.checkNotNull(gop, "gop");
        this.gop = gop;
        return this;
    }

    public FfmpegProfile withProfile(Profile profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = Optional.ofNullable(profile);
        return this;
    }

    public FfmpegProfile withProfile(Optional<? extends Profile> profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = profile;
        return this;
    }

    public FfmpegProfile withEncoder(Encoder encoder) {
        Utils.checkNotNull(encoder, "encoder");
        this.encoder = Optional.ofNullable(encoder);
        return this;
    }

    public FfmpegProfile withEncoder(Optional<? extends Encoder> encoder) {
        Utils.checkNotNull(encoder, "encoder");
        this.encoder = encoder;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FfmpegProfile other = (FfmpegProfile) o;
        return 
            Objects.deepEquals(this.width, other.width) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.bitrate, other.bitrate) &&
            Objects.deepEquals(this.fps, other.fps) &&
            Objects.deepEquals(this.fpsDen, other.fpsDen) &&
            Objects.deepEquals(this.quality, other.quality) &&
            Objects.deepEquals(this.gop, other.gop) &&
            Objects.deepEquals(this.profile, other.profile) &&
            Objects.deepEquals(this.encoder, other.encoder);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            width,
            name,
            height,
            bitrate,
            fps,
            fpsDen,
            quality,
            gop,
            profile,
            encoder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FfmpegProfile.class,
                "width", width,
                "name", name,
                "height", height,
                "bitrate", bitrate,
                "fps", fps,
                "fpsDen", fpsDen,
                "quality", quality,
                "gop", gop,
                "profile", profile,
                "encoder", encoder);
    }
    
    public final static class Builder {
 
        private Long width;
 
        private String name;
 
        private Long height;
 
        private Long bitrate;
 
        private Long fps;
 
        private Optional<Long> fpsDen = Optional.empty();
 
        private Optional<Long> quality = Optional.empty();
 
        private Optional<String> gop = Optional.empty();
 
        private Optional<? extends Profile> profile = Optional.empty();
 
        private Optional<? extends Encoder> encoder = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder width(long width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder height(long height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        public Builder bitrate(long bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = bitrate;
            return this;
        }

        public Builder fps(long fps) {
            Utils.checkNotNull(fps, "fps");
            this.fps = fps;
            return this;
        }

        public Builder fpsDen(long fpsDen) {
            Utils.checkNotNull(fpsDen, "fpsDen");
            this.fpsDen = Optional.ofNullable(fpsDen);
            return this;
        }

        public Builder fpsDen(Optional<Long> fpsDen) {
            Utils.checkNotNull(fpsDen, "fpsDen");
            this.fpsDen = fpsDen;
            return this;
        }

        /**
         * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
         * 
         */
        public Builder quality(long quality) {
            Utils.checkNotNull(quality, "quality");
            this.quality = Optional.ofNullable(quality);
            return this;
        }

        /**
         * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
         * 
         */
        public Builder quality(Optional<Long> quality) {
            Utils.checkNotNull(quality, "quality");
            this.quality = quality;
            return this;
        }

        public Builder gop(String gop) {
            Utils.checkNotNull(gop, "gop");
            this.gop = Optional.ofNullable(gop);
            return this;
        }

        public Builder gop(Optional<String> gop) {
            Utils.checkNotNull(gop, "gop");
            this.gop = gop;
            return this;
        }

        public Builder profile(Profile profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = Optional.ofNullable(profile);
            return this;
        }

        public Builder profile(Optional<? extends Profile> profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = profile;
            return this;
        }

        public Builder encoder(Encoder encoder) {
            Utils.checkNotNull(encoder, "encoder");
            this.encoder = Optional.ofNullable(encoder);
            return this;
        }

        public Builder encoder(Optional<? extends Encoder> encoder) {
            Utils.checkNotNull(encoder, "encoder");
            this.encoder = encoder;
            return this;
        }
        
        public FfmpegProfile build() {
            return new FfmpegProfile(
                width,
                name,
                height,
                bitrate,
                fps,
                fpsDen,
                quality,
                gop,
                profile,
                encoder);
        }
    }
}

