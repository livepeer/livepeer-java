/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * ExportData - Output of the export data task
 */

public class ExportData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipfs")
    private Optional<? extends TaskOutputIpfs> ipfs;

    @JsonCreator
    public ExportData(
            @JsonProperty("ipfs") Optional<? extends TaskOutputIpfs> ipfs) {
        Utils.checkNotNull(ipfs, "ipfs");
        this.ipfs = ipfs;
    }
    
    public ExportData() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaskOutputIpfs> ipfs() {
        return (Optional<TaskOutputIpfs>) ipfs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ExportData withIpfs(TaskOutputIpfs ipfs) {
        Utils.checkNotNull(ipfs, "ipfs");
        this.ipfs = Optional.ofNullable(ipfs);
        return this;
    }

    public ExportData withIpfs(Optional<? extends TaskOutputIpfs> ipfs) {
        Utils.checkNotNull(ipfs, "ipfs");
        this.ipfs = ipfs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExportData other = (ExportData) o;
        return 
            Objects.deepEquals(this.ipfs, other.ipfs);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ipfs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExportData.class,
                "ipfs", ipfs);
    }
    
    public final static class Builder {
 
        private Optional<? extends TaskOutputIpfs> ipfs = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ipfs(TaskOutputIpfs ipfs) {
            Utils.checkNotNull(ipfs, "ipfs");
            this.ipfs = Optional.ofNullable(ipfs);
            return this;
        }

        public Builder ipfs(Optional<? extends TaskOutputIpfs> ipfs) {
            Utils.checkNotNull(ipfs, "ipfs");
            this.ipfs = ipfs;
            return this;
        }
        
        public ExportData build() {
            return new ExportData(
                ipfs);
        }
    }
}

