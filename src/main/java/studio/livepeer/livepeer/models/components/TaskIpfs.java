/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class TaskIpfs {

    /**
     * IPFS CID of the exported video file
     */
    @JsonProperty("videoFileCid")
    private String videoFileCid;

    /**
     * URL for the file with the IPFS protocol
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoFileUrl")
    private Optional<String> videoFileUrl;

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoFileGatewayUrl")
    private Optional<String> videoFileGatewayUrl;

    /**
     * IPFS CID of the default metadata exported for the video
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nftMetadataCid")
    private Optional<String> nftMetadataCid;

    /**
     * URL for the metadata file with the IPFS protocol
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nftMetadataUrl")
    private Optional<String> nftMetadataUrl;

    /**
     * URL to access metadata file via HTTP through an IPFS
     * gateway
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nftMetadataGatewayUrl")
    private Optional<String> nftMetadataGatewayUrl;

    @JsonCreator
    public TaskIpfs(
            @JsonProperty("videoFileCid") String videoFileCid,
            @JsonProperty("videoFileUrl") Optional<String> videoFileUrl,
            @JsonProperty("videoFileGatewayUrl") Optional<String> videoFileGatewayUrl,
            @JsonProperty("nftMetadataCid") Optional<String> nftMetadataCid,
            @JsonProperty("nftMetadataUrl") Optional<String> nftMetadataUrl,
            @JsonProperty("nftMetadataGatewayUrl") Optional<String> nftMetadataGatewayUrl) {
        Utils.checkNotNull(videoFileCid, "videoFileCid");
        Utils.checkNotNull(videoFileUrl, "videoFileUrl");
        Utils.checkNotNull(videoFileGatewayUrl, "videoFileGatewayUrl");
        Utils.checkNotNull(nftMetadataCid, "nftMetadataCid");
        Utils.checkNotNull(nftMetadataUrl, "nftMetadataUrl");
        Utils.checkNotNull(nftMetadataGatewayUrl, "nftMetadataGatewayUrl");
        this.videoFileCid = videoFileCid;
        this.videoFileUrl = videoFileUrl;
        this.videoFileGatewayUrl = videoFileGatewayUrl;
        this.nftMetadataCid = nftMetadataCid;
        this.nftMetadataUrl = nftMetadataUrl;
        this.nftMetadataGatewayUrl = nftMetadataGatewayUrl;
    }
    
    public TaskIpfs(
            String videoFileCid) {
        this(videoFileCid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * IPFS CID of the exported video file
     */
    @JsonIgnore
    public String videoFileCid() {
        return videoFileCid;
    }

    /**
     * URL for the file with the IPFS protocol
     */
    @JsonIgnore
    public Optional<String> videoFileUrl() {
        return videoFileUrl;
    }

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    @JsonIgnore
    public Optional<String> videoFileGatewayUrl() {
        return videoFileGatewayUrl;
    }

    /**
     * IPFS CID of the default metadata exported for the video
     */
    @JsonIgnore
    public Optional<String> nftMetadataCid() {
        return nftMetadataCid;
    }

    /**
     * URL for the metadata file with the IPFS protocol
     */
    @JsonIgnore
    public Optional<String> nftMetadataUrl() {
        return nftMetadataUrl;
    }

    /**
     * URL to access metadata file via HTTP through an IPFS
     * gateway
     * 
     */
    @JsonIgnore
    public Optional<String> nftMetadataGatewayUrl() {
        return nftMetadataGatewayUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * IPFS CID of the exported video file
     */
    public TaskIpfs withVideoFileCid(String videoFileCid) {
        Utils.checkNotNull(videoFileCid, "videoFileCid");
        this.videoFileCid = videoFileCid;
        return this;
    }

    /**
     * URL for the file with the IPFS protocol
     */
    public TaskIpfs withVideoFileUrl(String videoFileUrl) {
        Utils.checkNotNull(videoFileUrl, "videoFileUrl");
        this.videoFileUrl = Optional.ofNullable(videoFileUrl);
        return this;
    }

    /**
     * URL for the file with the IPFS protocol
     */
    public TaskIpfs withVideoFileUrl(Optional<String> videoFileUrl) {
        Utils.checkNotNull(videoFileUrl, "videoFileUrl");
        this.videoFileUrl = videoFileUrl;
        return this;
    }

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    public TaskIpfs withVideoFileGatewayUrl(String videoFileGatewayUrl) {
        Utils.checkNotNull(videoFileGatewayUrl, "videoFileGatewayUrl");
        this.videoFileGatewayUrl = Optional.ofNullable(videoFileGatewayUrl);
        return this;
    }

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    public TaskIpfs withVideoFileGatewayUrl(Optional<String> videoFileGatewayUrl) {
        Utils.checkNotNull(videoFileGatewayUrl, "videoFileGatewayUrl");
        this.videoFileGatewayUrl = videoFileGatewayUrl;
        return this;
    }

    /**
     * IPFS CID of the default metadata exported for the video
     */
    public TaskIpfs withNftMetadataCid(String nftMetadataCid) {
        Utils.checkNotNull(nftMetadataCid, "nftMetadataCid");
        this.nftMetadataCid = Optional.ofNullable(nftMetadataCid);
        return this;
    }

    /**
     * IPFS CID of the default metadata exported for the video
     */
    public TaskIpfs withNftMetadataCid(Optional<String> nftMetadataCid) {
        Utils.checkNotNull(nftMetadataCid, "nftMetadataCid");
        this.nftMetadataCid = nftMetadataCid;
        return this;
    }

    /**
     * URL for the metadata file with the IPFS protocol
     */
    public TaskIpfs withNftMetadataUrl(String nftMetadataUrl) {
        Utils.checkNotNull(nftMetadataUrl, "nftMetadataUrl");
        this.nftMetadataUrl = Optional.ofNullable(nftMetadataUrl);
        return this;
    }

    /**
     * URL for the metadata file with the IPFS protocol
     */
    public TaskIpfs withNftMetadataUrl(Optional<String> nftMetadataUrl) {
        Utils.checkNotNull(nftMetadataUrl, "nftMetadataUrl");
        this.nftMetadataUrl = nftMetadataUrl;
        return this;
    }

    /**
     * URL to access metadata file via HTTP through an IPFS
     * gateway
     * 
     */
    public TaskIpfs withNftMetadataGatewayUrl(String nftMetadataGatewayUrl) {
        Utils.checkNotNull(nftMetadataGatewayUrl, "nftMetadataGatewayUrl");
        this.nftMetadataGatewayUrl = Optional.ofNullable(nftMetadataGatewayUrl);
        return this;
    }

    /**
     * URL to access metadata file via HTTP through an IPFS
     * gateway
     * 
     */
    public TaskIpfs withNftMetadataGatewayUrl(Optional<String> nftMetadataGatewayUrl) {
        Utils.checkNotNull(nftMetadataGatewayUrl, "nftMetadataGatewayUrl");
        this.nftMetadataGatewayUrl = nftMetadataGatewayUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskIpfs other = (TaskIpfs) o;
        return 
            Objects.deepEquals(this.videoFileCid, other.videoFileCid) &&
            Objects.deepEquals(this.videoFileUrl, other.videoFileUrl) &&
            Objects.deepEquals(this.videoFileGatewayUrl, other.videoFileGatewayUrl) &&
            Objects.deepEquals(this.nftMetadataCid, other.nftMetadataCid) &&
            Objects.deepEquals(this.nftMetadataUrl, other.nftMetadataUrl) &&
            Objects.deepEquals(this.nftMetadataGatewayUrl, other.nftMetadataGatewayUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            videoFileCid,
            videoFileUrl,
            videoFileGatewayUrl,
            nftMetadataCid,
            nftMetadataUrl,
            nftMetadataGatewayUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaskIpfs.class,
                "videoFileCid", videoFileCid,
                "videoFileUrl", videoFileUrl,
                "videoFileGatewayUrl", videoFileGatewayUrl,
                "nftMetadataCid", nftMetadataCid,
                "nftMetadataUrl", nftMetadataUrl,
                "nftMetadataGatewayUrl", nftMetadataGatewayUrl);
    }
    
    public final static class Builder {
 
        private String videoFileCid;
 
        private Optional<String> videoFileUrl = Optional.empty();
 
        private Optional<String> videoFileGatewayUrl = Optional.empty();
 
        private Optional<String> nftMetadataCid = Optional.empty();
 
        private Optional<String> nftMetadataUrl = Optional.empty();
 
        private Optional<String> nftMetadataGatewayUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IPFS CID of the exported video file
         */
        public Builder videoFileCid(String videoFileCid) {
            Utils.checkNotNull(videoFileCid, "videoFileCid");
            this.videoFileCid = videoFileCid;
            return this;
        }

        /**
         * URL for the file with the IPFS protocol
         */
        public Builder videoFileUrl(String videoFileUrl) {
            Utils.checkNotNull(videoFileUrl, "videoFileUrl");
            this.videoFileUrl = Optional.ofNullable(videoFileUrl);
            return this;
        }

        /**
         * URL for the file with the IPFS protocol
         */
        public Builder videoFileUrl(Optional<String> videoFileUrl) {
            Utils.checkNotNull(videoFileUrl, "videoFileUrl");
            this.videoFileUrl = videoFileUrl;
            return this;
        }

        /**
         * URL to access file via HTTP through an IPFS gateway
         */
        public Builder videoFileGatewayUrl(String videoFileGatewayUrl) {
            Utils.checkNotNull(videoFileGatewayUrl, "videoFileGatewayUrl");
            this.videoFileGatewayUrl = Optional.ofNullable(videoFileGatewayUrl);
            return this;
        }

        /**
         * URL to access file via HTTP through an IPFS gateway
         */
        public Builder videoFileGatewayUrl(Optional<String> videoFileGatewayUrl) {
            Utils.checkNotNull(videoFileGatewayUrl, "videoFileGatewayUrl");
            this.videoFileGatewayUrl = videoFileGatewayUrl;
            return this;
        }

        /**
         * IPFS CID of the default metadata exported for the video
         */
        public Builder nftMetadataCid(String nftMetadataCid) {
            Utils.checkNotNull(nftMetadataCid, "nftMetadataCid");
            this.nftMetadataCid = Optional.ofNullable(nftMetadataCid);
            return this;
        }

        /**
         * IPFS CID of the default metadata exported for the video
         */
        public Builder nftMetadataCid(Optional<String> nftMetadataCid) {
            Utils.checkNotNull(nftMetadataCid, "nftMetadataCid");
            this.nftMetadataCid = nftMetadataCid;
            return this;
        }

        /**
         * URL for the metadata file with the IPFS protocol
         */
        public Builder nftMetadataUrl(String nftMetadataUrl) {
            Utils.checkNotNull(nftMetadataUrl, "nftMetadataUrl");
            this.nftMetadataUrl = Optional.ofNullable(nftMetadataUrl);
            return this;
        }

        /**
         * URL for the metadata file with the IPFS protocol
         */
        public Builder nftMetadataUrl(Optional<String> nftMetadataUrl) {
            Utils.checkNotNull(nftMetadataUrl, "nftMetadataUrl");
            this.nftMetadataUrl = nftMetadataUrl;
            return this;
        }

        /**
         * URL to access metadata file via HTTP through an IPFS
         * gateway
         * 
         */
        public Builder nftMetadataGatewayUrl(String nftMetadataGatewayUrl) {
            Utils.checkNotNull(nftMetadataGatewayUrl, "nftMetadataGatewayUrl");
            this.nftMetadataGatewayUrl = Optional.ofNullable(nftMetadataGatewayUrl);
            return this;
        }

        /**
         * URL to access metadata file via HTTP through an IPFS
         * gateway
         * 
         */
        public Builder nftMetadataGatewayUrl(Optional<String> nftMetadataGatewayUrl) {
            Utils.checkNotNull(nftMetadataGatewayUrl, "nftMetadataGatewayUrl");
            this.nftMetadataGatewayUrl = nftMetadataGatewayUrl;
            return this;
        }
        
        public TaskIpfs build() {
            return new TaskIpfs(
                videoFileCid,
                videoFileUrl,
                videoFileGatewayUrl,
                nftMetadataCid,
                nftMetadataUrl,
                nftMetadataGatewayUrl);
        }
    }
}

