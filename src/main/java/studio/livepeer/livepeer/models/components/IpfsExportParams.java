/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class IpfsExportParams {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("$ref")
    private Optional<? extends Object> dollarRef;

    /**
     * Custom credentials for the Piñata service. Must have either
     * a JWT or an API key and an API secret.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pinata")
    private Optional<? extends Pinata> pinata;

    @JsonCreator
    public IpfsExportParams(
            @JsonProperty("$ref") Optional<? extends Object> dollarRef,
            @JsonProperty("pinata") Optional<? extends Pinata> pinata) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        Utils.checkNotNull(pinata, "pinata");
        this.dollarRef = dollarRef;
        this.pinata = pinata;
    }
    
    public IpfsExportParams() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> dollarRef() {
        return (Optional<Object>) dollarRef;
    }

    /**
     * Custom credentials for the Piñata service. Must have either
     * a JWT or an API key and an API secret.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Pinata> pinata() {
        return (Optional<Pinata>) pinata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IpfsExportParams withDollarRef(Object dollarRef) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        this.dollarRef = Optional.ofNullable(dollarRef);
        return this;
    }

    public IpfsExportParams withDollarRef(Optional<? extends Object> dollarRef) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        this.dollarRef = dollarRef;
        return this;
    }

    /**
     * Custom credentials for the Piñata service. Must have either
     * a JWT or an API key and an API secret.
     * 
     */
    public IpfsExportParams withPinata(Pinata pinata) {
        Utils.checkNotNull(pinata, "pinata");
        this.pinata = Optional.ofNullable(pinata);
        return this;
    }

    /**
     * Custom credentials for the Piñata service. Must have either
     * a JWT or an API key and an API secret.
     * 
     */
    public IpfsExportParams withPinata(Optional<? extends Pinata> pinata) {
        Utils.checkNotNull(pinata, "pinata");
        this.pinata = pinata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IpfsExportParams other = (IpfsExportParams) o;
        return 
            Objects.deepEquals(this.dollarRef, other.dollarRef) &&
            Objects.deepEquals(this.pinata, other.pinata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dollarRef,
            pinata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IpfsExportParams.class,
                "dollarRef", dollarRef,
                "pinata", pinata);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> dollarRef = Optional.empty();
 
        private Optional<? extends Pinata> pinata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dollarRef(Object dollarRef) {
            Utils.checkNotNull(dollarRef, "dollarRef");
            this.dollarRef = Optional.ofNullable(dollarRef);
            return this;
        }

        public Builder dollarRef(Optional<? extends Object> dollarRef) {
            Utils.checkNotNull(dollarRef, "dollarRef");
            this.dollarRef = dollarRef;
            return this;
        }

        /**
         * Custom credentials for the Piñata service. Must have either
         * a JWT or an API key and an API secret.
         * 
         */
        public Builder pinata(Pinata pinata) {
            Utils.checkNotNull(pinata, "pinata");
            this.pinata = Optional.ofNullable(pinata);
            return this;
        }

        /**
         * Custom credentials for the Piñata service. Must have either
         * a JWT or an API key and an API secret.
         * 
         */
        public Builder pinata(Optional<? extends Pinata> pinata) {
            Utils.checkNotNull(pinata, "pinata");
            this.pinata = pinata;
            return this;
        }
        
        public IpfsExportParams build() {
            return new IpfsExportParams(
                dollarRef,
                pinata);
        }
    }
}

