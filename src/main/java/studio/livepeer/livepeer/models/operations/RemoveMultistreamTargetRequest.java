/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;

public class RemoveMultistreamTargetRequest {

    /**
     * ID of the parent stream
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * ID of the multistream target
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=targetId")
    private String targetId;

    @JsonCreator
    public RemoveMultistreamTargetRequest(
            String id,
            String targetId) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(targetId, "targetId");
        this.id = id;
        this.targetId = targetId;
    }

    /**
     * ID of the parent stream
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * ID of the multistream target
     */
    @JsonIgnore
    public String targetId() {
        return targetId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the parent stream
     */
    public RemoveMultistreamTargetRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * ID of the multistream target
     */
    public RemoveMultistreamTargetRequest withTargetId(String targetId) {
        Utils.checkNotNull(targetId, "targetId");
        this.targetId = targetId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RemoveMultistreamTargetRequest other = (RemoveMultistreamTargetRequest) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.targetId, other.targetId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            targetId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RemoveMultistreamTargetRequest.class,
                "id", id,
                "targetId", targetId);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String targetId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the parent stream
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * ID of the multistream target
         */
        public Builder targetId(String targetId) {
            Utils.checkNotNull(targetId, "targetId");
            this.targetId = targetId;
            return this;
        }
        
        public RemoveMultistreamTargetRequest build() {
            return new RemoveMultistreamTargetRequest(
                id,
                targetId);
        }
    }
}

