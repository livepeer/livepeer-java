/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class GetAssetRequest {

    /**
     * ID of the asset
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=assetId")
    private String assetId;

    @JsonCreator
    public GetAssetRequest(
            String assetId) {
        Utils.checkNotNull(assetId, "assetId");
        this.assetId = assetId;
    }

    /**
     * ID of the asset
     */
    @JsonIgnore
    public String assetId() {
        return assetId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the asset
     */
    public GetAssetRequest withAssetId(String assetId) {
        Utils.checkNotNull(assetId, "assetId");
        this.assetId = assetId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAssetRequest other = (GetAssetRequest) o;
        return 
            Objects.deepEquals(this.assetId, other.assetId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            assetId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetAssetRequest.class,
                "assetId", assetId);
    }
    
    public final static class Builder {
 
        private String assetId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the asset
         */
        public Builder assetId(String assetId) {
            Utils.checkNotNull(assetId, "assetId");
            this.assetId = assetId;
            return this;
        }
        
        public GetAssetRequest build() {
            return new GetAssetRequest(
                assetId);
        }
    }
}

