/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class GetSigningKeyRequest {

    /**
     * ID of the signing key
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=keyId")
    private String keyId;

    @JsonCreator
    public GetSigningKeyRequest(
            String keyId) {
        Utils.checkNotNull(keyId, "keyId");
        this.keyId = keyId;
    }

    /**
     * ID of the signing key
     */
    @JsonIgnore
    public String keyId() {
        return keyId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the signing key
     */
    public GetSigningKeyRequest withKeyId(String keyId) {
        Utils.checkNotNull(keyId, "keyId");
        this.keyId = keyId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSigningKeyRequest other = (GetSigningKeyRequest) o;
        return 
            Objects.deepEquals(this.keyId, other.keyId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            keyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSigningKeyRequest.class,
                "keyId", keyId);
    }
    
    public final static class Builder {
 
        private String keyId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the signing key
         */
        public Builder keyId(String keyId) {
            Utils.checkNotNull(keyId, "keyId");
            this.keyId = keyId;
            return this;
        }
        
        public GetSigningKeyRequest build() {
            return new GetSigningKeyRequest(
                keyId);
        }
    }
}

