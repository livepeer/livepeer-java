/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.models.components.AssetPatchPayload;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class UpdateAssetRequest {

    /**
     * ID of the asset
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=assetId")
    private String assetId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private AssetPatchPayload assetPatchPayload;

    @JsonCreator
    public UpdateAssetRequest(
            String assetId,
            AssetPatchPayload assetPatchPayload) {
        Utils.checkNotNull(assetId, "assetId");
        Utils.checkNotNull(assetPatchPayload, "assetPatchPayload");
        this.assetId = assetId;
        this.assetPatchPayload = assetPatchPayload;
    }

    /**
     * ID of the asset
     */
    @JsonIgnore
    public String assetId() {
        return assetId;
    }

    @JsonIgnore
    public AssetPatchPayload assetPatchPayload() {
        return assetPatchPayload;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the asset
     */
    public UpdateAssetRequest withAssetId(String assetId) {
        Utils.checkNotNull(assetId, "assetId");
        this.assetId = assetId;
        return this;
    }

    public UpdateAssetRequest withAssetPatchPayload(AssetPatchPayload assetPatchPayload) {
        Utils.checkNotNull(assetPatchPayload, "assetPatchPayload");
        this.assetPatchPayload = assetPatchPayload;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateAssetRequest other = (UpdateAssetRequest) o;
        return 
            Objects.deepEquals(this.assetId, other.assetId) &&
            Objects.deepEquals(this.assetPatchPayload, other.assetPatchPayload);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            assetId,
            assetPatchPayload);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateAssetRequest.class,
                "assetId", assetId,
                "assetPatchPayload", assetPatchPayload);
    }
    
    public final static class Builder {
 
        private String assetId;
 
        private AssetPatchPayload assetPatchPayload;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the asset
         */
        public Builder assetId(String assetId) {
            Utils.checkNotNull(assetId, "assetId");
            this.assetId = assetId;
            return this;
        }

        public Builder assetPatchPayload(AssetPatchPayload assetPatchPayload) {
            Utils.checkNotNull(assetPatchPayload, "assetPatchPayload");
            this.assetPatchPayload = assetPatchPayload;
            return this;
        }
        
        public UpdateAssetRequest build() {
            return new UpdateAssetRequest(
                assetId,
                assetPatchPayload);
        }
    }
}

