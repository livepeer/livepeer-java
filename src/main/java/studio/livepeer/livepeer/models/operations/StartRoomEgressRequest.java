/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.models.components.RoomEgressPayload;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class StartRoomEgressRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private RoomEgressPayload roomEgressPayload;

    @JsonCreator
    public StartRoomEgressRequest(
            String id,
            RoomEgressPayload roomEgressPayload) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(roomEgressPayload, "roomEgressPayload");
        this.id = id;
        this.roomEgressPayload = roomEgressPayload;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public RoomEgressPayload roomEgressPayload() {
        return roomEgressPayload;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StartRoomEgressRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public StartRoomEgressRequest withRoomEgressPayload(RoomEgressPayload roomEgressPayload) {
        Utils.checkNotNull(roomEgressPayload, "roomEgressPayload");
        this.roomEgressPayload = roomEgressPayload;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StartRoomEgressRequest other = (StartRoomEgressRequest) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.roomEgressPayload, other.roomEgressPayload);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            roomEgressPayload);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StartRoomEgressRequest.class,
                "id", id,
                "roomEgressPayload", roomEgressPayload);
    }
    
    public final static class Builder {
 
        private String id;
 
        private RoomEgressPayload roomEgressPayload;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder roomEgressPayload(RoomEgressPayload roomEgressPayload) {
            Utils.checkNotNull(roomEgressPayload, "roomEgressPayload");
            this.roomEgressPayload = roomEgressPayload;
            return this;
        }
        
        public StartRoomEgressRequest build() {
            return new StartRoomEgressRequest(
                id,
                roomEgressPayload);
        }
    }
}

