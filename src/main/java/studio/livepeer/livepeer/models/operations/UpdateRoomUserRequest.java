/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;

public class UpdateRoomUserRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=userId")
    private String userId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private studio.livepeer.livepeer.models.components.RoomUserUpdatePayload roomUserUpdatePayload;

    @JsonCreator
    public UpdateRoomUserRequest(
            String id,
            String userId,
            studio.livepeer.livepeer.models.components.RoomUserUpdatePayload roomUserUpdatePayload) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(roomUserUpdatePayload, "roomUserUpdatePayload");
        this.id = id;
        this.userId = userId;
        this.roomUserUpdatePayload = roomUserUpdatePayload;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String userId() {
        return userId;
    }

    @JsonIgnore
    public studio.livepeer.livepeer.models.components.RoomUserUpdatePayload roomUserUpdatePayload() {
        return roomUserUpdatePayload;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateRoomUserRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public UpdateRoomUserRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    public UpdateRoomUserRequest withRoomUserUpdatePayload(studio.livepeer.livepeer.models.components.RoomUserUpdatePayload roomUserUpdatePayload) {
        Utils.checkNotNull(roomUserUpdatePayload, "roomUserUpdatePayload");
        this.roomUserUpdatePayload = roomUserUpdatePayload;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateRoomUserRequest other = (UpdateRoomUserRequest) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.roomUserUpdatePayload, other.roomUserUpdatePayload);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            userId,
            roomUserUpdatePayload);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateRoomUserRequest.class,
                "id", id,
                "userId", userId,
                "roomUserUpdatePayload", roomUserUpdatePayload);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String userId;
 
        private studio.livepeer.livepeer.models.components.RoomUserUpdatePayload roomUserUpdatePayload;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public Builder roomUserUpdatePayload(studio.livepeer.livepeer.models.components.RoomUserUpdatePayload roomUserUpdatePayload) {
            Utils.checkNotNull(roomUserUpdatePayload, "roomUserUpdatePayload");
            this.roomUserUpdatePayload = roomUserUpdatePayload;
            return this;
        }
        
        public UpdateRoomUserRequest build() {
            return new UpdateRoomUserRequest(
                id,
                userId,
                roomUserUpdatePayload);
        }
    }
}

