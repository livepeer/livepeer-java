/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class GetRecordedSessionsRequest {

    /**
     * ID of the parent stream
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=parentId")
    private String parentId;

    /**
     * Flag indicating if the response should only include recorded
     * sessions
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=record")
    private Optional<? extends Record> record;

    @JsonCreator
    public GetRecordedSessionsRequest(
            String parentId,
            Optional<? extends Record> record) {
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(record, "record");
        this.parentId = parentId;
        this.record = record;
    }
    
    public GetRecordedSessionsRequest(
            String parentId) {
        this(parentId, Optional.empty());
    }

    /**
     * ID of the parent stream
     */
    @JsonIgnore
    public String parentId() {
        return parentId;
    }

    /**
     * Flag indicating if the response should only include recorded
     * sessions
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Record> record() {
        return (Optional<Record>) record;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the parent stream
     */
    public GetRecordedSessionsRequest withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    /**
     * Flag indicating if the response should only include recorded
     * sessions
     * 
     */
    public GetRecordedSessionsRequest withRecord(Record record) {
        Utils.checkNotNull(record, "record");
        this.record = Optional.ofNullable(record);
        return this;
    }

    /**
     * Flag indicating if the response should only include recorded
     * sessions
     * 
     */
    public GetRecordedSessionsRequest withRecord(Optional<? extends Record> record) {
        Utils.checkNotNull(record, "record");
        this.record = record;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRecordedSessionsRequest other = (GetRecordedSessionsRequest) o;
        return 
            Objects.deepEquals(this.parentId, other.parentId) &&
            Objects.deepEquals(this.record, other.record);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            parentId,
            record);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRecordedSessionsRequest.class,
                "parentId", parentId,
                "record", record);
    }
    
    public final static class Builder {
 
        private String parentId;
 
        private Optional<? extends Record> record = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the parent stream
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        /**
         * Flag indicating if the response should only include recorded
         * sessions
         * 
         */
        public Builder record(Record record) {
            Utils.checkNotNull(record, "record");
            this.record = Optional.ofNullable(record);
            return this;
        }

        /**
         * Flag indicating if the response should only include recorded
         * sessions
         * 
         */
        public Builder record(Optional<? extends Record> record) {
            Utils.checkNotNull(record, "record");
            this.record = record;
            return this;
        }
        
        public GetRecordedSessionsRequest build() {
            return new GetRecordedSessionsRequest(
                parentId,
                record);
        }
    }
}

