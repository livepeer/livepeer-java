/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;

/**
 * GetPublicViewershipMetricsData - A simplified metric object about aggregate viewership of an
 * asset. Either playbackId or dStorageUrl will be set.
 * 
 */

public class GetPublicViewershipMetricsData {

    /**
     * The playback ID associated with the metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackId")
    private Optional<String> playbackId;

    /**
     * The URL of the distributed storage used for the asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dStorageUrl")
    private Optional<String> dStorageUrl;

    /**
     * The number of views for the stream/asset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewCount")
    private Optional<Long> viewCount;

    /**
     * The total playtime in minutes for the stream/asset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playtimeMins")
    private Optional<Double> playtimeMins;

    @JsonCreator
    public GetPublicViewershipMetricsData(
            @JsonProperty("playbackId") Optional<String> playbackId,
            @JsonProperty("dStorageUrl") Optional<String> dStorageUrl,
            @JsonProperty("viewCount") Optional<Long> viewCount,
            @JsonProperty("playtimeMins") Optional<Double> playtimeMins) {
        Utils.checkNotNull(playbackId, "playbackId");
        Utils.checkNotNull(dStorageUrl, "dStorageUrl");
        Utils.checkNotNull(viewCount, "viewCount");
        Utils.checkNotNull(playtimeMins, "playtimeMins");
        this.playbackId = playbackId;
        this.dStorageUrl = dStorageUrl;
        this.viewCount = viewCount;
        this.playtimeMins = playtimeMins;
    }
    
    public GetPublicViewershipMetricsData() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The playback ID associated with the metric.
     */
    @JsonIgnore
    public Optional<String> playbackId() {
        return playbackId;
    }

    /**
     * The URL of the distributed storage used for the asset
     */
    @JsonIgnore
    public Optional<String> dStorageUrl() {
        return dStorageUrl;
    }

    /**
     * The number of views for the stream/asset.
     */
    @JsonIgnore
    public Optional<Long> viewCount() {
        return viewCount;
    }

    /**
     * The total playtime in minutes for the stream/asset.
     */
    @JsonIgnore
    public Optional<Double> playtimeMins() {
        return playtimeMins;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The playback ID associated with the metric.
     */
    public GetPublicViewershipMetricsData withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = Optional.ofNullable(playbackId);
        return this;
    }

    /**
     * The playback ID associated with the metric.
     */
    public GetPublicViewershipMetricsData withPlaybackId(Optional<String> playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }

    /**
     * The URL of the distributed storage used for the asset
     */
    public GetPublicViewershipMetricsData withDStorageUrl(String dStorageUrl) {
        Utils.checkNotNull(dStorageUrl, "dStorageUrl");
        this.dStorageUrl = Optional.ofNullable(dStorageUrl);
        return this;
    }

    /**
     * The URL of the distributed storage used for the asset
     */
    public GetPublicViewershipMetricsData withDStorageUrl(Optional<String> dStorageUrl) {
        Utils.checkNotNull(dStorageUrl, "dStorageUrl");
        this.dStorageUrl = dStorageUrl;
        return this;
    }

    /**
     * The number of views for the stream/asset.
     */
    public GetPublicViewershipMetricsData withViewCount(long viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = Optional.ofNullable(viewCount);
        return this;
    }

    /**
     * The number of views for the stream/asset.
     */
    public GetPublicViewershipMetricsData withViewCount(Optional<Long> viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = viewCount;
        return this;
    }

    /**
     * The total playtime in minutes for the stream/asset.
     */
    public GetPublicViewershipMetricsData withPlaytimeMins(double playtimeMins) {
        Utils.checkNotNull(playtimeMins, "playtimeMins");
        this.playtimeMins = Optional.ofNullable(playtimeMins);
        return this;
    }

    /**
     * The total playtime in minutes for the stream/asset.
     */
    public GetPublicViewershipMetricsData withPlaytimeMins(Optional<Double> playtimeMins) {
        Utils.checkNotNull(playtimeMins, "playtimeMins");
        this.playtimeMins = playtimeMins;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPublicViewershipMetricsData other = (GetPublicViewershipMetricsData) o;
        return 
            Objects.deepEquals(this.playbackId, other.playbackId) &&
            Objects.deepEquals(this.dStorageUrl, other.dStorageUrl) &&
            Objects.deepEquals(this.viewCount, other.viewCount) &&
            Objects.deepEquals(this.playtimeMins, other.playtimeMins);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            playbackId,
            dStorageUrl,
            viewCount,
            playtimeMins);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPublicViewershipMetricsData.class,
                "playbackId", playbackId,
                "dStorageUrl", dStorageUrl,
                "viewCount", viewCount,
                "playtimeMins", playtimeMins);
    }
    
    public final static class Builder {
 
        private Optional<String> playbackId = Optional.empty();
 
        private Optional<String> dStorageUrl = Optional.empty();
 
        private Optional<Long> viewCount = Optional.empty();
 
        private Optional<Double> playtimeMins = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The playback ID associated with the metric.
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = Optional.ofNullable(playbackId);
            return this;
        }

        /**
         * The playback ID associated with the metric.
         */
        public Builder playbackId(Optional<String> playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }

        /**
         * The URL of the distributed storage used for the asset
         */
        public Builder dStorageUrl(String dStorageUrl) {
            Utils.checkNotNull(dStorageUrl, "dStorageUrl");
            this.dStorageUrl = Optional.ofNullable(dStorageUrl);
            return this;
        }

        /**
         * The URL of the distributed storage used for the asset
         */
        public Builder dStorageUrl(Optional<String> dStorageUrl) {
            Utils.checkNotNull(dStorageUrl, "dStorageUrl");
            this.dStorageUrl = dStorageUrl;
            return this;
        }

        /**
         * The number of views for the stream/asset.
         */
        public Builder viewCount(long viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = Optional.ofNullable(viewCount);
            return this;
        }

        /**
         * The number of views for the stream/asset.
         */
        public Builder viewCount(Optional<Long> viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = viewCount;
            return this;
        }

        /**
         * The total playtime in minutes for the stream/asset.
         */
        public Builder playtimeMins(double playtimeMins) {
            Utils.checkNotNull(playtimeMins, "playtimeMins");
            this.playtimeMins = Optional.ofNullable(playtimeMins);
            return this;
        }

        /**
         * The total playtime in minutes for the stream/asset.
         */
        public Builder playtimeMins(Optional<Double> playtimeMins) {
            Utils.checkNotNull(playtimeMins, "playtimeMins");
            this.playtimeMins = playtimeMins;
            return this;
        }
        
        public GetPublicViewershipMetricsData build() {
            return new GetPublicViewershipMetricsData(
                playbackId,
                dStorageUrl,
                viewCount,
                playtimeMins);
        }
    }
}

