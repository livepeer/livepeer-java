/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class GetPublicViewershipMetricsRequest {

    /**
     * The playback ID to filter the query results. This can be a canonical
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     * 
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=playbackId")
    private String playbackId;

    @JsonCreator
    public GetPublicViewershipMetricsRequest(
            String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
    }

    /**
     * The playback ID to filter the query results. This can be a canonical
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     * 
     */
    @JsonIgnore
    public String playbackId() {
        return playbackId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The playback ID to filter the query results. This can be a canonical
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     * 
     */
    public GetPublicViewershipMetricsRequest withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPublicViewershipMetricsRequest other = (GetPublicViewershipMetricsRequest) o;
        return 
            Objects.deepEquals(this.playbackId, other.playbackId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            playbackId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPublicViewershipMetricsRequest.class,
                "playbackId", playbackId);
    }
    
    public final static class Builder {
 
        private String playbackId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The playback ID to filter the query results. This can be a canonical
         * playback ID from Livepeer assets or streams, or dStorage identifiers
         * for assets
         * 
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }
        
        public GetPublicViewershipMetricsRequest build() {
            return new GetPublicViewershipMetricsRequest(
                playbackId);
        }
    }
}

