/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SDKMethodInterfaces {

    public interface MethodCallCreateStream {
        studio.livepeer.livepeer.models.operations.CreateStreamResponse create(
            studio.livepeer.livepeer.models.components.NewStreamPayload request) throws Exception;
    }


    public interface MethodCallGetStreams {
        studio.livepeer.livepeer.models.operations.GetStreamsResponse getAll(
            Optional<? extends String> streamsonly) throws Exception;
    }


    public interface MethodCallGetStream {
        studio.livepeer.livepeer.models.operations.GetStreamResponse get(
            String id) throws Exception;
    }


    public interface MethodCallUpdateStream {
        studio.livepeer.livepeer.models.operations.UpdateStreamResponse update(
            String id,
            studio.livepeer.livepeer.models.components.StreamPatchPayload streamPatchPayload) throws Exception;
    }


    public interface MethodCallDeleteStream {
        studio.livepeer.livepeer.models.operations.DeleteStreamResponse delete(
            String id) throws Exception;
    }


    public interface MethodCallTerminateStream {
        studio.livepeer.livepeer.models.operations.TerminateStreamResponse terminate(
            String id) throws Exception;
    }


    public interface MethodCallStartPullStream {
        studio.livepeer.livepeer.models.operations.StartPullStreamResponse startPull(
            String id) throws Exception;
    }


    public interface MethodCallCreateClip {
        studio.livepeer.livepeer.models.operations.CreateClipResponse createClip(
            studio.livepeer.livepeer.models.components.ClipPayload request) throws Exception;
    }


    public interface MethodCallGetClips {
        studio.livepeer.livepeer.models.operations.GetClipsResponse getClips(
            String id) throws Exception;
    }


    public interface MethodCallAddMultistreamTarget {
        studio.livepeer.livepeer.models.operations.AddMultistreamTargetResponse addMultistreamTarget(
            String id,
            studio.livepeer.livepeer.models.components.TargetAddPayload targetAddPayload) throws Exception;
    }


    public interface MethodCallRemoveMultistreamTarget {
        studio.livepeer.livepeer.models.operations.RemoveMultistreamTargetResponse removeMultistreamTarget(
            String id,
            String targetId) throws Exception;
    }


    public interface MethodCallGetMultistreamTargets {
        studio.livepeer.livepeer.models.operations.GetMultistreamTargetsResponse getAllDirect() throws Exception;
    }


    public interface MethodCallCreateMultistreamTarget {
        studio.livepeer.livepeer.models.operations.CreateMultistreamTargetResponse create(
            studio.livepeer.livepeer.models.components.MultistreamTargetInput request) throws Exception;
    }


    public interface MethodCallGetMultistreamTarget {
        studio.livepeer.livepeer.models.operations.GetMultistreamTargetResponse get(
            String id) throws Exception;
    }


    public interface MethodCallUpdateMultistreamTarget {
        studio.livepeer.livepeer.models.operations.UpdateMultistreamTargetResponse update(
            String id,
            studio.livepeer.livepeer.models.components.MultistreamTargetPatchPayload multistreamTargetPatchPayload) throws Exception;
    }


    public interface MethodCallDeleteMultistreamTarget {
        studio.livepeer.livepeer.models.operations.DeleteMultistreamTargetResponse delete(
            String id) throws Exception;
    }


    public interface MethodCallGetWebhooks {
        studio.livepeer.livepeer.models.operations.GetWebhooksResponse getAllDirect() throws Exception;
    }


    public interface MethodCallCreateWebhook {
        studio.livepeer.livepeer.models.operations.CreateWebhookResponse create(
            studio.livepeer.livepeer.models.components.WebhookInput request) throws Exception;
    }


    public interface MethodCallGetWebhook {
        studio.livepeer.livepeer.models.operations.GetWebhookResponse get(
            String id) throws Exception;
    }


    public interface MethodCallUpdateWebhook {
        studio.livepeer.livepeer.models.operations.UpdateWebhookResponse update(
            String id,
            studio.livepeer.livepeer.models.components.WebhookInput webhook) throws Exception;
    }


    public interface MethodCallDeleteWebhook {
        studio.livepeer.livepeer.models.operations.DeleteWebhookResponse delete(
            String id) throws Exception;
    }


    public interface MethodCallGetWebhookLogs {
        studio.livepeer.livepeer.models.operations.GetWebhookLogsResponse getLogs(
            String id) throws Exception;
    }


    public interface MethodCallGetWebhookLog {
        studio.livepeer.livepeer.models.operations.GetWebhookLogResponse getLog(
            String id,
            String logId) throws Exception;
    }


    public interface MethodCallResendWebhook {
        studio.livepeer.livepeer.models.operations.ResendWebhookResponse resendLog(
            String id,
            String logId) throws Exception;
    }


    public interface MethodCallGetAssets {
        studio.livepeer.livepeer.models.operations.GetAssetsResponse getAllDirect() throws Exception;
    }


    public interface MethodCallRequestUpload {
        studio.livepeer.livepeer.models.operations.RequestUploadResponse create(
            studio.livepeer.livepeer.models.components.NewAssetPayload request) throws Exception;
    }


    public interface MethodCallUploadAsset {
        studio.livepeer.livepeer.models.operations.UploadAssetResponse createViaUrl(
            studio.livepeer.livepeer.models.components.NewAssetFromUrlPayload request) throws Exception;
    }


    public interface MethodCallGetAsset {
        studio.livepeer.livepeer.models.operations.GetAssetResponse get(
            String assetId) throws Exception;
    }


    public interface MethodCallUpdateAsset {
        studio.livepeer.livepeer.models.operations.UpdateAssetResponse update(
            String assetId,
            studio.livepeer.livepeer.models.components.AssetPatchPayload assetPatchPayload) throws Exception;
    }


    public interface MethodCallDeleteAsset {
        studio.livepeer.livepeer.models.operations.DeleteAssetResponse delete(
            String assetId) throws Exception;
    }


    public interface MethodCallGetSessionClips {
        studio.livepeer.livepeer.models.operations.GetSessionClipsResponse getClips(
            String id) throws Exception;
    }


    public interface MethodCallGetSessions {
        studio.livepeer.livepeer.models.operations.GetSessionsResponse getAllDirect() throws Exception;
    }


    public interface MethodCallGetSession {
        studio.livepeer.livepeer.models.operations.GetSessionResponse get(
            String id) throws Exception;
    }


    public interface MethodCallGetRecordedSessions {
        studio.livepeer.livepeer.models.operations.GetRecordedSessionsResponse getRecorded(
            String parentId,
            Optional<? extends studio.livepeer.livepeer.models.operations.Record> record) throws Exception;
    }


    public interface MethodCallCreateRoom {
        studio.livepeer.livepeer.models.operations.CreateRoomResponse createDirect() throws Exception;
    }


    public interface MethodCallGetRoom {
        studio.livepeer.livepeer.models.operations.GetRoomResponse get(
            String id) throws Exception;
    }


    public interface MethodCallDeleteRoom {
        studio.livepeer.livepeer.models.operations.DeleteRoomResponse delete(
            String id) throws Exception;
    }


    public interface MethodCallStartRoomEgress {
        studio.livepeer.livepeer.models.operations.StartRoomEgressResponse startEgress(
            String id,
            studio.livepeer.livepeer.models.components.RoomEgressPayload roomEgressPayload) throws Exception;
    }


    public interface MethodCallStopRoomEgress {
        studio.livepeer.livepeer.models.operations.StopRoomEgressResponse stopEgress(
            String id) throws Exception;
    }


    public interface MethodCallCreateRoomUser {
        studio.livepeer.livepeer.models.operations.CreateRoomUserResponse createUser(
            String id,
            studio.livepeer.livepeer.models.components.RoomUserPayload roomUserPayload) throws Exception;
    }


    public interface MethodCallGetRoomUser {
        studio.livepeer.livepeer.models.operations.GetRoomUserResponse getUser(
            String id,
            String userId) throws Exception;
    }


    public interface MethodCallUpdateRoomUser {
        studio.livepeer.livepeer.models.operations.UpdateRoomUserResponse updateUser(
            String id,
            String userId,
            studio.livepeer.livepeer.models.components.RoomUserUpdatePayload roomUserUpdatePayload) throws Exception;
    }


    public interface MethodCallDeleteRoomUser {
        studio.livepeer.livepeer.models.operations.DeleteRoomUserResponse deleteUser(
            String id,
            String userId) throws Exception;
    }


    public interface MethodCallGetViewershipMetrics {
        studio.livepeer.livepeer.models.operations.GetViewershipMetricsResponse getViewership(
            studio.livepeer.livepeer.models.operations.GetViewershipMetricsRequest request) throws Exception;
    }


    public interface MethodCallGetCreatorViewershipMetrics {
        studio.livepeer.livepeer.models.operations.GetCreatorViewershipMetricsResponse getCreatorViewership(
            studio.livepeer.livepeer.models.operations.GetCreatorViewershipMetricsRequest request) throws Exception;
    }


    public interface MethodCallGetPublicViewershipMetrics {
        studio.livepeer.livepeer.models.operations.GetPublicViewershipMetricsResponse getPublicViewership(
            String playbackId) throws Exception;
    }


    public interface MethodCallGetUsageMetrics {
        studio.livepeer.livepeer.models.operations.GetUsageMetricsResponse getUsage(
            studio.livepeer.livepeer.models.operations.GetUsageMetricsRequest request) throws Exception;
    }


    public interface MethodCallCreateSigningKey {
        studio.livepeer.livepeer.models.operations.CreateSigningKeyResponse createDirect() throws Exception;
    }


    public interface MethodCallGetSigningKeys {
        studio.livepeer.livepeer.models.operations.GetSigningKeysResponse getAllDirect() throws Exception;
    }


    public interface MethodCallDeleteSigningKey {
        studio.livepeer.livepeer.models.operations.DeleteSigningKeyResponse delete(
            String keyId) throws Exception;
    }


    public interface MethodCallGetSigningKey {
        studio.livepeer.livepeer.models.operations.GetSigningKeyResponse get(
            String keyId) throws Exception;
    }


    public interface MethodCallUpdateSigningKey {
        studio.livepeer.livepeer.models.operations.UpdateSigningKeyResponse update(
            String keyId,
            studio.livepeer.livepeer.models.operations.UpdateSigningKeyRequestBody requestBody) throws Exception;
    }


    public interface MethodCallGetTasks {
        studio.livepeer.livepeer.models.operations.GetTasksResponse getAllDirect() throws Exception;
    }


    public interface MethodCallGetTask {
        studio.livepeer.livepeer.models.operations.GetTaskResponse get(
            String taskId) throws Exception;
    }


    public interface MethodCallTranscodeVideo {
        studio.livepeer.livepeer.models.operations.TranscodeVideoResponse create(
            studio.livepeer.livepeer.models.components.TranscodePayload request) throws Exception;
    }


    public interface MethodCallGetPlaybackInfo {
        studio.livepeer.livepeer.models.operations.GetPlaybackInfoResponse get(
            String id) throws Exception;
    }

}
