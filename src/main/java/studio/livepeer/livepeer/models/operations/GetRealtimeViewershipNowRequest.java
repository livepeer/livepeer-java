/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class GetRealtimeViewershipNowRequest {

    /**
     * The playback ID to filter the query results. This can be a canonical
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=playbackId")
    private Optional<String> playbackId;

    /**
     * The creator ID to filter the query results
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=creatorId")
    private Optional<String> creatorId;

    /**
     * The list of fields to break down the query results. Specify this
     * query-string multiple times to break down by multiple fields.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=breakdownBy[]")
    private Optional<? extends List<BreakdownBy>> breakdownBy;

    @JsonCreator
    public GetRealtimeViewershipNowRequest(
            Optional<String> playbackId,
            Optional<String> creatorId,
            Optional<? extends List<BreakdownBy>> breakdownBy) {
        Utils.checkNotNull(playbackId, "playbackId");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(breakdownBy, "breakdownBy");
        this.playbackId = playbackId;
        this.creatorId = creatorId;
        this.breakdownBy = breakdownBy;
    }
    
    public GetRealtimeViewershipNowRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The playback ID to filter the query results. This can be a canonical
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     * 
     */
    @JsonIgnore
    public Optional<String> playbackId() {
        return playbackId;
    }

    /**
     * The creator ID to filter the query results
     */
    @JsonIgnore
    public Optional<String> creatorId() {
        return creatorId;
    }

    /**
     * The list of fields to break down the query results. Specify this
     * query-string multiple times to break down by multiple fields.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BreakdownBy>> breakdownBy() {
        return (Optional<List<BreakdownBy>>) breakdownBy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The playback ID to filter the query results. This can be a canonical
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     * 
     */
    public GetRealtimeViewershipNowRequest withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = Optional.ofNullable(playbackId);
        return this;
    }

    /**
     * The playback ID to filter the query results. This can be a canonical
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     * 
     */
    public GetRealtimeViewershipNowRequest withPlaybackId(Optional<String> playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }

    /**
     * The creator ID to filter the query results
     */
    public GetRealtimeViewershipNowRequest withCreatorId(String creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = Optional.ofNullable(creatorId);
        return this;
    }

    /**
     * The creator ID to filter the query results
     */
    public GetRealtimeViewershipNowRequest withCreatorId(Optional<String> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    /**
     * The list of fields to break down the query results. Specify this
     * query-string multiple times to break down by multiple fields.
     * 
     */
    public GetRealtimeViewershipNowRequest withBreakdownBy(List<BreakdownBy> breakdownBy) {
        Utils.checkNotNull(breakdownBy, "breakdownBy");
        this.breakdownBy = Optional.ofNullable(breakdownBy);
        return this;
    }

    /**
     * The list of fields to break down the query results. Specify this
     * query-string multiple times to break down by multiple fields.
     * 
     */
    public GetRealtimeViewershipNowRequest withBreakdownBy(Optional<? extends List<BreakdownBy>> breakdownBy) {
        Utils.checkNotNull(breakdownBy, "breakdownBy");
        this.breakdownBy = breakdownBy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRealtimeViewershipNowRequest other = (GetRealtimeViewershipNowRequest) o;
        return 
            Objects.deepEquals(this.playbackId, other.playbackId) &&
            Objects.deepEquals(this.creatorId, other.creatorId) &&
            Objects.deepEquals(this.breakdownBy, other.breakdownBy);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            playbackId,
            creatorId,
            breakdownBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRealtimeViewershipNowRequest.class,
                "playbackId", playbackId,
                "creatorId", creatorId,
                "breakdownBy", breakdownBy);
    }
    
    public final static class Builder {
 
        private Optional<String> playbackId = Optional.empty();
 
        private Optional<String> creatorId = Optional.empty();
 
        private Optional<? extends List<BreakdownBy>> breakdownBy = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The playback ID to filter the query results. This can be a canonical
         * playback ID from Livepeer assets or streams, or dStorage identifiers
         * for assets
         * 
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = Optional.ofNullable(playbackId);
            return this;
        }

        /**
         * The playback ID to filter the query results. This can be a canonical
         * playback ID from Livepeer assets or streams, or dStorage identifiers
         * for assets
         * 
         */
        public Builder playbackId(Optional<String> playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }

        /**
         * The creator ID to filter the query results
         */
        public Builder creatorId(String creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = Optional.ofNullable(creatorId);
            return this;
        }

        /**
         * The creator ID to filter the query results
         */
        public Builder creatorId(Optional<String> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        /**
         * The list of fields to break down the query results. Specify this
         * query-string multiple times to break down by multiple fields.
         * 
         */
        public Builder breakdownBy(List<BreakdownBy> breakdownBy) {
            Utils.checkNotNull(breakdownBy, "breakdownBy");
            this.breakdownBy = Optional.ofNullable(breakdownBy);
            return this;
        }

        /**
         * The list of fields to break down the query results. Specify this
         * query-string multiple times to break down by multiple fields.
         * 
         */
        public Builder breakdownBy(Optional<? extends List<BreakdownBy>> breakdownBy) {
            Utils.checkNotNull(breakdownBy, "breakdownBy");
            this.breakdownBy = breakdownBy;
            return this;
        }
        
        public GetRealtimeViewershipNowRequest build() {
            return new GetRealtimeViewershipNowRequest(
                playbackId,
                creatorId,
                breakdownBy);
        }
    }
}

