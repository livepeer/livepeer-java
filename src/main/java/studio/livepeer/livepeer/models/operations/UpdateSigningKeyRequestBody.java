/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.Utils;


public class UpdateSigningKeyRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    private Optional<Boolean> disabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonCreator
    public UpdateSigningKeyRequestBody(
            @JsonProperty("disabled") Optional<Boolean> disabled,
            @JsonProperty("name") Optional<String> name) {
        Utils.checkNotNull(disabled, "disabled");
        Utils.checkNotNull(name, "name");
        this.disabled = disabled;
        this.name = name;
    }
    
    public UpdateSigningKeyRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> disabled() {
        return disabled;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateSigningKeyRequestBody withDisabled(boolean disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = Optional.ofNullable(disabled);
        return this;
    }

    public UpdateSigningKeyRequestBody withDisabled(Optional<Boolean> disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = disabled;
        return this;
    }

    public UpdateSigningKeyRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public UpdateSigningKeyRequestBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSigningKeyRequestBody other = (UpdateSigningKeyRequestBody) o;
        return 
            Objects.deepEquals(this.disabled, other.disabled) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            disabled,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSigningKeyRequestBody.class,
                "disabled", disabled,
                "name", name);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> disabled = Optional.empty();
 
        private Optional<String> name = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder disabled(boolean disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = Optional.ofNullable(disabled);
            return this;
        }

        public Builder disabled(Optional<Boolean> disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = disabled;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public UpdateSigningKeyRequestBody build() {
            return new UpdateSigningKeyRequestBody(
                disabled,
                name);
        }
    }
}

