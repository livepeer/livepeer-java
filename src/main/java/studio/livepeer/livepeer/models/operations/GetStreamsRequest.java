/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class GetStreamsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=streamsonly")
    private Optional<String> streamsonly;

    @JsonCreator
    public GetStreamsRequest(
            Optional<String> streamsonly) {
        Utils.checkNotNull(streamsonly, "streamsonly");
        this.streamsonly = streamsonly;
    }
    
    public GetStreamsRequest() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> streamsonly() {
        return streamsonly;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetStreamsRequest withStreamsonly(String streamsonly) {
        Utils.checkNotNull(streamsonly, "streamsonly");
        this.streamsonly = Optional.ofNullable(streamsonly);
        return this;
    }

    public GetStreamsRequest withStreamsonly(Optional<String> streamsonly) {
        Utils.checkNotNull(streamsonly, "streamsonly");
        this.streamsonly = streamsonly;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetStreamsRequest other = (GetStreamsRequest) o;
        return 
            Objects.deepEquals(this.streamsonly, other.streamsonly);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            streamsonly);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetStreamsRequest.class,
                "streamsonly", streamsonly);
    }
    
    public final static class Builder {
 
        private Optional<String> streamsonly = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder streamsonly(String streamsonly) {
            Utils.checkNotNull(streamsonly, "streamsonly");
            this.streamsonly = Optional.ofNullable(streamsonly);
            return this;
        }

        public Builder streamsonly(Optional<String> streamsonly) {
            Utils.checkNotNull(streamsonly, "streamsonly");
            this.streamsonly = streamsonly;
            return this;
        }
        
        public GetStreamsRequest build() {
            return new GetStreamsRequest(
                streamsonly);
        }
    }
}

