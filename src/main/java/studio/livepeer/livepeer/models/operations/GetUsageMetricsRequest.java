/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import studio.livepeer.livepeer.utils.SpeakeasyMetadata;
import studio.livepeer.livepeer.utils.Utils;


public class GetUsageMetricsRequest {

    /**
     * Start millis timestamp for the query range (inclusive)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    private Optional<? extends Long> from;

    /**
     * End millis timestamp for the query range (exclusive)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=to")
    private Optional<? extends Long> to;

    /**
     * The time step to aggregate viewership metrics by
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeStep")
    private Optional<? extends GetUsageMetricsQueryParamTimeStep> timeStep;

    /**
     * The creator ID to filter the query results
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=creatorId")
    private Optional<? extends String> creatorId;

    /**
     * The list of fields to break down the query results. Currently the
     * only supported breakdown is by `creatorId`.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=breakdownBy[]")
    private Optional<? extends java.util.List<GetUsageMetricsQueryParamBreakdownBy>> breakdownBy;

    @JsonCreator
    public GetUsageMetricsRequest(
            Optional<? extends Long> from,
            Optional<? extends Long> to,
            Optional<? extends GetUsageMetricsQueryParamTimeStep> timeStep,
            Optional<? extends String> creatorId,
            Optional<? extends java.util.List<GetUsageMetricsQueryParamBreakdownBy>> breakdownBy) {
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(to, "to");
        Utils.checkNotNull(timeStep, "timeStep");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(breakdownBy, "breakdownBy");
        this.from = from;
        this.to = to;
        this.timeStep = timeStep;
        this.creatorId = creatorId;
        this.breakdownBy = breakdownBy;
    }
    
    public GetUsageMetricsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Start millis timestamp for the query range (inclusive)
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> from() {
        return (Optional<Long>) from;
    }

    /**
     * End millis timestamp for the query range (exclusive)
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> to() {
        return (Optional<Long>) to;
    }

    /**
     * The time step to aggregate viewership metrics by
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetUsageMetricsQueryParamTimeStep> timeStep() {
        return (Optional<GetUsageMetricsQueryParamTimeStep>) timeStep;
    }

    /**
     * The creator ID to filter the query results
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> creatorId() {
        return (Optional<String>) creatorId;
    }

    /**
     * The list of fields to break down the query results. Currently the
     * only supported breakdown is by `creatorId`.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetUsageMetricsQueryParamBreakdownBy>> breakdownBy() {
        return (Optional<java.util.List<GetUsageMetricsQueryParamBreakdownBy>>) breakdownBy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Start millis timestamp for the query range (inclusive)
     * 
     */
    public GetUsageMetricsRequest withFrom(long from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    /**
     * Start millis timestamp for the query range (inclusive)
     * 
     */
    public GetUsageMetricsRequest withFrom(Optional<? extends Long> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * End millis timestamp for the query range (exclusive)
     * 
     */
    public GetUsageMetricsRequest withTo(long to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }

    /**
     * End millis timestamp for the query range (exclusive)
     * 
     */
    public GetUsageMetricsRequest withTo(Optional<? extends Long> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }

    /**
     * The time step to aggregate viewership metrics by
     * 
     */
    public GetUsageMetricsRequest withTimeStep(GetUsageMetricsQueryParamTimeStep timeStep) {
        Utils.checkNotNull(timeStep, "timeStep");
        this.timeStep = Optional.ofNullable(timeStep);
        return this;
    }

    /**
     * The time step to aggregate viewership metrics by
     * 
     */
    public GetUsageMetricsRequest withTimeStep(Optional<? extends GetUsageMetricsQueryParamTimeStep> timeStep) {
        Utils.checkNotNull(timeStep, "timeStep");
        this.timeStep = timeStep;
        return this;
    }

    /**
     * The creator ID to filter the query results
     * 
     */
    public GetUsageMetricsRequest withCreatorId(String creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = Optional.ofNullable(creatorId);
        return this;
    }

    /**
     * The creator ID to filter the query results
     * 
     */
    public GetUsageMetricsRequest withCreatorId(Optional<? extends String> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    /**
     * The list of fields to break down the query results. Currently the
     * only supported breakdown is by `creatorId`.
     * 
     */
    public GetUsageMetricsRequest withBreakdownBy(java.util.List<GetUsageMetricsQueryParamBreakdownBy> breakdownBy) {
        Utils.checkNotNull(breakdownBy, "breakdownBy");
        this.breakdownBy = Optional.ofNullable(breakdownBy);
        return this;
    }

    /**
     * The list of fields to break down the query results. Currently the
     * only supported breakdown is by `creatorId`.
     * 
     */
    public GetUsageMetricsRequest withBreakdownBy(Optional<? extends java.util.List<GetUsageMetricsQueryParamBreakdownBy>> breakdownBy) {
        Utils.checkNotNull(breakdownBy, "breakdownBy");
        this.breakdownBy = breakdownBy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetUsageMetricsRequest other = (GetUsageMetricsRequest) o;
        return 
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.to, other.to) &&
            java.util.Objects.deepEquals(this.timeStep, other.timeStep) &&
            java.util.Objects.deepEquals(this.creatorId, other.creatorId) &&
            java.util.Objects.deepEquals(this.breakdownBy, other.breakdownBy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            from,
            to,
            timeStep,
            creatorId,
            breakdownBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetUsageMetricsRequest.class,
                "from", from,
                "to", to,
                "timeStep", timeStep,
                "creatorId", creatorId,
                "breakdownBy", breakdownBy);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> from = Optional.empty();
 
        private Optional<? extends Long> to = Optional.empty();
 
        private Optional<? extends GetUsageMetricsQueryParamTimeStep> timeStep = Optional.empty();
 
        private Optional<? extends String> creatorId = Optional.empty();
 
        private Optional<? extends java.util.List<GetUsageMetricsQueryParamBreakdownBy>> breakdownBy = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Start millis timestamp for the query range (inclusive)
         * 
         */
        public Builder from(long from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        /**
         * Start millis timestamp for the query range (inclusive)
         * 
         */
        public Builder from(Optional<? extends Long> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        /**
         * End millis timestamp for the query range (exclusive)
         * 
         */
        public Builder to(long to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        /**
         * End millis timestamp for the query range (exclusive)
         * 
         */
        public Builder to(Optional<? extends Long> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }

        /**
         * The time step to aggregate viewership metrics by
         * 
         */
        public Builder timeStep(GetUsageMetricsQueryParamTimeStep timeStep) {
            Utils.checkNotNull(timeStep, "timeStep");
            this.timeStep = Optional.ofNullable(timeStep);
            return this;
        }

        /**
         * The time step to aggregate viewership metrics by
         * 
         */
        public Builder timeStep(Optional<? extends GetUsageMetricsQueryParamTimeStep> timeStep) {
            Utils.checkNotNull(timeStep, "timeStep");
            this.timeStep = timeStep;
            return this;
        }

        /**
         * The creator ID to filter the query results
         * 
         */
        public Builder creatorId(String creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = Optional.ofNullable(creatorId);
            return this;
        }

        /**
         * The creator ID to filter the query results
         * 
         */
        public Builder creatorId(Optional<? extends String> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        /**
         * The list of fields to break down the query results. Currently the
         * only supported breakdown is by `creatorId`.
         * 
         */
        public Builder breakdownBy(java.util.List<GetUsageMetricsQueryParamBreakdownBy> breakdownBy) {
            Utils.checkNotNull(breakdownBy, "breakdownBy");
            this.breakdownBy = Optional.ofNullable(breakdownBy);
            return this;
        }

        /**
         * The list of fields to break down the query results. Currently the
         * only supported breakdown is by `creatorId`.
         * 
         */
        public Builder breakdownBy(Optional<? extends java.util.List<GetUsageMetricsQueryParamBreakdownBy>> breakdownBy) {
            Utils.checkNotNull(breakdownBy, "breakdownBy");
            this.breakdownBy = breakdownBy;
            return this;
        }
        
        public GetUsageMetricsRequest build() {
            return new GetUsageMetricsRequest(
                from,
                to,
                timeStep,
                creatorId,
                breakdownBy);
        }
    }
}

