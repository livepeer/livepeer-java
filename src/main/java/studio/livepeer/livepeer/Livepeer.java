/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package studio.livepeer.livepeer;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpRequest;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import studio.livepeer.livepeer.models.operations.SDKMethodInterfaces.*;
import studio.livepeer.livepeer.utils.HTTPClient;
import studio.livepeer.livepeer.utils.Hook.AfterErrorContextImpl;
import studio.livepeer.livepeer.utils.Hook.AfterSuccessContextImpl;
import studio.livepeer.livepeer.utils.Hook.BeforeRequestContextImpl;
import studio.livepeer.livepeer.utils.Retries.NonRetryableException;
import studio.livepeer.livepeer.utils.RetryConfig;
import studio.livepeer.livepeer.utils.SpeakeasyHTTPClient;
import studio.livepeer.livepeer.utils.Utils;

/**
 * Livepeer API Reference: Welcome to the Livepeer API reference docs. Here you will find all the
 * endpoints exposed on the standard Livepeer API, learn how to use them and
 * what they return.
 * 
 */
public class Livepeer {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://livepeer.studio/api",
    };

    /**
     * Operations related to livestream api
     */
    private final Stream stream;

    /**
     * Operations related to multistream api
     */
    private final Multistream multistream;

    /**
     * Operations related to webhook api
     */
    private final Webhook webhook;

    /**
     * Operations related to asset/vod api
     */
    private final Asset asset;

    /**
     * Operations related to session api
     */
    private final Session session;

    /**
     * Operations related to rooms api
     */
    private final Room room;

    /**
     * Operations related to metrics api
     */
    private final Metrics metrics;

    /**
     * Operations related to access control/signing keys api
     */
    private final AccessControl accessControl;

    /**
     * Operations related to tasks api
     */
    private final Task task;

    /**
     * Operations related to transcode api
     */
    private final Transcode transcode;

    /**
     * Operations related to playback api
     */
    private final Playback playback;

    /**
     * Operations related to livestream api
     */
    public Stream stream() {
        return stream;
    }

    /**
     * Operations related to multistream api
     */
    public Multistream multistream() {
        return multistream;
    }

    /**
     * Operations related to webhook api
     */
    public Webhook webhook() {
        return webhook;
    }

    /**
     * Operations related to asset/vod api
     */
    public Asset asset() {
        return asset;
    }

    /**
     * Operations related to session api
     */
    public Session session() {
        return session;
    }

    /**
     * Operations related to rooms api
     */
    public Room room() {
        return room;
    }

    /**
     * Operations related to metrics api
     */
    public Metrics metrics() {
        return metrics;
    }

    /**
     * Operations related to access control/signing keys api
     */
    public AccessControl accessControl() {
        return accessControl;
    }

    /**
     * Operations related to tasks api
     */
    public Task task() {
        return task;
    }

    /**
     * Operations related to transcode api
     */
    public Transcode transcode() {
        return transcode;
    }

    /**
     * Operations related to playback api
     */
    public Playback playback() {
        return playback;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param apiKey The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder apiKey(String apiKey) {
            this.sdkConfiguration.securitySource = SecuritySource.of(studio.livepeer.livepeer.models.components.Security.builder()
              .apiKey(apiKey)
              .build());
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, java.util.Map<String, String> params) {
            this.sdkConfiguration.serverUrl = studio.livepeer.livepeer.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        // Visible for testing, will be accessed via reflection
        void _hooks(studio.livepeer.livepeer.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);    
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public Livepeer build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new Livepeer(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Livepeer(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.stream = new Stream(sdkConfiguration);
        this.multistream = new Multistream(sdkConfiguration);
        this.webhook = new Webhook(sdkConfiguration);
        this.asset = new Asset(sdkConfiguration);
        this.session = new Session(sdkConfiguration);
        this.room = new Room(sdkConfiguration);
        this.metrics = new Metrics(sdkConfiguration);
        this.accessControl = new AccessControl(sdkConfiguration);
        this.task = new Task(sdkConfiguration);
        this.transcode = new Transcode(sdkConfiguration);
        this.playback = new Playback(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
